TEXTUAL REPRESENTATION

Please take note that 
	 content was escaped for representation of clones for space efficiency

---------------------------Clone group no  0 for hash 0ef6d2ca0e7c6d550e764c8f28cc6b52--------------------



rs.next();String result = rs.getString(1);rs.close();return result;

rs.next();String result = rs.getString(1);rs.close();return result;

---------------------------Clone group no  1 for hash 19e18579ec69af20edbd3a78afa5aa77--------------------



sb.append(name).append(Tokens.T_OPENBRACKET).append(precision);sb.append(Tokens.T_CLOSEBRACKET);return sb.toString();

sb.append(name).append(Tokens.T_OPENBRACKET).append(precision);sb.append(Tokens.T_CLOSEBRACKET);return sb.toString();

---------------------------Clone group no  2 for hash cdc11344f5aec929fb6edce4a9d5f5e3--------------------



System.out.println(number_of_txns);ntrans = number_of_txns;Conn   = connect(url, user, password);if (Conn == null) {
                return;
            }

System.out.println(number_of_txns);ntrans = number_of_txns;Conn   = connect(url, user, password);if (Conn == null) {
                return;
            }

System.out.println(number_of_txns);ntrans = number_of_txns;Conn   = connect(url, user, password);if (Conn == null) {
                return;
            }

---------------------------Clone group no  3 for hash 14cebccbf38e69bc4bc031149c3f1852--------------------



group = StatementTypes.X_SQL_SCHEMA_DEFINITION;order = 7;break;

group = StatementTypes.X_SQL_SCHEMA_DEFINITION;order = 7;break;

---------------------------Clone group no  4 for hash caa6e84ca55cf7f07159ff7ac5c30026--------------------



read();break;case Tokens.SCRIPT :

read();break;case Tokens.SCRIPT :

---------------------------Clone group no  5 for hash e5e703fd98b0f1b9236508282169be72--------------------



// fall through
            case Types.SQL_INTERVAL_YEAR :case Types.SQL_INTERVAL_MONTH :case Types.SQL_INTERVAL_DAY :case Types.SQL_INTERVAL_HOUR :case Types.SQL_INTERVAL_MINUTE :

case Types.SQL_INTERVAL_YEAR :case Types.SQL_INTERVAL_MONTH :case Types.SQL_INTERVAL_DAY :case Types.SQL_INTERVAL_HOUR :case Types.SQL_INTERVAL_MINUTE :

---------------------------Clone group no  6 for hash 87b33a4e27975daac941c0d3f11604fb--------------------



statementType = StatementTypes.CREATE_ROUTINE;sql = getStatementForRoutine(
                                position, startStatementTokensSchema);cs = new StatementSchema(sql, statementType);break;

statementType = StatementTypes.CREATE_ROUTINE;sql = getStatementForRoutine(
                                position, startStatementTokensSchema);cs = new StatementSchema(sql, statementType);break;

---------------------------Clone group no  7 for hash 035117cfdf813cae55c02d3eae4e1983--------------------



case TableBase.MEMORY_TABLE :default :action = RowAction.addDeleteAction(session, table, row,
                                                       colMap);

case TableBase.MEMORY_TABLE :default :action = RowAction.addDeleteAction(session, table, row,
                                                       colMap);

---------------------------Clone group no  8 for hash acb8a7986d820e1ea274c01b0ee799d3--------------------



return;case 1 :NodeAVL r = x.child(store, !isleft);

return;case 1 :NodeAVL r = x.child(store, !isleft);

---------------------------Clone group no  9 for hash fd6763452db6d03ee75dcd5ba5927329--------------------



delete(session, row);// remove info after delete but before removing persistence
                database.txManager.removeTransactionInfo(row);remove(row);break;

delete(session, row);// remove info after delete but before removing persistence
                database.txManager.removeTransactionInfo(row);remove(row);break;

---------------------------Clone group no  10 for hash edf24ea5612e215b94386de0091754f5--------------------



// Intermediate holders
        Iterator grantees;Grantee  grantee;Object[] row;

// Intermediate holders
        Iterator grantees;Grantee  grantee;Object[] row;

---------------------------Clone group no  11 for hash eb9e740d13359ff9b560beffcdfba589--------------------



arrayList.add(tempInt);deque.add(tempInt);vector.addElement(tempInt);

arrayList.add(tempInt);deque.add(tempInt);vector.addElement(tempInt);

---------------------------Clone group no  12 for hash 80d946426ea56e210f93e2ff6e3d2843--------------------



object.setStorageSize(size);long pos = tableSpace.getFilePosition(size, false);object.setPos(pos);

object.setStorageSize(size);long pos = tableSpace.getFilePosition(size, false);object.setPos(pos);

object.setStorageSize(size);long pos = tableSpace.getFilePosition(size, false);object.setPos(pos);

object.setStorageSize(size);long pos = tableSpace.getFilePosition(size, false);object.setPos(pos);

---------------------------Clone group no  13 for hash 2ac7a8e5d1ff3d18544871190180ac0a--------------------



sb.append(Tokens.T_ALTER).append(' ');sb.append(Tokens.T_USER).append(' ');sb.append(getName().getStatementName()).append(' ');

sb.append(Tokens.T_ALTER).append(' ');sb.append(Tokens.T_USER).append(' ');sb.append(getName().getStatementName()).append(' ');

---------------------------Clone group no  14 for hash fedf4cb01730eae65c6ef1404adecbbc--------------------



addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);              //30addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);    // (only for array tyes)addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);

addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);

addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);

addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);                //addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);      // (only for array tyes)addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);

---------------------------Clone group no  15 for hash 41784e89718697133e69b01fd0e83ff4--------------------



break;case LobResultTypes.REQUEST_SET_CHARS :case LobResultTypes.REQUEST_GET_CHAR_PATTERN_POSITION :

break;case LobResultTypes.REQUEST_SET_CHARS :case LobResultTypes.REQUEST_GET_CHAR_PATTERN_POSITION :

---------------------------Clone group no  16 for hash 3f9b774523938963435bd126211f8e5a--------------------



intervalPosition  = 0;fractionPrecision = 0;dateTimeType      = null;intervalString    = s;

intervalPosition  = 0;fractionPrecision = 0;dateTimeType      = null;intervalString    = s;

intervalPosition  = 0;fractionPrecision = 0;dateTimeType      = null;intervalString    = s;

---------------------------Clone group no  17 for hash c51cd477cf3028fde38c9d39dca65c62--------------------



read();String   sql  = getLastPart();Object[] args = new Object[]{ name };

read();String   sql  = getLastPart();Object[] args = new Object[]{ name };

---------------------------Clone group no  18 for hash bff989eb74631ab410be5066eb36ffa3--------------------



PersistentStore store =
                    rangeVar.rangeTable.getRowStore(session);cost = store.elementCount();if (cost < Index.minimumSelectivity) {
                    cost = Index.minimumSelectivity;
                }

PersistentStore store =
                            rangeVar.rangeTable.getRowStore(session);cost = store.elementCount();if (cost < Index.minimumSelectivity) {
                            cost = Index.minimumSelectivity;
                        }

---------------------------Clone group no  19 for hash b0594ce29124ba750dd1f81516255210--------------------



addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);addColumn(t, \"CHARACTER_SET_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);          //addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);        //addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);

addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);addColumn(t, \"CHARACTER_SET_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);

---------------------------Clone group no  20 for hash 0ce64ab995bbd45d4f01afc986bcecc5--------------------



c      = inPacket.readByteChar();handle = inPacket.readString();odbcPs = null;portal = null;

c      = inPacket.readByteChar();handle = inPacket.readString();odbcPs = null;portal = null;

---------------------------Clone group no  21 for hash 7433f304eb6a9599d3d5c04e888f6129--------------------



// new actionTimestamp used for commitTimestamp
            session.actionTimestamp         = getNextGlobalChangeTimestamp();session.transactionEndTimestamp = session.actionTimestamp;endTransaction(session);for (int i = 0; i < limit; i++) {
                RowAction action = (RowAction) session.rowActionList.get(i);

                action.commit(session);
            }

// new actionTimestamp used for commitTimestamp
            session.actionTimestamp         = getNextGlobalChangeTimestamp();session.transactionEndTimestamp = session.actionTimestamp;endTransaction(session);for (int i = 0; i < limit; i++) {
                RowAction action = (RowAction) session.rowActionList.get(i);

                action.commit(session);
            }

// new actionTimestamp used for commitTimestamp
            session.actionTimestamp         = getNextGlobalChangeTimestamp();session.transactionEndTimestamp = session.actionTimestamp;endTransaction(session);for (int i = 0; i < limit; i++) {
                RowAction action = (RowAction) session.rowActionList.get(i);

                action.commit(session);
            }

---------------------------Clone group no  22 for hash fd024a3606506347e3e06d4d835d45f3--------------------



granteeObject = (Grantee) grantees.get(i);OrderedHashSet rights =
                    granteeObject.getAllDirectPrivileges(table);OrderedHashSet grants =
                    granteeObject.getAllGrantedPrivileges(table);if (!grants.isEmpty()) {
                    grants.addAll(rights);

                    rights = grants;
                }

granteeObject = (Grantee) grantees.get(i);OrderedHashSet rights =
                    granteeObject.getAllDirectPrivileges(table);OrderedHashSet grants =
                    granteeObject.getAllGrantedPrivileges(table);if (!grants.isEmpty()) {
                    grants.addAll(rights);

                    rights = grants;
                }

---------------------------Clone group no  23 for hash e1a86daf653141e3c14911312397c863--------------------



rs.next();assertEquals(rs.getString(1), \"INFORMATION_SCHEMA\");assertEquals(rs.getString(2), \"_SYSTEM\");rs.close();

rs.next();assertEquals(rs.getString(1), \"INFORMATION_SCHEMA\");assertEquals(rs.getString(2), \"_SYSTEM\");rs.close();

---------------------------Clone group no  24 for hash 21d600a0fd36dfcfa0c0a98cde755d4a--------------------



Stmt.execute(Query);Stmt.clearWarnings();Conn.commit();

Stmt.execute(Query);Stmt.clearWarnings();Conn.commit();

---------------------------Clone group no  25 for hash d21b1fb28e3420122e5eba1815cc2df6--------------------



ps.executeUpdate();data = data.replaceFirst(\"insert\", \"INSERT\");clob = new JDBCClob(data);

ps.executeUpdate();data = data.replaceFirst(\"insert\", \"INSERT\");clob = new JDBCClob(data);

---------------------------Clone group no  26 for hash 53d3604cdef640d716f3b13d8caf0932--------------------



sStatement.execute(\"CALL IDENTITY();\");ResultSet rs = sStatement.getResultSet();rs.next();int lastId = rs.getInt(1);

sStatement.execute(\"CALL IDENTITY();\");ResultSet rs = sStatement.getResultSet();rs.next();int lastId = rs.getInt(1);

---------------------------Clone group no  27 for hash 5c5fa1665782c6bfe6010d87b182e1bf--------------------



HsqlArrayList list      = new HsqlArrayList();Expression    condition = null;Statement     statement;Statement[]   statements;

HsqlArrayList list      = new HsqlArrayList();Expression    condition = null;Statement     statement;Statement[]   statements;

HsqlArrayList list      = new HsqlArrayList();Expression    condition = null;Statement     statement;Statement[]   statements;

---------------------------Clone group no  28 for hash 1e8d32e85cb925bca29e961a532da480--------------------



readFieldPrefix();scanner.scanNext();String token = scanner.getString();value = null;

readFieldPrefix();scanner.scanNext();String token = scanner.getString();value = null;

---------------------------Clone group no  29 for hash 431ba0c91a94f8b61e70600d496b4e74--------------------



break;default :throw Error.runtimeError(ErrorCode.U_S0500, \"IntervalType\");

break;default :throw Error.runtimeError(ErrorCode.U_S0500, \"IntervalType\");

break;default :throw Error.runtimeError(ErrorCode.U_S0500, \"IntervalType\");

break;default :throw Error.runtimeError(ErrorCode.U_S0500, \"IntervalType\");

---------------------------Clone group no  30 for hash 52ed9cc88d8af27e014cd1629bf45836--------------------



rowOut.writeByte(generateKeys);if (generateKeys == ResultConstants
                        .RETURN_GENERATED_KEYS_COL_NAMES || generateKeys == ResultConstants
                        .RETURN_GENERATED_KEYS_COL_INDEXES) {
                    generatedMetaData.write(rowOut);
                }break;

rowOut.writeByte(generateKeys);if (generateKeys == ResultConstants
                        .RETURN_GENERATED_KEYS_COL_NAMES || generateKeys == ResultConstants
                        .RETURN_GENERATED_KEYS_COL_INDEXES) {
                    generatedMetaData.write(rowOut);
                }break;

---------------------------Clone group no  31 for hash 16934f7469b798a569057eaba79cece7--------------------



populateBySerialIntKeys(uMap, hMap, testSize);compareByUIterator(uMap, hMap);compareByHIterator(uMap, hMap);

populateBySerialIntKeys(uMap, hMap, testSize);compareByUIterator(uMap, hMap);compareByHIterator(uMap, hMap);

---------------------------Clone group no  32 for hash c95331a1b6dffc60d9f7ae7d90f2cfc7--------------------



int index = hashIndex.getHashIndex((int) (longKey ^ (longKey >>> 32)));int  lookup     = hashIndex.hashTable[index];int  lastLookup = -1;

int index = hashIndex.getHashIndex((int) (longKey ^ (longKey >>> 32)));int    lookup     = hashIndex.hashTable[index];int    lastLookup = -1;

---------------------------Clone group no  33 for hash 718cafc36ef749ac4f147d1da3f3e682--------------------



/*
         ** Barrier to complete this test session
         */
        e = vClient.elements();while (e.hasMoreElements()) {
            Client = (Thread) e.nextElement();

            Client.join();
        }vClient.removeAllElements();reportDone();guardian = connect(url, user, password);

/*
         ** Barrier to complete this test session
         */
        e = vClient.elements();while (e.hasMoreElements()) {
            Client = (Thread) e.nextElement();

            Client.join();
        }vClient.removeAllElements();reportDone();guardian = connect(url, user, password);

---------------------------Clone group no  34 for hash c9866a036166653051bacfdc79aec54f--------------------



checkValidCatalogName(token.namePrefix);if (token.namePrePrefix != null) {
                        throw tooManyIdentifiers();
                    }break;

checkValidCatalogName(token.namePrefix);if (token.namePrePrefix != null) {
                        throw tooManyIdentifiers();
                    }break;

---------------------------Clone group no  35 for hash 23386e45c0fceec9588738e332beee1d--------------------



if (byteArrayOS.size() == 0) {
                break;
            }//
            dataOut.writeByte(mode);dataOut.writeInt(databaseID);dataOut.writeLong(sessionID);dataOut.writeLong(lobID);

if (byteArrayOS.size() == 0) {
                break;
            }//
            dataOut.writeByte(mode);dataOut.writeInt(databaseID);dataOut.writeLong(sessionID);dataOut.writeLong(lobID);

---------------------------Clone group no  36 for hash fa700375c1e42a06d9b0c7ee1d2141d8--------------------



if (baOut.length != baR1.length) {
                assertTrue(\"Expected array len \" + baR1.length + \", got len \"
                           + baOut.length, false);
            }for (int i = 0; i < baOut.length; i++) {
                if (baOut[i] != baR1[i]) {
                    assertTrue(\"Expected array len \" + baR1.length
                               + \", got len \" + baOut.length, false);
                }
            }rs.close();

if (baOut.length != baR1.length) {
                assertTrue(\"Expected array len \" + baR1.length + \", got len \"
                           + baOut.length, false);
            }for (int i = 0; i < baOut.length; i++) {
                if (baOut[i] != baR1[i]) {
                    assertTrue(\"Expected array len \" + baR1.length
                               + \", got len \" + baOut.length, false);
                }
            }rs.close();

---------------------------Clone group no  37 for hash 1066bb18e5b69f940ae15ccb5f8cb6d9--------------------



read();readThis(Tokens.OPENBRACKET);String  spec    = readQuotedString();Scanner scanner = session.getScanner();scanner.reset(spec);scanner.scanNext();String schemaName =
                        session.getSchemaName(scanner.token.namePrefix);NumberSequence sequence =
                        database.schemaManager.getSequence(
                            scanner.token.tokenString, schemaName, true);

read();readThis(Tokens.OPENBRACKET);String  spec    = readQuotedString();Scanner scanner = session.getScanner();scanner.reset(spec);scanner.scanNext();String schemaName = session.getSchemaName(scanner.token.namePrefix);NumberSequence sequence =
            database.schemaManager.getSequence(scanner.token.tokenString,
                                               schemaName, true);

---------------------------Clone group no  38 for hash 4d1538df9e13b49f4a10b3841ce11c6f--------------------



compareByUIterator(uMap, hMap);compareByHIterator(uMap, hMap);populateByRandomIntKeys(uMap, hMap, testSize);compareByUIterator(uMap, hMap);compareByHIterator(uMap, hMap);depopulateRandomly(uMap, hMap, 20);

compareByUIterator(uMap, hMap);compareByHIterator(uMap, hMap);populateByRandomIntKeys(uMap, hMap, testSize);compareByUIterator(uMap, hMap);compareByHIterator(uMap, hMap);depopulateRandomly(uMap, hMap, 20);

---------------------------Clone group no  39 for hash 9631e4d7af7c68760749fc455bc19d57--------------------



grantee = (Grantee) grantees.next();row     = t.getEmptyRowData();row[0]  = grantee.getName().getNameString();

grantee = (Grantee) grantees.next();row     = t.getEmptyRowData();row[0]  = grantee.getName().getNameString();

---------------------------Clone group no  40 for hash 63ea8ebf1d755e25629fb97c36006725--------------------



String[] array = new String[list.size()];list.toArray(array);return array;

String[] array = new String[list.size()];list.toArray(array);return array;

String[] array = new String[list.size()];list.toArray(array);return array;

---------------------------Clone group no  41 for hash 155b73738aab8641c95e0d4601e2449b--------------------



String dml0 = \"INSERT INTO VARIABLE VALUES (?, ?, 'N', ?, ?)\";String dml1 =
                \"UPDATE VARIABLE SET value = ? WHERE stateid = ? AND \"
                + \"varid = ? AND scalabilitypassivated = 'N' AND scopeguid = ?\";PreparedStatement ps = connection.prepareStatement(dml0);

String dml0 = \"INSERT INTO VARIABLE VALUES (?, ?, 'N', ?, ?)\";String dml1 =
                \"UPDATE VARIABLE SET value = ? WHERE stateid = ? AND \"
                + \"varid = ? AND scalabilitypassivated = 'N' AND scopeguid = ?\";PreparedStatement ps = connection.prepareStatement(dml0);

---------------------------Clone group no  42 for hash 565169fda0f3759e796c63e4277fe5fd--------------------



//-- Newline indicates that field should match to end of line.
        if (fieldSep.endsWith(\"\\n\")) {
            fieldSepEnd = true;
            fieldSep    = fieldSep.substring(0, fieldSep.length() - 1);
        }if (varSep.endsWith(\"\\n\")) {
            varSepEnd = true;
            varSep    = varSep.substring(0, varSep.length() - 1);
        }if (longvarSep.endsWith(\"\\n\")) {
            longvarSepEnd = true;
            longvarSep    = longvarSep.substring(0, longvarSep.length() - 1);
        }

//-- Newline indicates that field should match to end of line.
        if (fieldSep.endsWith(\"\\n\")) {
            fieldSepEnd = true;
            fieldSep    = fieldSep.substring(0, fieldSep.length() - 1);
        }if (varSep.endsWith(\"\\n\")) {
            varSepEnd = true;
            varSep    = varSep.substring(0, varSep.length() - 1);
        }if (longvarSep.endsWith(\"\\n\")) {
            longvarSepEnd = true;
            longvarSep    = longvarSep.substring(0, longvarSep.length() - 1);
        }

---------------------------Clone group no  43 for hash 4213dca38f27a051169ef97e46c670d6--------------------



ResultLob resultLob =
                        ResultLob.newLobCreateBlobRequest(session.getId(), id,
                            stream, length);session.allocateResultLob(resultLob, null);resultOut.addLobResult(resultLob);

ResultLob resultLob =
                        ResultLob.newLobCreateBlobRequest(session.getId(), id,
                            stream, length);session.allocateResultLob(resultLob, null);resultOut.addLobResult(resultLob);

---------------------------Clone group no  44 for hash 3272187882eefeb99cecb96619752c70--------------------



if (exprList.size() > 1) {
            throw Error.parseError(ErrorCode.X_42602, null,
                                   scanner.getLineNumber());
        }Expression expression = (Expression) exprList.get(0);if (expression.getDegree() != targetSet.size()) {
            throw Error.error(ErrorCode.X_42546, Tokens.T_SET);
        }int[] columnMap = new int[colIndexList.size()];colIndexList.toArray(columnMap);Expression[] targets = new Expression[targetSet.size()];targetSet.toArray(targets);

if (exprList.size() > 1) {
            throw Error.parseError(ErrorCode.X_42602, null,
                                   scanner.getLineNumber());
        }Expression expression = (Expression) exprList.get(0);if (expression.getDegree() != targetSet.size()) {
            throw Error.error(ErrorCode.X_42546, Tokens.T_SET);
        }int[] columnMap = new int[colIndexList.size()];colIndexList.toArray(columnMap);Expression[] targets = new Expression[targetSet.size()];targetSet.toArray(targets);

---------------------------Clone group no  45 for hash fa0dbecf983f7774b8d9dd31322425c3--------------------



String name = srs.getString(2);float  id   = srs.getFloat(1);System.out.println(name + \"   \" + id);

String name = srs.getString(2);float  id   = srs.getFloat(1);System.out.println(name + \"   \" + id);

String name = srs.getString(2);float  id   = srs.getFloat(1);System.out.println(name + \"   \" + id);

String name = srs.getString(2);float  id   = srs.getFloat(1);System.out.println(name + \"   \" + id);

---------------------------Clone group no  46 for hash bec8a191bf98e869b4b56bbe31b40202--------------------



statement.setStatements(statements);statement.setCondition(condition);return statement;

statement.setStatements(statements);statement.setCondition(condition);return statement;

---------------------------Clone group no  47 for hash e42e4295564f13681d210def0cff046f--------------------



break;case 'u' :case 'U' :

break;case 'u' :case 'U' :

---------------------------Clone group no  48 for hash 51cf9252bf20b90e2d248110fc7119e8--------------------



appendColumns(sb, updateColumnMap).append('\\n');appendTable(sb).append('\\n');appendCondition(session, sb);for (int i = 0; i < targetRangeVariables.length; i++) {
                    sb.append(targetRangeVariables[i].describe(session,
                            blanks)).append('\\n');
                }appendParms(sb).append('\\n');appendSubqueries(session, sb, 2).append(']');return sb.toString();

appendColumns(sb, updateColumnMap).append('\\n');appendTable(sb).append('\\n');appendCondition(session, sb);for (int i = 0; i < targetRangeVariables.length; i++) {
                    sb.append(targetRangeVariables[i].describe(session,
                            blanks)).append('\\n');
                }appendParms(sb).append('\\n');appendSubqueries(session, sb, 2).append(']');return sb.toString();

---------------------------Clone group no  49 for hash 14a6ccda1907491cd1980c4b140daf74--------------------



statement.execute(\"drop table t1 if exists\");statement.execute(
                \"create table t1 (i int primary key, c varchar(10), t varbinary(3))\");String            insert = \"insert into t1 values(?,?,?)\";String            select = \"select i, c, t from t1\";PreparedStatement ps     = connection.prepareStatement(insert);for (int i = 0; i < 10; i++) {
                ps.setInt(1, i);
                ps.setString(2, String.valueOf(i) + \" s\");
                ps.setBytes(3, new byte[] {
                    (byte) i, ' ', (byte) i
                });
                ps.execute();
            }connection.setAutoCommit(false);ResultSet rs = statement.executeQuery(select);

statement.execute(\"drop table t1 if exists\");statement.execute(
                \"create table t1 (i int primary key, c varchar(10), t varbinary(3))\");String            insert = \"insert into t1 values(?,?,?)\";String            select = \"select i, c, t from t1\";PreparedStatement ps     = connection.prepareStatement(insert);for (int i = 0; i < 10; i++) {
                ps.setInt(1, i);
                ps.setString(2, String.valueOf(i) + \" s\");
                ps.setBytes(3, new byte[] {
                    (byte) i, ' ', (byte) i
                });
                ps.execute();
            }connection.setAutoCommit(false);ResultSet rs = statement.executeQuery(select);

---------------------------Clone group no  50 for hash c9634c50939982af62ab8f9c815f0f0f--------------------



default :setAsNoOp();break;

default :setAsNoOp();break;

---------------------------Clone group no  51 for hash d33915ad85557d7aac808837049346d7--------------------



dbAlias[i]          = null;dbPath[i]           = null;dbType[i]           = null;dbProps[i]          = null;

dbAlias[i] = null;dbPath[i]  = null;dbType[i]  = null;dbProps[i] = null;

---------------------------Clone group no  52 for hash 9a51ce807c660c6d5d1714b54354e343--------------------



break;default :throw unexpectedToken();

break;default :throw unexpectedToken();

break;default :throw unexpectedToken();

break;default :throw unexpectedToken();

break;default :throw unexpectedToken();

break;default :throw unexpectedToken();

break;default :throw unexpectedToken();

break;default :throw unexpectedToken();

break;default :throw unexpectedToken();

break;default :throw unexpectedToken();

break;default :throw unexpectedToken();

break;default :throw unexpectedToken();

break;default :throw unexpectedToken();

break;default :throw unexpectedToken();

break;default :throw unexpectedToken();

break;default :throw unexpectedToken();

break;default :throw unexpectedToken();

break;default :throw unexpectedToken();

break;default :throw unexpectedToken();

break;default :throw unexpectedToken();

---------------------------Clone group no  53 for hash e1d4e5d8bc84da67e9a02f4341cec279--------------------



addColumn(t, \"GRANTOR\", SQL_IDENTIFIER);     // not nulladdColumn(t, \"GRANTEE\", SQL_IDENTIFIER);     // not nulladdColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);    // not nulladdColumn(t, \"PRIVILEGE_TYPE\", CHARACTER_DATA);addColumn(t, \"IS_GRANTABLE\", YES_OR_NO);     // not null

addColumn(t, \"GRANTOR\", SQL_IDENTIFIER);addColumn(t, \"GRANTEE\", SQL_IDENTIFIER);addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);addColumn(t, \"PRIVILEGE_TYPE\", CHARACTER_DATA);addColumn(t, \"IS_GRANTABLE\", YES_OR_NO);

---------------------------Clone group no  54 for hash c489135a6877fd35be0d07f6d7ce8851--------------------



read();Expression e1 = XreadNumericValueExpression();readThis(Tokens.RIGHTBRACKET);e = new ExpressionAccessor(e, e1);

read();Expression e1 = XreadNumericValueExpression();readThis(Tokens.RIGHTBRACKET);e = new ExpressionAccessor(e, e1);

---------------------------Clone group no  55 for hash ac07033a9b15bd72f2da66318f60b110--------------------



r = sStatement.executeQuery(s);r.next();b1n = r.getBytes(1);r.next();b1n = r.getBytes(1);

r = sStatement.executeQuery(s);r.next();b1n = r.getBytes(1);r.next();b1n = r.getBytes(1);

---------------------------Clone group no  56 for hash 4cf11c95b91a908b7f064a58c841d1d1--------------------



parameterValues[i - 1] = o;streamLengths[i - 1]   = streamLength;parameterSet[i - 1]    = Boolean.FALSE;return;

parameterValues[i - 1] = o;streamLengths[i - 1]   = streamLength;parameterSet[i - 1]    = Boolean.FALSE;return;

// in the same database ? see if it blocks in
            parameterValues[i - 1] = o;streamLengths[i - 1]   = streamLength;parameterSet[i - 1]    = Boolean.FALSE;return;

parameterValues[i - 1] = o;streamLengths[i - 1]   = streamLength;parameterSet[i - 1]    = Boolean.FALSE;return;

---------------------------Clone group no  57 for hash ea29b7ef1333b06586772f033d409187--------------------



junit.framework.AssertionFailedError ase
                = new junit.framework.AssertionFailedError(se.getMessage());ase.initCause(se);throw ase;

junit.framework.AssertionFailedError ase
                = new junit.framework.AssertionFailedError(se.getMessage());ase.initCause(se);throw ase;

junit.framework.AssertionFailedError ase
                = new junit.framework.AssertionFailedError(se.getMessage());ase.initCause(se);throw ase;

junit.framework.AssertionFailedError ase
                = new junit.framework.AssertionFailedError(se.getMessage());ase.initCause(se);throw ase;

junit.framework.AssertionFailedError ase
                = new junit.framework.AssertionFailedError(se.getMessage());ase.initCause(se);throw ase;

junit.framework.AssertionFailedError ase
                = new junit.framework.AssertionFailedError(se.getMessage());ase.initCause(se);throw ase;

junit.framework.AssertionFailedError ase
                = new junit.framework.AssertionFailedError(se.getMessage());ase.initCause(se);throw ase;

junit.framework.AssertionFailedError ase
                = new junit.framework.AssertionFailedError(se.getMessage());ase.initCause(se);throw ase;

junit.framework.AssertionFailedError ase
                = new junit.framework.AssertionFailedError(se.getMessage());ase.initCause(se);throw ase;

junit.framework.AssertionFailedError ase
                = new junit.framework.AssertionFailedError(se.getMessage());ase.initCause(se);throw ase;

junit.framework.AssertionFailedError ase
                = new junit.framework.AssertionFailedError(se.getMessage());ase.initCause(se);throw ase;

junit.framework.AssertionFailedError ase
                = new junit.framework.AssertionFailedError(se.getMessage());ase.initCause(se);throw ase;

junit.framework.AssertionFailedError ase
                = new junit.framework.AssertionFailedError(se.getMessage());ase.initCause(se);throw ase;

junit.framework.AssertionFailedError ase
                = new junit.framework.AssertionFailedError(se.getMessage());ase.initCause(se);throw ase;

junit.framework.AssertionFailedError ase
                = new junit.framework.AssertionFailedError(se.getMessage());ase.initCause(se);throw ase;

junit.framework.AssertionFailedError ase
                = new junit.framework.AssertionFailedError(se.getMessage());ase.initCause(se);throw ase;

junit.framework.AssertionFailedError ase
                = new junit.framework.AssertionFailedError(se.getMessage());ase.initCause(se);throw ase;

junit.framework.AssertionFailedError ase
                = new junit.framework.AssertionFailedError(se.getMessage());ase.initCause(se);throw ase;

junit.framework.AssertionFailedError ase
                = new junit.framework.AssertionFailedError(se.getMessage());ase.initCause(se);throw ase;

junit.framework.AssertionFailedError ase
                = new junit.framework.AssertionFailedError(se.getMessage());ase.initCause(se);throw ase;

junit.framework.AssertionFailedError ase
                = new junit.framework.AssertionFailedError(se.getMessage());ase.initCause(se);throw ase;

junit.framework.AssertionFailedError ase
                = new junit.framework.AssertionFailedError(se.getMessage());ase.initCause(se);throw ase;

junit.framework.AssertionFailedError ase
                = new junit.framework.AssertionFailedError(se.getMessage());ase.initCause(se);throw ase;

junit.framework.AssertionFailedError ase
                = new junit.framework.AssertionFailedError(se.getMessage());ase.initCause(se);throw ase;

junit.framework.AssertionFailedError ase
                = new junit.framework.AssertionFailedError(se.getMessage());ase.initCause(se);throw ase;

junit.framework.AssertionFailedError ase
                = new junit.framework.AssertionFailedError(se.getMessage());ase.initCause(se);throw ase;

junit.framework.AssertionFailedError ase
                = new junit.framework.AssertionFailedError(se.getMessage());ase.initCause(se);throw ase;

junit.framework.AssertionFailedError ase
                = new junit.framework.AssertionFailedError(se.getMessage());ase.initCause(se);throw ase;

junit.framework.AssertionFailedError ase
                = new junit.framework.AssertionFailedError(se.getMessage());ase.initCause(se);throw ase;

junit.framework.AssertionFailedError ase
                = new junit.framework.AssertionFailedError(se.getMessage());ase.initCause(se);throw ase;

junit.framework.AssertionFailedError ase
                = new junit.framework.AssertionFailedError(se.getMessage());ase.initCause(se);throw ase;

junit.framework.AssertionFailedError ase
                = new junit.framework.AssertionFailedError(se.getMessage());ase.initCause(se);throw ase;

junit.framework.AssertionFailedError ase
                = new junit.framework.AssertionFailedError(se.getMessage());ase.initCause(se);throw ase;

junit.framework.AssertionFailedError ase
                = new junit.framework.AssertionFailedError(se.getMessage());ase.initCause(se);throw ase;

junit.framework.AssertionFailedError ase
                = new junit.framework.AssertionFailedError(se.getMessage());ase.initCause(se);throw ase;

junit.framework.AssertionFailedError ase
                = new junit.framework.AssertionFailedError(se.getMessage());ase.initCause(se);throw ase;

junit.framework.AssertionFailedError ase
                = new junit.framework.AssertionFailedError(se.getMessage());ase.initCause(se);throw ase;

junit.framework.AssertionFailedError ase
                = new junit.framework.AssertionFailedError(se.getMessage());ase.initCause(se);throw ase;

junit.framework.AssertionFailedError ase
                = new junit.framework.AssertionFailedError(se.getMessage());ase.initCause(se);throw ase;

junit.framework.AssertionFailedError ase
                = new junit.framework.AssertionFailedError(se.getMessage());ase.initCause(se);throw ase;

junit.framework.AssertionFailedError ase
                = new junit.framework.AssertionFailedError(se.getMessage());ase.initCause(se);throw ase;

junit.framework.AssertionFailedError ase
                = new junit.framework.AssertionFailedError(se.getMessage());ase.initCause(se);throw ase;

---------------------------Clone group no  58 for hash 2a145353624df87d4abd159c364c1f26--------------------



row = getRow(session, args);/**
                 * @todo - in 2PL mode isDeleted() always returns false.
                 * While write lock prevents delete by other transactions,
                 * same-transaction deletes are not caught
                 */
                if (row == null || row.isDeleted(session, store)) {
                    throw Error.error(ErrorCode.X_24521);
                }RowSetNavigatorDataChange list =
                    session.sessionContext.getRowSetDataChange();

row = getRow(session, args);if (row == null || row.isDeleted(session, store)) {
                    throw Error.error(ErrorCode.X_24521);
                }RowSetNavigatorDataChange list =
                    session.sessionContext.getRowSetDataChange();

---------------------------Clone group no  59 for hash 295d7426ca08db783f85b38fef02f856--------------------



row[icolumn_name]   = column.getName().name;row[idata_type]     = ValuePool.getInt(type.getJDBCTypeCode());row[itype_name]     = type.getNameString();

row[icolumn_name]       = column.getName().name;row[idata_type] = ValuePool.getInt(type.getJDBCTypeCode());row[itype_name]         = type.getNameString();

---------------------------Clone group no  60 for hash 29b7916b96bf04209f1402b301420f06--------------------



break;case ResultConstants.DISCONNECT :case ResultConstants.RESETSESSION :case ResultConstants.STARTTRAN :break;case ResultConstants.PREPARE :

break;case ResultConstants.DISCONNECT :case ResultConstants.RESETSESSION :case ResultConstants.STARTTRAN :break;case ResultConstants.PREPARE :

---------------------------Clone group no  61 for hash b751ed83fa116cec98900214f07b6a0e--------------------



case Types.SQL_FLOAT :case Types.SQL_REAL :case Types.SQL_DOUBLE :

case Types.SQL_FLOAT :case Types.SQL_REAL :case Types.SQL_DOUBLE :

---------------------------Clone group no  62 for hash c8ade907d6ad8e8ca64a47ab839f02f8--------------------



reset();out.writeLong(id);out.writeInt(size);out.writeInt(0);    // offsetout.writeInt(size);while (hasNext()) {
            Object[] data = getNext();

            out.writeData(meta.getExtendedColumnCount(), meta.columnTypes,
                          data, null, null);
        }reset();

reset();out.writeLong(id);out.writeInt(size);out.writeInt(0);    // offsetout.writeInt(size);while (hasNext()) {
            Object[] data = getNext();

            out.writeData(meta.getExtendedColumnCount(), meta.columnTypes,
                          data, null, null);
        }reset();

---------------------------Clone group no  63 for hash 7a49a21a50edb9a95daa64bbaa7ea1db--------------------



e.isSingleColumnEqual     = true;e.isSingleColumnCondition = true;tempMap.put(e.getRightNode().getColumn(), e.getLeftNode());continue;

e.isSingleColumnEqual     = true;e.isSingleColumnCondition = true;tempMap.put(e.getRightNode().getColumn(), e.getLeftNode());continue;

---------------------------Clone group no  64 for hash 4baa9265e465e5238228ac92c6f2f92b--------------------



start     = false;startPart = false;break;

start     = false;startPart = false;break;

---------------------------Clone group no  65 for hash 349a87654f1f8cb8403c6633dbfce012--------------------



for (int i = 0; i < rangeVariables.length; i++) {
            Table    rangeTable = rangeVariables[i].rangeTable;
            HsqlName name       = rangeTable.getName();

            if (rangeTable.isDataReadOnly() || rangeTable.isTemp()) {
                continue;
            }

            if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) {
                continue;
            }

            set.add(name);
        }for (int i = 0; i < subqueries.length; i++) {
            if (subqueries[i].queryExpression != null) {
                subqueries[i].queryExpression.getBaseTableNames(set);
            }
        }for (int i = 0; i < routines.length; i++) {
            set.addAll(routines[i].getTableNamesForRead());
        }

for (int i = 0; i < rangeVariables.length; i++) {
            Table    rangeTable = rangeVariables[i].rangeTable;
            HsqlName name       = rangeTable.getName();

            if (rangeTable.isDataReadOnly() || rangeTable.isTemp()) {
                continue;
            }

            if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) {
                continue;
            }

            set.add(name);
        }for (int i = 0; i < subqueries.length; i++) {
            if (subqueries[i].queryExpression != null) {
                subqueries[i].queryExpression.getBaseTableNames(set);
            }
        }for (int i = 0; i < routines.length; i++) {
            set.addAll(routines[i].getTableNamesForRead());
        }

---------------------------Clone group no  66 for hash 57eccdd290229444a92040a087b04cbf--------------------



case FUNC_ISOLATION_LEVEL :case FUNC_SESSION_ISOLATION_LEVEL :case FUNC_DATABASE_ISOLATION_LEVEL :case FUNC_TRANSACTION_CONTROL :

case FUNC_ISOLATION_LEVEL :case FUNC_SESSION_ISOLATION_LEVEL :case FUNC_DATABASE_ISOLATION_LEVEL :case FUNC_TRANSACTION_CONTROL :

---------------------------Clone group no  67 for hash 7cfa2d2fd1251fe84fdbf3ba2eb4e0e6--------------------



byte[] array = (byte[]) data;while (--to >= from) {
                    array[to] = 0;
                }return;

byte[] array = (byte[]) data;while (--to >= from) {
                    array[to] = 0;
                }return;

---------------------------Clone group no  68 for hash 54cbb57754f18a6ca501a997e1e59d98--------------------



delay = this.readInteger();if (delay < 0) {
                        delay = 0;
                    }if (token.tokenType == Tokens.MILLIS) {
                        read();
                    } else {
                        delay *= 1000;
                    }

delay = this.readInteger();if (delay < 0) {
                        delay = 0;
                    }if (token.tokenType == Tokens.MILLIS) {
                        read();
                    } else {
                        delay *= 1000;
                    }

---------------------------Clone group no  69 for hash 6e7846507e68650f24cb0736d15d1ec8--------------------



sb.append('(');sb.append(scale);sb.append(')');

sb.append('(');sb.append(scale);sb.append(')');

---------------------------Clone group no  70 for hash 2040f91e40ba9569fb40f9c51ff81345--------------------



row[udt_catalog]   = database.getCatalogName().name;row[udt_schema]    = type.getSchemaName().name;row[udt_name]      = type.getName().name;

row[udt_catalog] = database.getCatalogName().name;row[udt_schema]  = type.getSchemaName().name;row[udt_name]    = type.getName().name;

row[udt_catalog] = database.getCatalogName().name;row[udt_schema]  = type.getSchemaName().name;row[udt_name]    = type.getName().name;

---------------------------Clone group no  71 for hash ed73e4c21a1989b86f5731db2bc2e486--------------------



row[specific_cat]     = database.getCatalogName().name;row[specific_schem]   = routine.getSchemaName().name;row[specific_name]    = routine.getSpecificName().name;

row[specific_cat]     = database.getCatalogName().name;row[specific_schem]   = routine.getSchemaName().name;row[specific_name]    = routine.getSpecificName().name;

---------------------------Clone group no  72 for hash d84972c30be7eb47ee000f71aa7c3254--------------------



break;case COMPRESSION_NONE :break;default :

break;case COMPRESSION_NONE :break;default :

---------------------------Clone group no  73 for hash c64b69e9b9615b716fc9120281fd782b--------------------



database.logger.logWarningEvent(JVM_ERROR, e);IOException io = new IOException(e.toString());try {
                io.initCause(e);
            } catch (Throwable e1) {}throw io;

database.logger.logWarningEvent(JVM_ERROR, e);IOException io = new IOException(e.toString());try {
                io.initCause(e);
            } catch (Throwable e1) {}throw io;

database.logger.logWarningEvent(JVM_ERROR, e);IOException io = new IOException(e.toString());try {
                io.initCause(e);
            } catch (Throwable e1) {}throw io;

---------------------------Clone group no  74 for hash 62ca731b4324470ec8a1a05a817bdc10--------------------



HsqlByteArrayOutputStream memStream =
                    new HsqlByteArrayOutputStream();DataOutputStream tempOutput = new DataOutputStream(memStream);resultOut.write(session, tempOutput, rowOut);

// TODO: when doing Keep-Alive connections, try to retain buffer
            HsqlByteArrayOutputStream memStream =
                new HsqlByteArrayOutputStream();DataOutputStream tempOutput = new DataOutputStream(memStream);resultOut.write(session, tempOutput, rowOut);

---------------------------Clone group no  75 for hash 1a495cfb955ffda6bffe41a4dcdbbb1d--------------------



preparedStatement.fetchResult();preparedStatement.clearParameters();rootWarning = preparedStatement.getWarnings();preparedStatement.clearWarnings();

preparedStatement.fetchResult();preparedStatement.clearParameters();rootWarning = preparedStatement.getWarnings();preparedStatement.clearWarnings();

preparedStatement.fetchResult();preparedStatement.clearParameters();rootWarning = preparedStatement.getWarnings();preparedStatement.clearWarnings();

---------------------------Clone group no  76 for hash 4f83a56bac08580888ac25f6a8df37c1--------------------



break;default :throw Error.runtimeError(ErrorCode.U_S0500, \"Result\");

break;//  case ResultConstants.SQL_ATTR_AUTO_IPD :
                    //      - always true
                    //  default: throw - case never happens
                    default :throw Error.runtimeError(ErrorCode.U_S0500, \"Result\");

break;default :throw Error.runtimeError(ErrorCode.U_S0500, \"Result\");

break;// case ResultConstants.SQL_ATTR_AUTO_IPD // always true
                    // default: // throw, but case never happens
                    default :throw Error.runtimeError(ErrorCode.U_S0500, \"Result\");

break;default :throw Error.runtimeError(ErrorCode.U_S0500, \"Result\");

---------------------------Clone group no  77 for hash a42c422bdc74a61db8ade76d98fa5163--------------------



setTimeInMillis(cal, t);resetToTime(cal);return getTimeInMillis(cal);

setTimeInMillis(cal, t);resetToTime(cal);return getTimeInMillis(cal);

---------------------------Clone group no  78 for hash 4a9f50c5c68c77bcf1c149b4cf72c056--------------------



//
//            Stmt.execute(\"SET WRITE_DELAY 1000 MILLIS;\");
//            Stmt.execute(\"SET DATABASE DEFAULT TABLE TYPE CACHED\");
//
            Query = \"SELECT count(*) \";Query += \"FROM   accounts\";ResultSet RS = Stmt.executeQuery(Query);Stmt.clearWarnings();while (RS.next()) {
                accountsnb = RS.getInt(1);
            }

//
            Query = \"SELECT count(*) \";Query += \"FROM   accounts\";ResultSet RS = Stmt.executeQuery(Query);Stmt.clearWarnings();while (RS.next()) {
                accountsnb = RS.getInt(1);
            }

---------------------------Clone group no  79 for hash 4cf77446cbf575d20d4d37f0a815c719--------------------



stdprintln(SqltoolRB.buffer_executing.getString(
                            buffer.reconstitute()));preempt = true;return;

stdprintln(SqltoolRB.buffer_executing.getString(
                        buffer.reconstitute()));preempt = true;return;

---------------------------Clone group no  80 for hash 8e0b6d587c16ac3369e9c333c04abadc--------------------



String     sql            = getLastPart();Object[]   args           = new Object[]{ type };HsqlName[] writeLockNames = database.schemaManager.catalogNameArray;

String     sql            = getLastPart();Object[]   args           = new Object[]{ type };HsqlName[] writeLockNames = database.schemaManager.catalogNameArray;

---------------------------Clone group no  81 for hash ebd740119af228f5cede73c3073bbb08--------------------



if (readIfThis(Tokens.COMMA)) {
                continue;
            }if (token.tokenType == Tokens.CLOSEBRACKET) {
                break;
            }throw unexpectedToken();

if (readIfThis(Tokens.COMMA)) {
                continue;
            }if (token.tokenType == Tokens.CLOSEBRACKET) {
                break;
            }throw unexpectedToken();

---------------------------Clone group no  82 for hash 9e9840b0f78973a2d16a264717350843--------------------



action = RowAction.addDeleteAction(session, table, row,
                                                       colMap);store.delete(session, row);row.rowAction = null;break;

action = RowAction.addDeleteAction(session, table, row,
                        colMap);store.delete(session, row);row.rowAction = null;break;

---------------------------Clone group no  83 for hash 5062ca1819ed84c71264bab5a104965b--------------------



checkClosed();if (!JDBCClobClient.isInLimits(data.length, index - 1, count)) {
            throw JDBCUtil.outOfRangeArgument();
        }Object[] slice = new Object[count];

checkClosed();if (!JDBCClobClient.isInLimits(data.length, index - 1, count)) {
            throw JDBCUtil.outOfRangeArgument();
        }Object[] slice = new Object[count];

---------------------------Clone group no  84 for hash 2b19058ca0cea8a17db20155bd918ddb--------------------



Object[] row      = t.getEmptyRowData();row[grantee]      = role.getName().getNameString();row[role_name]    = roleName;

Object[] row      = t.getEmptyRowData();row[grantee]      = role.getName().getNameString();row[role_name]    = roleName;

---------------------------Clone group no  85 for hash c6dde65e07128eb1848d428e9b74a222--------------------



if (refName.type != SchemaObject.TABLE
                        && refName.type != SchemaObject.VIEW) {
                    continue;
                }if (!session.getGrantee().isFullyAccessibleByRole(refName)) {
                    continue;
                }row                   = t.getEmptyRowData();

if (refName.type != SchemaObject.TABLE
                        && refName.type != SchemaObject.VIEW) {
                    continue;
                }if (!session.getGrantee().isFullyAccessibleByRole(refName)) {
                    continue;
                }row                = t.getEmptyRowData();

---------------------------Clone group no  86 for hash ab3230d57fedca6848040142f189a543--------------------



case Types.SQL_CLOB :a = a.toString();// fall through
            case Types.SQL_CHAR :case Types.SQL_VARCHAR :

case Types.SQL_CLOB :a = a.toString();//fall through
            case Types.SQL_CHAR :case Types.SQL_VARCHAR :

---------------------------Clone group no  87 for hash bc2d4f02599d4af406521c84b5015a99--------------------



b.append(NL);for (int i = 0; i < width; i++) {
            for (int l = 0; l < size[i]; l++) {
                b.append('-');
            }

            b.append(' ');
        }b.append(NL);

b.append(NL);for (int i = 0; i < width; i++) {
            for (int l = 0; l < size[i]; l++) {
                b.append('-');
            }

            b.append(' ');
        }b.append(NL);

---------------------------Clone group no  88 for hash ba2cb0644781f862b4d247bbf24b89ec--------------------



super(session);this.session       = session;maxMemoryRowCount  = session.getResultMemoryRowCount();

super(session);this.session       = session;maxMemoryRowCount  = session.getResultMemoryRowCount();

---------------------------Clone group no  89 for hash 6e106cf4fd0e9d446c24399e9098d70a--------------------



String s = dis.readUTF();//String s = DataInputStream.readUTF(dis);
        // TODO:  Test the previous two to see if one works better for
        // high-order characters.
        dis.close();return s;

String s = dis.readUTF();//String s = DataInputStream.readUTF(dis);
        // TODO:  Test the previous two to see if one works better for
        // high-order characters.
        dis.close();return s;

String s = dis.readUTF();//String s = java.io.DataInputStream.readUTF(dis);
        // TODO:  Test the previous two to see if one works better for
        // high-order characters.
        dis.close();return s;

---------------------------Clone group no  90 for hash c6f8178cd49fbfc53860a5723b2eb7c7--------------------



// Reduce the operator and right operand Atoms
            remaining -= 2;atoms.remove(i + 1);atoms.remove(i + 1);

// Reduce the operator and right operand Atoms
            remaining -= 2;atoms.remove(i + 1);atoms.remove(i + 1);

---------------------------Clone group no  91 for hash 21f8749693c90e1a129ee4b3b43bc007--------------------



case Types.SQL_BINARY :case Types.SQL_VARBINARY :case Types.OTHER :throw JDBCUtil.sqlException(Error.error(ErrorCode.X_42563));default :

case Types.SQL_BINARY :case Types.SQL_VARBINARY :case Types.OTHER :throw JDBCUtil.sqlException(Error.error(ErrorCode.X_42563));default :

---------------------------Clone group no  92 for hash b9ad521396950a7b95026cbbff4a4cc0--------------------



long min;long max;switch (dataType.typeCode) {

            case Types.TINYINT :
                max = Byte.MAX_VALUE;
                min = Byte.MIN_VALUE;
                break;

            case Types.SQL_SMALLINT :
                max = Short.MAX_VALUE;
                min = Short.MIN_VALUE;
                break;

            case Types.SQL_INTEGER :
                max = Integer.MAX_VALUE;
                min = Integer.MIN_VALUE;
                break;

            case Types.SQL_BIGINT :
                max = Long.MAX_VALUE;
                min = Long.MIN_VALUE;
                break;

            case Types.SQL_NUMERIC :
            case Types.SQL_DECIMAL :
                max = Long.MAX_VALUE;
                min = Long.MIN_VALUE;
                break;

            default :
                throw Error.runtimeError(ErrorCode.U_S0500, \"NumberSequence\");
        }

long min;long max;switch (dataType.typeCode) {

            case Types.TINYINT :
                max = Byte.MAX_VALUE;
                min = Byte.MIN_VALUE;
                break;

            case Types.SQL_SMALLINT :
                max = Short.MAX_VALUE;
                min = Short.MIN_VALUE;
                break;

            case Types.SQL_INTEGER :
                max = Integer.MAX_VALUE;
                min = Integer.MIN_VALUE;
                break;

            case Types.SQL_BIGINT :
                max = Long.MAX_VALUE;
                min = Long.MIN_VALUE;
                break;

            case Types.SQL_NUMERIC :
            case Types.SQL_DECIMAL :
                max = Long.MAX_VALUE;
                min = Long.MIN_VALUE;
                break;

            default :
                throw Error.runtimeError(ErrorCode.U_S0500, \"NumberSequence\");
        }

long min;long max;switch (dataType.typeCode) {

            case Types.TINYINT :
                max = Byte.MAX_VALUE;
                min = Byte.MIN_VALUE;
                break;

            case Types.SQL_SMALLINT :
                max = Short.MAX_VALUE;
                min = Short.MIN_VALUE;
                break;

            case Types.SQL_INTEGER :
                max = Integer.MAX_VALUE;
                min = Integer.MIN_VALUE;
                break;

            case Types.SQL_BIGINT :
                max = Long.MAX_VALUE;
                min = Long.MIN_VALUE;
                break;

            case Types.SQL_NUMERIC :
            case Types.SQL_DECIMAL :
                max = Long.MAX_VALUE;
                min = Long.MIN_VALUE;
                break;

            default :
                throw Error.runtimeError(ErrorCode.U_S0500, \"NumberSequence\");
        }

---------------------------Clone group no  93 for hash 598a7614407170068de29c16bbdc7130--------------------



canCascade    = true;useIfExists   = true;break;

canCascade    = true;useIfExists   = true;break;

canCascade    = true;useIfExists   = true;break;

canCascade    = true;useIfExists   = true;break;

canCascade    = true;useIfExists   = true;break;

canCascade    = true;useIfExists   = true;break;

canCascade    = true;useIfExists   = true;break;

canCascade    = true;useIfExists   = true;break;

canCascade    = true;useIfExists   = true;break;

---------------------------Clone group no  94 for hash 24de5b67c239cc42a102d662546adef9--------------------



Object[] data = getLobHeader(lobID);if (data == null) {
                throw Error.error(ErrorCode.X_0F502);
            }long length = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();int  type   = ((Integer) data[LOB_IDS.LOB_TYPE]).intValue();return ResultLob.newLobSetResponse(lobID, length);

Object[] data = getLobHeader(lobID);if (data == null) {
                throw Error.error(ErrorCode.X_0F502);
            }long length = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();int  type   = ((Integer) data[LOB_IDS.LOB_TYPE]).intValue();return ResultLob.newLobSetResponse(lobID, length);

---------------------------Clone group no  95 for hash 3e8a0cecd74f1855aee2a7b3c8234a3b--------------------



ps.executeUpdate();ps.close();ps = connection.prepareStatement(dql0);ResultSet rs = ps.executeQuery();rs.next();

ps.executeUpdate();ps.close();ps = connection.prepareStatement(dql0);ResultSet rs = ps.executeQuery();rs.next();

ps.executeUpdate();ps.close();ps = connection.prepareStatement(dql0);ResultSet rs = ps.executeQuery();rs.next();

---------------------------Clone group no  96 for hash 531d5af3689d75841ee65325203671c3--------------------



// Intermediate holders
        Iterator     tables;Table        table;Constraint[] constraints;int          constraintCount;Constraint   constraint;

// Intermediate holders
        Iterator     tables;Table        table;Constraint[] constraints;int          constraintCount;Constraint   constraint;

---------------------------Clone group no  97 for hash 723580314ab5459acc31a52d5e819552--------------------



//
        final int sequence_catalog           = 0;final int sequence_schema            = 1;final int sequence_name              = 2;final int data_type                  = 3;final int numeric_precision          = 4;final int numeric_precision_radix    = 5;final int numeric_scale              = 6;final int maximum_value              = 7;final int minimum_value              = 8;final int increment                  = 9;final int cycle_option               = 10;final int declared_data_type         = 11;final int declared_numeric_precision = 12;final int declared_numeric_scale     = 13;final int start_with                 = 14;final int next_value                 = 15;//
        Iterator       it;Object[]       row;NumberSequence sequence;it = database.schemaManager.databaseObjectIterator(
            SchemaObject.SEQUENCE);while (it.hasNext()) {
            sequence = (NumberSequence) it.next();

            if (!session.getGrantee().isAccessible(sequence)) {
                continue;
            }

            row = t.getEmptyRowData();

            NumberType type = (NumberType) sequence.getDataType();
            int radix =
                (type.typeCode == Types.SQL_NUMERIC || type.typeCode == Types
                    .SQL_DECIMAL) ? 10
                                  : 2;

            row[sequence_catalog] = database.getCatalogName().name;
            row[sequence_schema]  = sequence.getSchemaName().name;
            row[sequence_name]    = sequence.getName().name;
            row[data_type]        = sequence.getDataType().getFullNameString();
            row[numeric_precision] =
                ValuePool.getInt((int) type.getPrecision());
            row[numeric_precision_radix]    = ValuePool.getInt(radix);
            row[numeric_scale]              = ValuePool.INTEGER_0;
            row[maximum_value] = String.valueOf(sequence.getMaxValue());
            row[minimum_value] = String.valueOf(sequence.getMinValue());
            row[increment] = String.valueOf(sequence.getIncrement());
            row[cycle_option]               = sequence.isCycle() ? \"YES\"
                                                                 : \"NO\";
            row[declared_data_type]         = row[data_type];
            row[declared_numeric_precision] = row[numeric_precision];
            row[declared_numeric_scale]     = row[declared_numeric_scale];
            row[start_with] = String.valueOf(sequence.getStartValue());
            row[next_value]                 = String.valueOf(sequence.peek());

            t.insertSys(session, store, row);
        }return t;

//
        final int sequence_catalog           = 0;final int sequence_schema            = 1;final int sequence_name              = 2;final int data_type                  = 3;final int numeric_precision          = 4;final int numeric_precision_radix    = 5;final int numeric_scale              = 6;final int maximum_value              = 7;final int minimum_value              = 8;final int increment                  = 9;final int cycle_option               = 10;final int declared_data_type         = 11;final int declared_numeric_precision = 12;final int declared_numeric_scale     = 13;final int start_with                 = 14;final int next_value                 = 15;//
        Iterator       it;Object[]       row;NumberSequence sequence;it = database.schemaManager.databaseObjectIterator(
            SchemaObject.SEQUENCE);while (it.hasNext()) {
            sequence = (NumberSequence) it.next();

            if (!session.getGrantee().isAccessible(sequence)) {
                continue;
            }

            row = t.getEmptyRowData();

            NumberType type = (NumberType) sequence.getDataType();
            int radix =
                (type.typeCode == Types.SQL_NUMERIC || type.typeCode == Types
                    .SQL_DECIMAL) ? 10
                                  : 2;

            row[sequence_catalog] = database.getCatalogName().name;
            row[sequence_schema]  = sequence.getSchemaName().name;
            row[sequence_name]    = sequence.getName().name;
            row[data_type]        = sequence.getDataType().getFullNameString();
            row[numeric_precision] =
                ValuePool.getInt((int) type.getPrecision());
            row[numeric_precision_radix]    = ValuePool.getInt(radix);
            row[numeric_scale]              = ValuePool.INTEGER_0;
            row[maximum_value] = String.valueOf(sequence.getMaxValue());
            row[minimum_value] = String.valueOf(sequence.getMinValue());
            row[increment] = String.valueOf(sequence.getIncrement());
            row[cycle_option]               = sequence.isCycle() ? \"YES\"
                                                                 : \"NO\";
            row[declared_data_type]         = row[data_type];
            row[declared_numeric_precision] = row[numeric_precision];
            row[declared_numeric_scale]     = row[declared_numeric_scale];
            row[start_with] = String.valueOf(sequence.getStartValue());
            row[next_value]                 = String.valueOf(sequence.peek());

            t.insertSys(session, store, row);
        }return t;

---------------------------Clone group no  98 for hash c164731fc485f8a4788b90aadd369f66--------------------



byte[] ba = null;int bytesread = 0;int retval;

byte[] ba = null;int bytesread = 0;int retval;

---------------------------Clone group no  99 for hash 9fa0897d7f58fd30dab1c8a74f206913--------------------



if (otherType == null) {
            return true;
        }if (!otherType.isRowType()) {
            return false;
        }Type[] otherTypes = ((RowType) otherType).getTypesArray();if (dataTypes.length != otherTypes.length) {
            return false;
        }

if (otherType == null) {
            return true;
        }if (!otherType.isRowType()) {
            return false;
        }Type[] otherTypes = ((RowType) otherType).getTypesArray();if (dataTypes.length != otherTypes.length) {
            return false;
        }

---------------------------Clone group no  100 for hash cff04fcabb52b2befb29e4102c07843d--------------------



Error.printSystemOut(\"[\" + this + \"]: createServerSocket()\");Error.printSystemOut(\"capabilities for \" + ss + \":\");Error.printSystemOut(\"----------------------------\");dump(\"supported cipher suites\", ss.getSupportedCipherSuites());dump(\"enabled cipher suites\", ss.getEnabledCipherSuites());

Error.printSystemOut(\"[\" + this + \"]: createServerSocket()\");Error.printSystemOut(\"capabilities for \" + ss + \":\");Error.printSystemOut(\"----------------------------\");dump(\"supported cipher suites\", ss.getSupportedCipherSuites());dump(\"enabled cipher suites\", ss.getEnabledCipherSuites());

---------------------------Clone group no  101 for hash 4a35f628e6c9b0abfc7a2544e223f831--------------------



Object[] rowData = getCurrent();Type     sourceType;Object   value;checkColumn(columnIndex);sourceType = resultMetaData.columnTypes[--columnIndex];value      = rowData[columnIndex];if (trackNull(value)) {
            return null;
        }

Object[] rowData = getCurrent();Type     sourceType;Object   value;checkColumn(columnIndex);sourceType = resultMetaData.columnTypes[--columnIndex];value      = rowData[columnIndex];if (trackNull(value)) {
                return null;
            }

---------------------------Clone group no  102 for hash a3d002d0de231e2d601e9087a36b1bfb--------------------



TestResult            result;TestCase              test;java.util.Enumeration exceptions;java.util.Enumeration failures;int                   count;result = new TestResult();

TestResult            result;TestCase              test;java.util.Enumeration exceptions;java.util.Enumeration failures;int                   count;result = new TestResult();

---------------------------Clone group no  103 for hash 996fe578e58420989bdcb980cfea9837--------------------



if (isTwoObjectValue) {
                objectKeyTable[lookup] = objectValueTwo;
            }if (accessTable != null) {
                accessTable[lookup] = ++accessCount;
            }return returnValue;

if (isTwoObjectValue) {
            objectKeyTable[lookup] = objectValueTwo;
        }if (accessTable != null) {
            accessTable[lookup] = ++accessCount;
        }return returnValue;

---------------------------Clone group no  104 for hash a00e03ae539591df80f504a2241a07c2--------------------



rangeVariables[0].addJoinCondition(condition);RangeVariableResolver resolver =
                new RangeVariableResolver(rangeVariables, null,
                                          compileContext, false);resolver.processConditions(session);rangeVariables = resolver.rangeVariables;

rangeVariables[0].addJoinCondition(condition);RangeVariableResolver resolver =
                new RangeVariableResolver(rangeVariables, null,
                                          compileContext, false);resolver.processConditions(session);rangeVariables = resolver.rangeVariables;

---------------------------Clone group no  105 for hash 93053c49c517250da3338709be88a67e--------------------



rowOut.write(BYTES_LINE_SEP);writeRowOutToFile();needsSync = true;

rowOut.write(BYTES_LINE_SEP);writeRowOutToFile();needsSync = true;

rowOut.write(BYTES_LINE_SEP);writeRowOutToFile();needsSync = true;

---------------------------Clone group no  106 for hash 223d7713edfa132c7da5f3e5a162c09e--------------------



TestResult            result;TestCase              test;java.util.Enumeration failures;int                   count;result = new TestResult();

TestResult            result;TestCase              test;java.util.Enumeration failures;int                   count;result = new TestResult();

TestResult            result;TestCase              test;java.util.Enumeration failures;int                   count;result = new TestResult();

TestResult            result;TestCase              test;java.util.Enumeration failures;int                   count;result = new TestResult();

TestResult            result;TestCase              test;java.util.Enumeration failures;int                   count;result = new TestResult();

TestResult            result;TestCase              test;java.util.Enumeration failures;int                   count;result = new TestResult();

TestResult            result;TestCase              test;java.util.Enumeration failures;int                   count;result = new TestResult();

---------------------------Clone group no  107 for hash 352b074924e1c607c531f124f35d2941--------------------



// -------------------------------------------------------------
            // JDBC 3.0
            // -------------------------------------------------------------
            addColumn(t, \"TYPE_CAT\", SQL_IDENTIFIER);addColumn(t, \"TYPE_SCHEM\", SQL_IDENTIFIER);addColumn(t, \"TYPE_NAME\", SQL_IDENTIFIER);

addColumn(t, \"TYPE_CAT\", SQL_IDENTIFIER);addColumn(t, \"TYPE_SCHEM\", SQL_IDENTIFIER);addColumn(t, \"TYPE_NAME\", SQL_IDENTIFIER);

---------------------------Clone group no  108 for hash 54afe79e13c96bbc67f76a5b3e522b1d--------------------



row[collation_catalog] = database.getCatalogName().name;row[collation_schema]  = collationSchema;row[collation_name]    = collationName;

row[collation_catalog] = database.getCatalogName().name;row[collation_schema]  = collationSchema;row[collation_name]    = collationName;

---------------------------Clone group no  109 for hash 75dd66e51a897eb8ccfd40f07b0f5198--------------------



int index = pos / 8;if (index >= map.length) {
            return;
        }byte b = map[index];

int index = pos / 8;if (index >= map.length) {
            return;
        }byte b = map[index];

---------------------------Clone group no  110 for hash fdc5fdfaee589c6caec410f3207477ae--------------------



if (oldsize < newsize) {
            newsize = oldsize;
        }System.arraycopy(source, 0, newarray, 0, newsize);return newarray;

if (oldsize < newsize) {
            newsize = oldsize;
        }System.arraycopy(source, 0, newarray, 0, newsize);return newarray;

---------------------------Clone group no  111 for hash 33aeb32a8a86fd4da1206868edfd2a5a--------------------



row[character_maximum_length] =
                        ValuePool.getLong(type.precision);row[character_octet_length] =
                        ValuePool.getLong(type.precision * 2);row[character_set_catalog] =
                        database.getCatalogName().name;row[character_set_schema] =
                        ((CharacterType) type).getCharacterSet()
                            .getSchemaName().name;row[character_set_name] =
                        ((CharacterType) type).getCharacterSet().getName()
                            .name;row[collation_catalog] = database.getCatalogName().name;row[collation_schema] =
                        ((CharacterType) type).getCollation().getSchemaName()
                            .name;row[collation_name] =
                        ((CharacterType) type).getCollation().getName().name;

row[character_maximum_length] =
                    ValuePool.getLong(type.precision);row[character_octet_length] = ValuePool.getLong(type.precision
                        * 2);row[character_set_catalog] = database.getCatalogName().name;row[character_set_schema] =
                    ((CharacterType) type).getCharacterSet().getSchemaName()
                        .name;row[character_set_name] =
                    ((CharacterType) type).getCharacterSet().getName().name;row[collation_catalog] = database.getCatalogName().name;row[collation_schema] =
                    ((CharacterType) type).getCollation().getSchemaName().name;row[collation_name] =
                    ((CharacterType) type).getCollation().getName().name;

row[character_maximum_length] = ValuePool.getLong(type.precision);row[character_octet_length] = ValuePool.getLong(type.precision
                    * 2);row[character_set_catalog] = database.getCatalogName().name;row[character_set_schema] =
                ((CharacterType) type).getCharacterSet().getSchemaName().name;row[character_set_name] =
                ((CharacterType) type).getCharacterSet().getName().name;row[collation_catalog] = database.getCatalogName().name;row[collation_schema] =
                ((CharacterType) type).getCollation().getSchemaName().name;row[collation_name] =
                ((CharacterType) type).getCollation().getName().name;

row[character_maximum_length] =
                            ValuePool.getLong(type.precision);row[character_octet_length] =
                            ValuePool.getLong(type.precision * 2);row[character_set_catalog] =
                            database.getCatalogName().name;row[character_set_schema] =
                            ((CharacterType) type).getCharacterSet()
                                .getSchemaName().name;row[character_set_name] =
                            ((CharacterType) type).getCharacterSet().getName()
                                .name;row[collation_catalog] =
                            database.getCatalogName().name;row[collation_schema] =
                            ((CharacterType) type).getCollation()
                                .getSchemaName().name;row[collation_name] =
                            ((CharacterType) type).getCollation().getName()
                                .name;

row[character_maximum_length] =
                        ValuePool.getLong(type.precision);row[character_octet_length] =
                        ValuePool.getLong(type.precision * 2);row[character_set_catalog] =
                        database.getCatalogName().name;row[character_set_schema] =
                        ((CharacterType) type).getCharacterSet()
                            .getSchemaName().name;row[character_set_name] =
                        ((CharacterType) type).getCharacterSet().getName()
                            .name;row[collation_catalog] = database.getCatalogName().name;row[collation_schema] =
                        ((CharacterType) type).getCollation().getSchemaName()
                            .name;row[collation_name] =
                        ((CharacterType) type).getCollation().getName().name;

row[character_maximum_length] =
                    ValuePool.getLong(type.precision);row[character_octet_length] = ValuePool.getLong(type.precision
                        * 2);row[character_set_catalog] = database.getCatalogName().name;row[character_set_schema] =
                    ((CharacterType) type).getCharacterSet().getSchemaName()
                        .name;row[character_set_name] =
                    ((CharacterType) type).getCharacterSet().getName().name;row[collation_catalog] = database.getCatalogName().name;row[collation_schema] =
                    ((CharacterType) type).getCollation().getSchemaName().name;row[collation_name] =
                    ((CharacterType) type).getCollation().getName().name;

---------------------------Clone group no  112 for hash 04c8a99730c394cb922295b23538af40--------------------



rs = st.executeQuery(\"SELECT b FROM blo WHERE id = 2\");if (!rs.next()) {
                assertTrue(\"No row with id 2\", false);
            }//            ba = rs.getBytes(\"b\"); doesn't convert but throws ClassCast
            blob1 = rs.getBlob(\"b\");

rs = st.executeQuery(\"SELECT b FROM blo WHERE id = 2\");if (!rs.next()) {
                assertTrue(\"No row with id 2\", false);
            }blob1 = rs.getBlob(\"b\");

---------------------------Clone group no  113 for hash 8dc67d2c69fd2d8a2d3e84a433bed6ce--------------------



connection            = c;connectionIncarnation = connection.incarnation;session               = c.sessionProxy;

connection            = c;connectionIncarnation = connection.incarnation;session               = c.sessionProxy;

---------------------------Clone group no  114 for hash ee883e7508dfcd0949f6e14226d6c9e9--------------------



StringBuffer sb = new StringBuffer(64);sb.append(Tokens.T_ALTER).append(' ');sb.append(Tokens.T_USER).append(' ');

StringBuffer sb = new StringBuffer(64);sb.append(Tokens.T_ALTER).append(' ');sb.append(Tokens.T_USER).append(' ');

---------------------------Clone group no  115 for hash dad9011efc690c4181f0056907985be3--------------------



ResultLob result = new ResultLob();result.subType     = LobResultTypes.REQUEST_GET_BYTE_PATTERN_POSITION;result.lobID       = id;result.blockOffset = offset;

ResultLob result = new ResultLob();result.subType     = LobResultTypes.REQUEST_GET_BYTE_PATTERN_POSITION;result.lobID       = id;result.blockOffset = offset;

---------------------------Clone group no  116 for hash aee4e64ea6608556ac3e3c877d4c0fd0--------------------



group = StatementTypes.X_SQL_SESSION;break;default :

group = StatementTypes.X_SQL_SESSION;break;default :

---------------------------Clone group no  117 for hash 57e81bd3f932d9139bcde675f1366510--------------------



if (!other.isDateTimeType()) {
            throw Error.error(ErrorCode.X_42562);
        }DateTimeType otherType = (DateTimeType) other;// DATE with TIME caught here
        if (otherType.startIntervalType > endIntervalType
                || startIntervalType > otherType.endIntervalType) {
            throw Error.error(ErrorCode.X_42562);
        }int     newType = typeCode;int     scale   = this.scale > otherType.scale ? this.scale
                                                       : otherType.scale;boolean zone    = withTimeZone || otherType.withTimeZone;int startType = otherType.startIntervalType > startIntervalType
                        ? startIntervalType
                        : otherType.startIntervalType;if (startType == Types.SQL_INTERVAL_HOUR) {
            newType = zone ? Types.SQL_TIME_WITH_TIME_ZONE
                           : Types.SQL_TIME;
        } else {
            newType = zone ? Types.SQL_TIMESTAMP_WITH_TIME_ZONE
                           : Types.SQL_TIMESTAMP;
        }return getDateTimeType(newType, scale);

if (!other.isDateTimeType()) {
                    throw Error.error(ErrorCode.X_42562);
                }DateTimeType otherType = (DateTimeType) other;// DATE with TIME caught here
                if (otherType.startIntervalType > endIntervalType
                        || startIntervalType > otherType.endIntervalType) {
                    throw Error.error(ErrorCode.X_42562);
                }int     newType = typeCode;int     scale   = this.scale > otherType.scale ? this.scale
                                                               : otherType
                                                                   .scale;boolean zone    = withTimeZone || otherType.withTimeZone;int startType = otherType.startIntervalType
                                > startIntervalType ? startIntervalType
                                                    : otherType
                                                        .startIntervalType;if (startType == Types.SQL_INTERVAL_HOUR) {
                    newType = zone ? Types.SQL_TIME_WITH_TIME_ZONE
                                   : Types.SQL_TIME;
                } else {
                    newType = zone ? Types.SQL_TIMESTAMP_WITH_TIME_ZONE
                                   : Types.SQL_TIMESTAMP;
                }return getDateTimeType(newType, scale);

---------------------------Clone group no  118 for hash df76a4414ba1d28544e538ccbab400ad--------------------



HsqlName refName = (HsqlName) set.get(i);if (refName.type != SchemaObject.SPECIFIC_ROUTINE) {
                    continue;
                }if (!session.getGrantee().isFullyAccessibleByRole(refName)) {
                    continue;
                }row                   = t.getEmptyRowData();

HsqlName refName = (HsqlName) set.get(i);if (refName.type != SchemaObject.SPECIFIC_ROUTINE) {
                    continue;
                }if (!session.getGrantee().isFullyAccessibleByRole(refName)) {
                    continue;
                }row                   = t.getEmptyRowData();

---------------------------Clone group no  119 for hash 0f8a57941b50c9e2eaebd0cc00782d55--------------------



break;case OpTypes.SUBTRACT :default :// all derivatives of equality ops or comparison ops
                return getAggregateType(other);

break;case OpTypes.SUBTRACT :default :return getAggregateType(other);

---------------------------Clone group no  120 for hash 6d2545fd1d24949c0dad568a2d602905--------------------



break;default :break;

break;default :break;

break;default :break;

---------------------------Clone group no  121 for hash bbbda4c5bfb98e21eb73c6c5f8a24f79--------------------



Query += \"filler      CHAR(84))\";    /* pad to 100 bytes */if (createExtension.length() > 0) {
                Query += createExtension;
            }Stmt.execute(Query);Stmt.clearWarnings();

Query += \"filler      CHAR(84))\";    /* pad to 100 bytes */if (createExtension.length() > 0) {
                Query += createExtension;
            }Stmt.execute(Query);Stmt.clearWarnings();

---------------------------Clone group no  122 for hash ff28320b4e2b3d99188d3ba63df6e65f--------------------



sb.append(trn);sb.append(' ');sb.append(getWhenSpec(typ));sb.append(' ');sb.append(getOperationSpec(typ));sb.append(\" ON \");sb.append(tab);sb.append(' ');sb.append(getForEachSpec(typ));

sb.append(trn);sb.append(' ');sb.append(getWhenSpec(typ));sb.append(' ');sb.append(getOperationSpec(typ));sb.append(\" ON \");sb.append(tab);sb.append(' ');sb.append(getForEachSpec(typ));

---------------------------Clone group no  123 for hash 878eed3d5631f6c2cc582a1b28a005f2--------------------



break;default :throw Error.runtimeError(ErrorCode.U_S0500, \"View\");

break;default :throw Error.runtimeError(ErrorCode.U_S0500, \"View\");

break;default :throw Error.runtimeError(ErrorCode.U_S0500, \"View\");

---------------------------Clone group no  124 for hash d87d4d47fc4abf4c5fdc05750b41a177--------------------



RowAction action = row.rowAction;if (action == null) {
/*
            System.out.println(\"null insert action \" + session + \" \"
                               + session.actionTimestamp);
*/
            throw Error.runtimeError(ErrorCode.GENERAL_ERROR,
                                     \"null insert action \");
        }store.indexRow(session, row);session.rowActionList.add(action);

RowAction action = row.rowAction;if (action == null) {
/*
            System.out.println(\"null insert action \" + session + \" \"
                               + session.actionTimestamp);
*/
            throw Error.runtimeError(ErrorCode.GENERAL_ERROR,
                                     \"null insert action \");
        }store.indexRow(session, row);session.rowActionList.add(action);

---------------------------Clone group no  125 for hash b8ab449b2e2b901147073827ee7fd6b6--------------------



lookup                 = hashIndex.linkNode(index, lastLookup);objectKeyTable[lookup] = testValue;if (accessCount > ACCESS_MAX) {
            resetAccessCount();
        }accessTable[lookup] = accessCount++;return testValue;

lookup                 = hashIndex.linkNode(index, lastLookup);objectKeyTable[lookup] = testValue;if (accessCount > ACCESS_MAX) {
            resetAccessCount();
        }accessTable[lookup] = accessCount++;return testValue;

---------------------------Clone group no  126 for hash ad792abe21c79511e945f56ef2fd3f6c--------------------



transactionCount--;liveTransactionTimestamps.remove(index);mergeExpiredTransactions(session);

transactionCount--;liveTransactionTimestamps.remove(index);mergeExpiredTransactions(session);

---------------------------Clone group no  127 for hash 17847d8e1bf5115dfcef21051d6eae1a--------------------



result.blockOffset = dataInput.readLong();result.blockLength = dataInput.readLong();break;

result.blockOffset = dataInput.readLong();result.blockLength = dataInput.readLong();break;

---------------------------Clone group no  128 for hash 31b5cef8ac57d26bb719125470a75fbe--------------------



updateConstraints(tn, emptySet);database.schemaManager.recompileDependentObjects(table);table = tn;

updateConstraints(tn, emptySet);database.schemaManager.recompileDependentObjects(table);table = tn;

---------------------------Clone group no  129 for hash 3be8165a03e0d3e5e71f90747808f30b--------------------



super(StatementTypes.INSERT, StatementTypes.X_SQL_DATA_CHANGE,
              session.getCurrentSchemaHsqlName());this.targetTable = targetTable;this.baseTable   = targetTable.isTriggerInsertable() ? targetTable
                                                             : targetTable
                                                             .getBaseTable();this.insertColumnMap    = columnMap;this.insertCheckColumns = checkColumns;

super(StatementTypes.INSERT, StatementTypes.X_SQL_DATA_CHANGE,
              session.getCurrentSchemaHsqlName());this.targetTable = targetTable;this.baseTable   = targetTable.isTriggerInsertable() ? targetTable
                                                             : targetTable
                                                             .getBaseTable();this.insertColumnMap    = columnMap;this.insertCheckColumns = checkColumns;

---------------------------Clone group no  130 for hash e0d54f43d46d524cafad2d7587e42fd6--------------------



group    = StatementTypes.X_HSQLDB_DATABASE_OPERATION;isLogged = false;break;

group    = StatementTypes.X_HSQLDB_DATABASE_OPERATION;isLogged = false;break;

group    = StatementTypes.X_HSQLDB_DATABASE_OPERATION;isLogged = false;break;

---------------------------Clone group no  131 for hash b604c36d3e28ffdb9d9c0c1346457cec--------------------



InputStreamReader reader = null;try {
            reader = new InputStreamReader(fis, \"ISO-8859-1\");
        } catch (Exception e) {}LineNumberReader lineReader = new LineNumberReader(reader);

InputStreamReader reader = null;try {
                reader = new InputStreamReader(fis, \"ISO-8859-1\");
            } catch (Exception e) {}LineNumberReader lineReader = new LineNumberReader(reader);

---------------------------Clone group no  132 for hash 45ea068d6f5ae8a4f026e5d4395839a6--------------------



if (pstmt1 != null) {
                    pstmt1.close();
                }if (pstmt2 != null) {
                    pstmt2.close();
                }if (pstmt3 != null) {
                    pstmt3.close();
                }if (pstmt4 != null) {
                    pstmt4.close();
                }if (pstmt5 != null) {
                    pstmt5.close();
                }

if (pstmt1 != null) {
                        pstmt1.close();
                    }if (pstmt2 != null) {
                        pstmt2.close();
                    }if (pstmt3 != null) {
                        pstmt3.close();
                    }if (pstmt4 != null) {
                        pstmt4.close();
                    }if (pstmt5 != null) {
                        pstmt5.close();
                    }

---------------------------Clone group no  133 for hash 538d66bb1bd1e6ed68c544cea8c6008c--------------------



case Types.SQL_TIMESTAMP :case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :break;default :

case Types.SQL_TIMESTAMP :case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :break;default :

---------------------------Clone group no  134 for hash f4fda0f0e2d204b9c448a20941854af8--------------------



setNewTableInSchema(tn);setNewTablesInSchema(tableSet);updateConstraints(tn, emptySet);updateConstraints(tableSet, constraintNameSet);database.schemaManager.recompileDependentObjects(tableSet);database.schemaManager.recompileDependentObjects(tn);

setNewTableInSchema(tn);setNewTablesInSchema(tableSet);updateConstraints(tn, emptySet);updateConstraints(tableSet, constraintNameSet);database.schemaManager.recompileDependentObjects(tableSet);database.schemaManager.recompileDependentObjects(tn);

---------------------------Clone group no  135 for hash 316502cde627fc6d6b6676ab5833430d--------------------



ResultLob resultOut = ResultLob.newLobGetTruncateLength(id);Result    resultIn  = session.execute(resultOut);if (resultIn.isError()) {
            throw resultIn.getException();
        }return ((ResultLob) resultIn).getBlockLength();

ResultLob resultOut = ResultLob.newLobGetTruncateLength(id);Result    resultIn  = session.execute(resultOut);if (resultIn.isError()) {
            throw resultIn.getException();
        }return ((ResultLob) resultIn).getBlockLength();

---------------------------Clone group no  136 for hash 80d8b572b0c28b820555b6481a459971--------------------



case Types.SQL_DATE :case Types.SQL_TIME :case Types.SQL_TIME_WITH_TIME_ZONE :case Types.SQL_TIMESTAMP :case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :

case Types.SQL_DATE :case Types.SQL_TIME :case Types.SQL_TIME_WITH_TIME_ZONE :case Types.SQL_TIMESTAMP :case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :

---------------------------Clone group no  137 for hash b7dac250a7b27f2754e43c304ebd4102--------------------



addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);

addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);

---------------------------Clone group no  138 for hash f2f031ada9b3fcedc071e2cd253d7d0a--------------------



row[privilege_type] = Tokens.T_USAGE;row[is_grantable] =
                        right.getGrantee() == object.getOwner()
                        || grantableRight.isFull() ? Tokens.T_YES
                                                   : Tokens.T_NO;;try {
                        t.insertSys(session, store, row);
                    } catch (HsqlException e) {}

row[privilege_type] = Tokens.T_USAGE;row[is_grantable] =
                        right.getGrantee() == object.getOwner()
                        || grantableRight.isFull() ? Tokens.T_YES
                                                   : Tokens.T_NO;;try {
                        t.insertSys(session, store, row);
                    } catch (HsqlException e) {}

---------------------------Clone group no  139 for hash ac0e79665a5b4fca673313f3e6722139--------------------



if (!session.getGrantee().isFullyAccessibleByRole(refName)) {
                    continue;
                }row = t.getEmptyRowData();//
                row[specific_catalog] = database.getCatalogName().name;row[specific_schema]  = routine.getSchemaName().name;row[specific_name]    = routine.getSpecificName().name;row[routine_catalog]  = database.getCatalogName().name;row[routine_schema]   = routine.getSchemaName().name;row[routine_name]     = routine.getName().name;row[table_catalog]    = database.getCatalogName().name;

if (!session.getGrantee().isFullyAccessibleByRole(refName)) {
                    continue;
                }row                   = t.getEmptyRowData();row[specific_catalog] = database.getCatalogName().name;row[specific_schema]  = routine.getSchemaName().name;row[specific_name]    = routine.getSpecificName().name;row[routine_catalog]  = database.getCatalogName().name;row[routine_schema]   = routine.getSchemaName().name;row[routine_name]     = routine.getName().name;row[table_catalog]    = database.getCatalogName().name;

---------------------------Clone group no  140 for hash d830bb8709efc9757f240a178fa3316f--------------------



case FUNC_POSITION_CHAR :case FUNC_EXTRACT :case FUNC_TRIM_CHAR :case FUNC_OVERLAY_CHAR :

case FUNC_POSITION_CHAR :case FUNC_EXTRACT :case FUNC_TRIM_CHAR :case FUNC_OVERLAY_CHAR :

---------------------------Clone group no  141 for hash 4952070d8a1b698d41603654af3a2bce--------------------



final int table_catalog  = 3;final int table_schema   = 4;final int table_name     = 5;final int column_name    = 6;// intermediate holders
        int      columnCount;Iterator tables;Table    table;Object[] row;Type     type;HsqlName tableName;// Initialization
        tables = allTables();Grantee grantee = session.getGrantee();

final int table_catalog = 3;final int table_schema  = 4;final int table_name    = 5;final int column_name   = 6;// intermediate holders
        int      columnCount;Iterator tables;Table    table;Object[] row;Type     type;HsqlName tableName;// Initialization
        tables = allTables();Grantee grantee = session.getGrantee();

---------------------------Clone group no  142 for hash 2f226ef07181876738ee07dbfa8ee4cf--------------------



stmnt.execute(ddl1);PreparedStatement ps = connection.prepareStatement(
                \"INSERT INTO t1 (d,f,l,i,s,t,dt,ti,ts) VALUES (?,?,?,?,?,?,?,?,?)\");ps.setString(1, \"0.2\");ps.setDouble(2, 0.2);ps.setLong(3, java.lang.Long.MAX_VALUE);ps.setInt(4, Integer.MAX_VALUE);ps.setInt(5, Short.MAX_VALUE);ps.setInt(6, 0);ps.setDate(7, new java.sql.Date(System.currentTimeMillis()));ps.setTime(8, new java.sql.Time(System.currentTimeMillis()));ps.setTimestamp(
                9, new java.sql.Timestamp(System.currentTimeMillis()));ps.execute();ps.setInt(1, 0);ps.setDouble(2, java.lang.Double.NaN);ps.setLong(3, java.lang.Long.MIN_VALUE);ps.setInt(4, Integer.MIN_VALUE);ps.setInt(5, Short.MIN_VALUE);ps.setInt(6, 0);// allowed conversions
            ps.setTimestamp(
                7, new java.sql.Timestamp(System.currentTimeMillis() + 1));ps.setTime(8, new java.sql.Time(System.currentTimeMillis() + 1));ps.setDate(9, new java.sql.Date(System.currentTimeMillis() + 1));ps.execute();//
            ps.setInt(1, 0);ps.setDouble(2, java.lang.Double.POSITIVE_INFINITY);ps.setInt(4, Integer.MIN_VALUE);// test conversion
            // ps.setObject(5, Boolean.TRUE); // no longer converts boolean to int
            // ps.setBoolean(5, true);
            ps.setObject(5, new Short((short) 2), Types.SMALLINT);ps.setObject(6, new Integer(2), Types.TINYINT);// allowed conversions
            ps.setObject(7, new java.sql.Date(System.currentTimeMillis() + 2));ps.setObject(8, new java.sql.Time(System.currentTimeMillis() + 2));ps.setObject(9, new java.sql.Timestamp(System.currentTimeMillis()
                                                   + 2));ps.execute();ps.setObject(1, new Float(0), Types.INTEGER);ps.setObject(4, new Float(1), Types.INTEGER);ps.setDouble(2, java.lang.Double.NEGATIVE_INFINITY);ps.execute();ResultSet rs =
                stmnt.executeQuery(\"SELECT d, f, l, i, s*2, t FROM t1\");boolean result = rs.next();value = rs.getDouble(2);//            int smallintValue = rs.getShort(3);
            int integerValue = rs.getInt(4);if (rs.next()) {
                value        = rs.getDouble(2);
                wasEqual     = Double.isNaN(value);
                integerValue = rs.getInt(4);

                // tests for conversion
                // getInt on DECIMAL
                integerValue = rs.getInt(1);
            }if (rs.next()) {
                value    = rs.getDouble(2);
                wasEqual = wasEqual && value == Double.POSITIVE_INFINITY;
            }if (rs.next()) {
                value    = rs.getDouble(2);
                wasEqual = wasEqual && value == Double.NEGATIVE_INFINITY;
            }rs = stmnt.executeQuery(\"SELECT MAX(i) FROM t1\");if (rs.next()) {
                int max = rs.getInt(1);

                System.out.println(\"Max value for i: \" + max);
            }try {

                // cause errors
                ps.setString(5, \"three\");
                fail(\"update did not fail\");
            } catch (SQLException e) {}

stmnt.execute(ddl1);PreparedStatement ps = connection.prepareStatement(
                \"INSERT INTO t1 (d,f,l,i,s,t,dt,ti,ts) VALUES (?,?,?,?,?,?,?,?,?)\");ps.setString(1, \"0.2\");ps.setDouble(2, 0.2);ps.setLong(3, java.lang.Long.MAX_VALUE);ps.setInt(4, Integer.MAX_VALUE);ps.setInt(5, Short.MAX_VALUE);ps.setInt(6, 0);ps.setDate(7, new java.sql.Date(System.currentTimeMillis()));ps.setTime(8, new java.sql.Time(System.currentTimeMillis()));ps.setTimestamp(
                9, new java.sql.Timestamp(System.currentTimeMillis()));ps.execute();ps.setInt(1, 0);ps.setDouble(2, java.lang.Double.NaN);ps.setLong(3, java.lang.Long.MIN_VALUE);ps.setInt(4, Integer.MIN_VALUE);ps.setInt(5, Short.MIN_VALUE);ps.setInt(6, 0);// allowed conversions
            ps.setTimestamp(
                7, new java.sql.Timestamp(System.currentTimeMillis() + 1));ps.setTime(8, new java.sql.Time(System.currentTimeMillis() + 1));ps.setDate(9, new java.sql.Date(System.currentTimeMillis() + 1));ps.execute();//
            ps.setInt(1, 0);ps.setDouble(2, java.lang.Double.POSITIVE_INFINITY);ps.setInt(4, Integer.MIN_VALUE);// test conversion
            // ps.setObject(5, Boolean.TRUE); // no longer converts boolean to int
            // ps.setBoolean(5, true);
            ps.setObject(5, new Short((short) 2), Types.SMALLINT);ps.setObject(6, new Integer(2), Types.TINYINT);// allowed conversions
            ps.setObject(7, new java.sql.Date(System.currentTimeMillis() + 2));ps.setObject(8, new java.sql.Time(System.currentTimeMillis() + 2));ps.setObject(9, new java.sql.Timestamp(System.currentTimeMillis()
                                                   + 2));ps.execute();ps.setObject(1, new Float(0), Types.INTEGER);ps.setObject(4, new Float(1), Types.INTEGER);ps.setDouble(2, java.lang.Double.NEGATIVE_INFINITY);ps.execute();ResultSet rs =
                stmnt.executeQuery(\"SELECT d, f, l, i, s*2, t FROM t1\");boolean result = rs.next();value = rs.getDouble(2);//            int smallintValue = rs.getShort(3);
            int integerValue = rs.getInt(4);if (rs.next()) {
                value        = rs.getDouble(2);
                wasEqual     = Double.isNaN(value);
                integerValue = rs.getInt(4);

                // tests for conversion
                // getInt on DECIMAL
                integerValue = rs.getInt(1);
            }if (rs.next()) {
                value    = rs.getDouble(2);
                wasEqual = wasEqual && value == Double.POSITIVE_INFINITY;
            }if (rs.next()) {
                value    = rs.getDouble(2);
                wasEqual = wasEqual && value == Double.NEGATIVE_INFINITY;
            }rs = stmnt.executeQuery(\"SELECT MAX(i) FROM t1\");if (rs.next()) {
                int max = rs.getInt(1);

                System.out.println(\"Max value for i: \" + max);
            }try {

                // cause errors
                ps.setString(5, \"three\");
                fail(\"update did not fail\");
            } catch (SQLException e) {}

---------------------------Clone group no  143 for hash 38738ae5a4fbbc4dec66254741f8b438--------------------



System.gc();long currentFree  = Runtime.getRuntime().freeMemory();long currentAlloc = Runtime.getRuntime().totalMemory();min = max = (currentAlloc - currentFree);

System.gc();long currentFree  = Runtime.getRuntime().freeMemory();long currentAlloc = Runtime.getRuntime().totalMemory();min = max = (currentAlloc - currentFree);

---------------------------Clone group no  144 for hash c84fde66a0db2858013a081ea1bc723b--------------------



int lookup = getLookup(key);if (lookup != -1) {
                return objectValueTable[lookup];
            }return null;

int lookup = getLookup(key);if (lookup != -1) {
            return objectValueTable[lookup];
        }return null;

int lookup = getLookup(key);if (lookup != -1) {
            return objectValueTable[lookup];
        }return null;

---------------------------Clone group no  145 for hash f0480c275169ff5667fe9e42c9633983--------------------



catch (SecurityException ex) {
            throw Exceptions.sourceInstantiation(ex);
        }catch (InstantiationException ex) {
            throw Exceptions.sourceInstantiation(ex);
        }catch (IllegalAccessException ex) {
            throw Exceptions.sourceInstantiation(ex);
        }catch (ClassCastException ex) {
            throw Exceptions.sourceInstantiation(ex);
        }

catch (SecurityException ex) {
            throw Exceptions.sourceInstantiation(ex);
        }catch (InstantiationException ex) {
            throw Exceptions.sourceInstantiation(ex);
        }catch (IllegalAccessException ex) {
            throw Exceptions.sourceInstantiation(ex);
        }catch (ClassCastException ex) {
            throw Exceptions.sourceInstantiation(ex);
        }

---------------------------Clone group no  146 for hash 5202393e1ff8d722e0cd0d5438006cac--------------------



catch (QuitNow qn) {
                throw qn;
            }catch (RuntimeException re) {
                throw re;  // Unrecoverable
            }catch (Exception e) {
                throw new BadSpecial(SqltoolRB.pl_block_fail.getString(), e);
            }

catch (QuitNow qn) {
                throw qn;
            }catch (RuntimeException re) {
                throw re;  // Unrecoverable
            }catch (Exception e) {
                throw new BadSpecial(SqltoolRB.pl_block_fail.getString(), e);
            }

catch (QuitNow qn) {
                throw qn;
            }catch (RuntimeException re) {
                throw re;  // Unrecoverable
            }catch (Exception e) {
                throw new BadSpecial(SqltoolRB.pl_block_fail.getString(), e);
            }

---------------------------Clone group no  147 for hash 2f10be8968163b59029e1b9967288b69--------------------



break;case Types.SQL_BIT :case Types.SQL_BIT_VARYING :

break;case Types.SQL_BIT :case Types.SQL_BIT_VARYING :

break;case Types.SQL_BIT :case Types.SQL_BIT_VARYING :

break;case Types.SQL_BIT :case Types.SQL_BIT_VARYING :

break;case Types.SQL_BIT :case Types.SQL_BIT_VARYING :

---------------------------Clone group no  148 for hash 5bbfce97582381fa8da4404a9f46ce35--------------------



readThis(Tokens.CURRENT_ROLE);if (session.getRole() == null) {
                        throw Error.error(ErrorCode.X_0P000);
                    }grantor = session.getRole();

readThis(Tokens.CURRENT_ROLE);if (session.getRole() == null) {
                    throw Error.error(ErrorCode.X_0P000);
                }grantor = session.getRole();

---------------------------Clone group no  149 for hash dae9180c949b66be4d2d6308a54b0955--------------------



boolean complete  = false;boolean wasCR     = false;boolean wasNormal = false;buffer.reset();

boolean complete  = false;boolean wasCR     = false;boolean wasNormal = false;buffer.reset();

---------------------------Clone group no  150 for hash fed96bb82a49154147c30a8cd2f8d90e--------------------



if (nodes[2].dataType == null) {
                        nodes[2].dataType = Type.SQL_NUMERIC;
                    }if (!nodes[2].dataType.isNumberType()) {
                        throw Error.error(ErrorCode.X_42563);
                    }nodes[2].dataType =
                        ((NumberType) nodes[2].dataType).getIntegralType();

if (nodes[2].dataType == null) {
                    nodes[2].dataType = Type.SQL_NUMERIC;
                }if (!nodes[2].dataType.isNumberType()) {
                    throw Error.error(ErrorCode.X_42563);
                }nodes[2].dataType =
                    ((NumberType) nodes[2].dataType).getIntegralType();

---------------------------Clone group no  151 for hash 76674d99d7c852eb6ccd24a6f5e76f51--------------------



Table table = (Table) object;if (isFullyAccessibleByRole(table.getName())) {
                return;
            }Right right = (Right) fullRightsMap.get(table.getName());

Table table = (Table) object;if (isFullyAccessibleByRole(table.getName())) {
                return;
            }Right right = (Right) fullRightsMap.get(table.getName());

Table table = (Table) object;if (isFullyAccessibleByRole(table.getName())) {
                return;
            }Right right = (Right) fullRightsMap.get(table.getName());

Table table = (Table) object;if (isFullyAccessibleByRole(table.getName())) {
                return;
            }Right right = (Right) fullRightsMap.get(table.getName());

Table table = (Table) object;if (isFullyAccessibleByRole(table.getName())) {
                return;
            }Right right = (Right) fullRightsMap.get(table.getName());

Table table = (Table) object;if (isFullyAccessibleByRole(table.getName())) {
                return;
            }Right right = (Right) fullRightsMap.get(table.getName());

---------------------------Clone group no  152 for hash 32d8677efcc6b06ad41d28a64fd67d9c--------------------



case StatementTypes.CALL :{
                break;
            }case StatementTypes.INSERT :

case StatementTypes.CALL :{
                break;
            }case StatementTypes.INSERT :

---------------------------Clone group no  153 for hash d470b5b492b701ee40e0c14f1b1ea27a--------------------



read();readThis(Tokens.BY);if (token.tokenType == Tokens.CURRENT_USER) {
                    read();

                    //
                } else {
                    readThis(Tokens.CURRENT_ROLE);

                    if (session.getRole() == null) {
                        throw Error.error(ErrorCode.X_0P000);
                    }

                    grantor = session.getRole();
                }

read();readThis(Tokens.BY);if (token.tokenType == Tokens.CURRENT_USER) {
                read();

                //
            } else {
                readThis(Tokens.CURRENT_ROLE);

                if (session.getRole() == null) {
                    throw Error.error(ErrorCode.X_0P000);
                }

                grantor = session.getRole();
            }

---------------------------Clone group no  154 for hash 2a1c73e56ec40bef712a9ec47acac823--------------------



addColumn(t, \"SPECIFIC_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"SPECIFIC_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"SPECIFIC_NAME\", SQL_IDENTIFIER);    // not nulladdColumn(t, \"ROUTINE_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"ROUTINE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"ROUTINE_NAME\", SQL_IDENTIFIER);

addColumn(t, \"SPECIFIC_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"SPECIFIC_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"SPECIFIC_NAME\", SQL_IDENTIFIER);addColumn(t, \"ROUTINE_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"ROUTINE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"ROUTINE_NAME\", SQL_IDENTIFIER);

addColumn(t, \"SPECIFIC_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"SPECIFIC_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"SPECIFIC_NAME\", SQL_IDENTIFIER);     // not nulladdColumn(t, \"ROUTINE_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"ROUTINE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"ROUTINE_NAME\", SQL_IDENTIFIER);      // not null

addColumn(t, \"SPECIFIC_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"SPECIFIC_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"SPECIFIC_NAME\", SQL_IDENTIFIER);addColumn(t, \"ROUTINE_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"ROUTINE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"ROUTINE_NAME\", SQL_IDENTIFIER);

addColumn(t, \"SPECIFIC_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"SPECIFIC_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"SPECIFIC_NAME\", SQL_IDENTIFIER);addColumn(t, \"ROUTINE_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"ROUTINE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"ROUTINE_NAME\", SQL_IDENTIFIER);

addColumn(t, \"SPECIFIC_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"SPECIFIC_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"SPECIFIC_NAME\", SQL_IDENTIFIER);addColumn(t, \"ROUTINE_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"ROUTINE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"ROUTINE_NAME\", SQL_IDENTIFIER);

---------------------------Clone group no  155 for hash 79a509f75d5c19d053b71e24e209de14--------------------



row = (Row) get(row, true);super.indexRow(session, row);row.keepInMemory(false);

row = (Row) get(row, true);super.indexRow(session, row);row.keepInMemory(false);

---------------------------Clone group no  156 for hash b1fcf8a1875ba4c8b98591ada8073a07--------------------



resultIn.setDatabaseId(databaseID);resultIn.setSessionId(sessionID);Result resultOut;

resultIn.setDatabaseId(databaseID);resultIn.setSessionId(sessionID);//
            Result resultOut;

---------------------------Clone group no  157 for hash f701db3896dce8c290160d12064d7cca--------------------



case Types.SQL_INTERVAL_MONTH :return Tokens.T_MONTH;case Types.SQL_INTERVAL_DAY :return Tokens.T_DAY;

case Types.SQL_INTERVAL_MONTH :return Tokens.T_MONTH;case Types.SQL_INTERVAL_DAY :return Tokens.T_DAY;

---------------------------Clone group no  158 for hash edd6ae4eb07a509e42f94a09c4dce0eb--------------------



DITableInfo ti;// column number mappings
        final int itable_cat         = 0;final int itable_schem       = 1;final int itable_name        = 2;

DITableInfo ti;// column number mappings
        // JDBC 1
        final int itable_cat   = 0;final int itable_schem = 1;final int itable_name  = 2;

---------------------------Clone group no  159 for hash d66933792045517a9044e51c19d835d5--------------------



Result          result = (Result) resultMap.get(id);RowSetNavigator source = result.getNavigator();if (offset + count > source.getSize()) {
            count = source.getSize() - offset;
        }

Result          result = (Result) resultMap.get(id);RowSetNavigator source = result.getNavigator();if (offset + count > source.getSize()) {
            count = source.getSize() - offset;
        }

---------------------------Clone group no  160 for hash 3a3d7652631a04f141b9eea7e5907663--------------------



dataOut.writeLong(currentOffset);dataOut.writeLong(byteArrayOS.size());dataOut.write(byteArrayOS.getBuffer(), 0, byteArrayOS.size());currentOffset += byteArrayOS.size();

dataOut.writeLong(currentOffset);dataOut.writeLong(byteArrayOS.size());dataOut.write(byteArrayOS.getBuffer(), 0, byteArrayOS.size());currentOffset += byteArrayOS.size();

---------------------------Clone group no  161 for hash 6cea3991a83611683ef25de41df40ef5--------------------



case Tokens.MEMORY :break;case Tokens.CACHED :type = TableBase.CACHED_TABLE;break;default :throw unexpectedToken();

case Tokens.MEMORY :break;case Tokens.CACHED :type = TableBase.CACHED_TABLE;break;default :throw unexpectedToken();

---------------------------Clone group no  162 for hash a183c98b1a7857e108eb8b6f6462bb56--------------------



Statement Stmt = Conn.createStatement();String    Query;Query = \"DELETE FROM history\";Stmt.execute(Query);Stmt.clearWarnings();Query = \"DELETE FROM accounts\";Stmt.execute(Query);Stmt.clearWarnings();Query = \"DELETE FROM tellers\";Stmt.execute(Query);Stmt.clearWarnings();Query = \"DELETE FROM branches\";Stmt.execute(Query);Stmt.clearWarnings();

Statement Stmt = Conn.createStatement();String    Query;Query = \"DELETE FROM history\";Stmt.execute(Query);Stmt.clearWarnings();Query = \"DELETE FROM accounts\";Stmt.execute(Query);Stmt.clearWarnings();Query = \"DELETE FROM tellers\";Stmt.execute(Query);Stmt.clearWarnings();Query = \"DELETE FROM branches\";Stmt.execute(Query);Stmt.clearWarnings();

---------------------------Clone group no  163 for hash 953bd0f8f8c90be8f04177a956fce6dd--------------------



case OpTypes.VALUE :sb.append(\"VALUE = \").append(
                    dataType.convertToSQLString(valueData));sb.append(\", TYPE = \").append(dataType.getNameString());return sb.toString();

case OpTypes.VALUE :sb.append(\"VALUE = \").append(
                    dataType.convertToSQLString(valueData));sb.append(\", TYPE = \").append(dataType.getNameString());return sb.toString();

case OpTypes.VALUE :sb.append(\"VALUE = \").append(
                    dataType.convertToSQLString(valueData));sb.append(\", TYPE = \").append(dataType.getNameString());return sb.toString();

case OpTypes.VALUE :sb.append(\"VALUE = \").append(
                    dataType.convertToSQLString(valueData));sb.append(\", TYPE = \").append(dataType.getNameString());return sb.toString();

---------------------------Clone group no  164 for hash cb8863a0c39ce6e219b6ff7aa8495477--------------------



assertEquals(\"Retrieved bye array length wrong (1)\",
            expectedBytes.length, ba1.length);for (int i = 0; i < ba1.length; i++) {
            assertEquals(\"Byte \" + i + \" wrong (1)\", expectedBytes[i], ba1[i]);
        }assertEquals(\"Retrieved bye array length wrong (2)\",
            expectedBytes.length, ba2.length);for (int i = 0; i < ba2.length; i++) {
            assertEquals(\"Byte \" + i + \" wrong (2)\", expectedBytes[i], ba2[i]);
        }

assertEquals(\"Retrieved bye array length wrong (1)\",
            expectedBytes.length, ba1.length);for (int i = 0; i < ba1.length; i++) {
            assertEquals(\"Byte \" + i + \" wrong (1)\", expectedBytes[i], ba1[i]);
        }assertEquals(\"Retrieved bye array length wrong (2)\",
            expectedBytes.length, ba2.length);for (int i = 0; i < ba2.length; i++) {
            assertEquals(\"Byte \" + i + \" wrong (2)\", expectedBytes[i], ba2[i]);
        }

---------------------------Clone group no  165 for hash cee07466391c9f73dbf2a6bfd35b6495--------------------



t.insertSys(session, store, rs);sys.close();return t;

t.insertSys(session, store, rs);sys.close();return t;

t.insertSys(session, store, rs);sys.close();return t;

t.insertSys(session, store, rs);sys.close();return t;

t.insertSys(session, store, rs);sys.close();return t;

t.insertSys(session, store, rs);sys.close();return t;

---------------------------Clone group no  166 for hash d7db0f6ac83278799d98c00c63bd79b2--------------------



session.abortTransaction        = false;session.actionTimestamp         = getNextGlobalChangeTimestamp();session.transactionEndTimestamp = session.actionTimestamp;rollbackPartial(session, 0, session.transactionTimestamp);endTransaction(session);endTransactionTPL(session);

session.abortTransaction        = false;session.actionTimestamp         = getNextGlobalChangeTimestamp();session.transactionEndTimestamp = session.actionTimestamp;rollbackPartial(session, 0, session.transactionTimestamp);endTransaction(session);endTransactionTPL(session);

---------------------------Clone group no  167 for hash 2bd108aee96fd7cd81bdc7391440049d--------------------



if (result.isError()) {
                return result;
            }if (offset + dataLength > length) {
                length = offset + dataLength;
                result = setLength(lobID, length);

                if (result.isError()) {
                    return result;
                }
            }return ResultLob.newLobSetResponse(lobID, length);

if (result.isError()) {
                return result;
            }if (offset + dataLength > length) {
                length = offset + dataLength;
                result = setLength(lobID, length);

                if (result.isError()) {
                    return result;
                }
            }return ResultLob.newLobSetResponse(lobID, length);

---------------------------Clone group no  168 for hash bd651634b2fbbb3f7e49c26457ad8045--------------------



case OpTypes.ARRAY ://
            case OpTypes.ARRAY_SUBQUERY :case OpTypes.ROW_SUBQUERY :case OpTypes.TABLE_SUBQUERY :

case OpTypes.ARRAY :case OpTypes.ARRAY_SUBQUERY :case OpTypes.ROW_SUBQUERY :case OpTypes.TABLE_SUBQUERY :

---------------------------Clone group no  169 for hash 6c9e062e15bede1923f785c453034203--------------------



setHomeDir();if (homedir == null) {
                    return;
                }recentSettings = new File(homedir, fileName);

setHomeDir();if (homedir == null) {
                    return;
                }recentSettings = new File(homedir, fileName);

---------------------------Clone group no  170 for hash 31dbb1427faf6838cdd4c7bfdbed6bf4--------------------



setNewTableInSchema(tn);updateConstraints(tn, emptySet);table = tn;

setNewTableInSchema(tn);updateConstraints(tn, emptySet);table = tn;

---------------------------Clone group no  171 for hash cb7c9cbf7f39e985503cd66078024a31--------------------



row.keepInMemory(false);indexRow(session, row);break;case RowAction.ACTION_INSERT :delete(session, row);remove(row);break;case RowAction.ACTION_INSERT_DELETE :// INSERT + DELEETE
                remove(row);break;

row.keepInMemory(false);indexRow(session, row);break;case RowAction.ACTION_INSERT :delete(session, row);remove(row);break;case RowAction.ACTION_INSERT_DELETE :// INSERT + DELEETE
                remove(row);break;

---------------------------Clone group no  172 for hash 7eae212f5f17071bd23e6f01ce26df91--------------------



String[] info = getConstraintInfo(c);refiterator.release();throw Error.error(null, ErrorCode.X_27000,
                                                  ErrorCode.CONSTRAINT, info);

String[] info = getConstraintInfo(c);refiterator.release();throw Error.error(null, ErrorCode.X_27000,
                                      ErrorCode.CONSTRAINT, info);

---------------------------Clone group no  173 for hash f14e717f8b4b2e45e78d20e584a7030c--------------------



table = (Table) tables.next();columnList =
                session.getGrantee().getColumnsForAllPrivileges(table);if (columnList.isEmpty()) {
                continue;
            }columnCount = table.getColumnCount();

table = (Table) tables.next();columnList =
                session.getGrantee().getColumnsForAllPrivileges(table);if (columnList.isEmpty()) {
                continue;
            }columnCount = table.getColumnCount();

---------------------------Clone group no  174 for hash 94eb804a4693b61b170f5ef63ad6fa4d--------------------



// rolled back transactions can always be merged as they have never been
        // seen by other sessions
        writeLock.lock();try {
            Object[] list = session.rowActionList.getArray();

            mergeRolledBackTransaction(session, timestamp, list, start, limit);
        } finally {
            writeLock.unlock();
        }session.rowActionList.setSize(start);

// rolled back transactions can always be merged as they have never been
        // seen by other sessions
        writeLock.lock();try {
            Object[] list = session.rowActionList.getArray();

            mergeRolledBackTransaction(session, timestamp, list, start, limit);
        } finally {
            writeLock.unlock();
        }session.rowActionList.setSize(start);

---------------------------Clone group no  175 for hash df050ca40b011446953799d79f03f6d1--------------------



sb.append(Tokens.T_ARRAY);if (maxCardinality != defaultArrayCardinality) {
            sb.append('[').append(maxCardinality).append(']');
        }return sb.toString();

sb.append(Tokens.T_ARRAY);if (maxCardinality != defaultArrayCardinality) {
            sb.append('[').append(maxCardinality).append(']');
        }return sb.toString();

sb.append(Tokens.T_ARRAY);if (maxCardinality != defaultArrayCardinality) {
            sb.append('[').append(maxCardinality).append(']');
        }return sb.toString();

---------------------------Clone group no  176 for hash 4951b887a92e37de45a941820c30fcac--------------------



if (l != null && l.getBalance(store) == -2) {
            System.out.print(\"broken index - deleted\");
        }if (r != null && r.getBalance(store) == -2) {
            System.out.print(\"broken index -deleted\");
        }if (l != null && !p.equals(l.getParent(store))) {
            System.out.print(\"broken index - no parent\");
        }if (r != null && !p.equals(r.getParent(store))) {
            System.out.print(\"broken index - no parent\");
        }

if (l != null && l.getBalance(store) == -2) {
            System.out.print(\"broken index - deleted\");
        }if (r != null && r.getBalance(store) == -2) {
            System.out.print(\"broken index -deleted\");
        }if (l != null && !p.equals(l.getParent(store))) {
            System.out.print(\"broken index - no parent\");
        }if (r != null && !p.equals(r.getParent(store))) {
            System.out.print(\"broken index - no parent\");
        }

---------------------------Clone group no  177 for hash f0c30b8625b88082730c6a0f0d70e7bc--------------------



dataFile.seek(FLAGS_POS);int flags = dataFile.readInt();is180 = !BitMap.isSet(flags, FLAG_190);

dataFile.seek(FLAGS_POS);int flags = dataFile.readInt();is180 = !BitMap.isSet(flags, FLAG_190);

dataFile.seek(FLAGS_POS);int flags = dataFile.readInt();is180 = !BitMap.isSet(flags, FLAG_190);

dataFile.seek(FLAGS_POS);int flags = dataFile.readInt();is180 = !BitMap.isSet(flags, FLAG_190);

---------------------------Clone group no  178 for hash 5336c1a9747b1fd373b0a451db037c7c--------------------



props.addProperties(argProps);ServerConfiguration.translateDefaultDatabaseProperty(props);// Standard behaviour when started from the command line
        // is to halt the VM when the server shuts down.  This may, of
        // course, be overridden by whatever, if any, security policy
        // is in place.
        ServerConfiguration.translateDefaultNoSystemExitProperty(props);ServerConfiguration.translateAddressProperty(props);

props.addProperties(argProps);ServerConfiguration.translateDefaultDatabaseProperty(props);// Standard behaviour when started from the command line
        // is to halt the VM when the server shuts down.  This may, of
        // course, be overridden by whatever, if any, security policy
        // is in place.
        ServerConfiguration.translateDefaultNoSystemExitProperty(props);ServerConfiguration.translateAddressProperty(props);

---------------------------Clone group no  179 for hash b787835789777fa004d45b0d6ee0d91b--------------------



// for text tables with empty rows at the beginning,
            // pos may move forward in readObject
            cache.put(object);if (keep) {
                object.keepInMemory(true);
            }store.set(object);return object;

// for text tables with empty rows at the beginning,
            // pos may move forward in readObject
            cache.put(object);if (keep) {
                object.keepInMemory(true);
            }store.set(object);return object;

---------------------------Clone group no  180 for hash d67d46e3b62ca2950679286fa66597d8--------------------



// Would like to use String.split(), but don't know if Java 4
                // is allowed here.
                // Until we can use Java 4, prohibit tabs as white space.
                int index = trimmed.indexOf(' ');if (index < 0) {
                    throw new IllegalArgumentException();
                }enforceSequence = Boolean.valueOf(trimmed.substring(0,
                        index)).booleanValue();waiter = Waiter.getWaiter(trimmed.substring(index).trim());

// Would like to use String.split(), but don't know if Java 4
            // is allowed here.
            // Until we can use Java 4, prohibit tabs as white space.
            int index = trimmed.indexOf(' ');if (index < 0) {
                throw new IllegalArgumentException();
            }enforceSequence = Boolean.valueOf(trimmed.substring(0,
                    index)).booleanValue();waiter = Waiter.getWaiter(trimmed.substring(index).trim());

---------------------------Clone group no  181 for hash 89055962a2cad6af369ac762ed9635ff--------------------



sb.append(dataType.getTypeDefinition());sb.append(' ');break;

sb.append(dataType.getTypeDefinition());sb.append(' ');break;

sb.append(dataType.getTypeDefinition());sb.append(' ');break;

---------------------------Clone group no  182 for hash 4896ca237ca87d7c161b1b2cef53ba2e--------------------



return;default :throw Error.runtimeError(ErrorCode.U_S0500, \"ExpressionOp\");

return;default :throw Error.runtimeError(ErrorCode.U_S0500, \"ExpressionOp\");

---------------------------Clone group no  183 for hash a9b34d7a1f82a8e18251a0f61271dd77--------------------



sb.append('(');sb.append(precision);sb.append(')');

sb.append('(');sb.append(precision);sb.append(')');

sb.append('(');sb.append(precision);sb.append(')');

sb.append('(');sb.append(precision);sb.append(')');

---------------------------Clone group no  184 for hash 4653ad5071488f9787352656cb21e619--------------------



sb.append(\" arg_right=[\");sb.append(nodes[RIGHT].describe(session, blanks + 1));sb.append(']');

sb.append(\" arg_right=[\");sb.append(nodes[RIGHT].describe(session, blanks + 1));sb.append(']');

sb.append(\" arg_right=[\");sb.append(nodes[RIGHT].describe(session, blanks + 1));sb.append(']');

---------------------------Clone group no  185 for hash 98bba7e5366d44e8add3a3948a47982d--------------------



addColumn(t, \"GRANTOR\", SQL_IDENTIFIER);           // not nulladdColumn(t, \"GRANTEE\", SQL_IDENTIFIER);           // not nulladdColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);        // not null

addColumn(t, \"GRANTOR\", SQL_IDENTIFIER);           // not nulladdColumn(t, \"GRANTEE\", SQL_IDENTIFIER);           // not nulladdColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);        // not null

---------------------------Clone group no  186 for hash 1f05992b01b9a240165eb3aad2df4763--------------------



for (int i = 0; i < nodes.length; i++) {
                    if (nodes[i].dataType == null) {
                        nodes[i].dataType = Type.SQL_VARCHAR;
                    } else if (!nodes[i].dataType.isCharacterType()) {
                        throw Error.error(ErrorCode.X_42561);
                    }
                }dataType = Type.SQL_VARCHAR_DEFAULT;break;

for (int i = 0; i < nodes.length; i++) {
                    if (nodes[i].dataType == null) {
                        nodes[i].dataType = Type.SQL_VARCHAR;
                    } else if (!nodes[i].dataType.isCharacterType()) {
                        throw Error.error(ErrorCode.X_42561);
                    }
                }dataType = Type.SQL_VARCHAR_DEFAULT;break;

---------------------------Clone group no  187 for hash a38757010ff8bae2a6b8009068d1eed0--------------------



read();end = true;break;

read();end = true;break;

---------------------------Clone group no  188 for hash 9170fde0c66204ce0c5e21f265874e92--------------------



result.updateCount  = in.readInt();result.fetchSize    = in.readInt();result.statementID  = in.readLong();

result.updateCount         = in.readInt();result.fetchSize           = in.readInt();result.statementID         = in.readLong();

result.updateCount  = in.readInt();result.fetchSize    = in.readInt();result.statementID  = in.readLong();

---------------------------Clone group no  189 for hash 4422c49c0178ea98326bbf4dfec2b26f--------------------



//
        sb.append(Tokens.T_START).append(' ');sb.append(Tokens.T_WITH).append(' ');sb.append(startValue);if (getIncrement() != 1) {
            sb.append(' ').append(Tokens.T_INCREMENT).append(' ');
            sb.append(Tokens.T_BY).append(' ');
            sb.append(getIncrement());
        }if (!hasDefaultMinMax()) {
            sb.append(' ').append(Tokens.T_MINVALUE).append(' ');
            sb.append(getMinValue());
            sb.append(' ').append(Tokens.T_MAXVALUE).append(' ');
            sb.append(getMaxValue());
        }if (isCycle()) {
            sb.append(' ').append(Tokens.T_CYCLE);
        }if (name == null) {
            sb.append(Tokens.T_CLOSEBRACKET);
        }

//
            sb.append(Tokens.T_START).append(' ');sb.append(Tokens.T_WITH).append(' ');sb.append(startValue);if (getIncrement() != 1) {
                sb.append(' ').append(Tokens.T_INCREMENT).append(' ');
                sb.append(Tokens.T_BY).append(' ');
                sb.append(getIncrement());
            }if (!hasDefaultMinMax()) {
                sb.append(' ').append(Tokens.T_MINVALUE).append(' ');
                sb.append(getMinValue());
                sb.append(' ').append(Tokens.T_MAXVALUE).append(' ');
                sb.append(getMaxValue());
            }if (isCycle()) {
                sb.append(' ').append(Tokens.T_CYCLE);
            }if (name == null) {
                sb.append(Tokens.T_CLOSEBRACKET);
            }

---------------------------Clone group no  190 for hash a2a5110f80d9ffc5aca0404af60f08be--------------------



HsqlName name = nameList[i];if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) {
                continue;
            }Session holder = (Session) tableWriteLocks.get(name);if (holder != null && holder != session) {
                session.tempSet.add(holder);
            }

HsqlName name = nameList[i];if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) {
                continue;
            }Session holder = (Session) tableWriteLocks.get(name);if (holder != null && holder != session) {
                session.tempSet.add(holder);
            }

---------------------------Clone group no  191 for hash 1b2d7c9a684160438b681658345555ef--------------------



break;case SchemaObject.TABLE :case SchemaObject.VIEW :

break;case SchemaObject.TABLE :case SchemaObject.VIEW :

---------------------------Clone group no  192 for hash f37878348c71f583dd5f5024019b875d--------------------



case TableBase.MEMORY_TABLE :case TableBase.CACHED_TABLE :case TableBase.TEXT_TABLE :

case TableBase.MEMORY_TABLE :case TableBase.CACHED_TABLE :case TableBase.TEXT_TABLE :

case TableBase.MEMORY_TABLE :case TableBase.CACHED_TABLE :case TableBase.TEXT_TABLE :

---------------------------Clone group no  193 for hash 2a2d89aec749cf193b8b187b1e0792fb--------------------



// ----------------------------------------------------------------
            // required
            // ----------------------------------------------------------------
            addColumn(t, \"PROCEDURE_CAT\", SQL_IDENTIFIER);          // 0addColumn(t, \"PROCEDURE_SCHEM\", SQL_IDENTIFIER);        // 1addColumn(t, \"PROCEDURE_NAME\", SQL_IDENTIFIER);         // not null

// ----------------------------------------------------------------
            // required
            // ----------------------------------------------------------------
            addColumn(t, \"PROCEDURE_CAT\", SQL_IDENTIFIER);        // 0addColumn(t, \"PROCEDURE_SCHEM\", SQL_IDENTIFIER);      // 1addColumn(t, \"PROCEDURE_NAME\", SQL_IDENTIFIER);       // 2

---------------------------Clone group no  194 for hash 73a1682a096baa6d6035829c46325647--------------------



// Skip 'atom' (current) and the operand that we'll handle later
                i += 2;atom = nextAtom;continue;

// Skip 'atom' (current) and the operand that we'll handle later
                i += 2;atom = nextAtom;continue;

---------------------------Clone group no  195 for hash d1297d8c3921baaae36face714155375--------------------



int aBlockOffset = aAddresses[aIndex][LOBS.BLOCK_ADDR] + aOffset;int bBlockOffset = bAddresses[bIndex][LOBS.BLOCK_ADDR] + bOffset;byte[] aBytes    = getLobStore().getBlockBytes(aBlockOffset, 1);byte[] bBytes    = getLobStore().getBlockBytes(bBlockOffset, 1);

int aBlockOffset = aAddresses[aIndex][LOBS.BLOCK_ADDR] + aOffset;int bBlockOffset = bAddresses[bIndex][LOBS.BLOCK_ADDR] + bOffset;byte[] aBytes    = getLobStore().getBlockBytes(aBlockOffset, 1);byte[] bBytes    = getLobStore().getBlockBytes(bBlockOffset, 1);

---------------------------Clone group no  196 for hash a4e152ea7e7544b9216fff6b5e556f2a--------------------



if (label == null) {
                throw unexpectedToken();
            }if (!label.name.equals(token.tokenString)) {
                throw Error.error(ErrorCode.X_42508, token.tokenString);
            }read();

if (label == null) {
                throw unexpectedToken();
            }if (!label.name.equals(token.tokenString)) {
                throw Error.error(ErrorCode.X_42508, token.tokenString);
            }read();

if (label == null) {
                throw unexpectedToken();
            }if (!label.name.equals(token.tokenString)) {
                throw Error.error(ErrorCode.X_42508, token.tokenString);
            }read();

if (label == null) {
                throw unexpectedToken();
            }if (!label.name.equals(token.tokenString)) {
                throw Error.error(ErrorCode.X_42508, token.tokenString);
            }read();

if (label == null) {
                throw unexpectedToken();
            }if (!label.name.equals(token.tokenString)) {
                throw Error.error(ErrorCode.X_42508, token.tokenString);
            }read();

---------------------------Clone group no  197 for hash 2177a1512ac82c542fbd95a3b649305a--------------------



NodeAVLDiskLarge node = this;RowAVLDisk  row  = this.row;if (!row.isInMemory()) {
            row  = (RowAVLDisk) store.get(this.row, false);
            node = (NodeAVLDiskLarge) row.getNode(iId);
        }

NodeAVLDiskLarge node = this;RowAVLDisk  row  = this.row;if (!row.isInMemory()) {
            row  = (RowAVLDisk) store.get(this.row, false);
            node = (NodeAVLDiskLarge) row.getNode(iId);
        }

NodeAVLDiskLarge node = this;RowAVLDisk  row  = this.row;if (!row.isInMemory()) {
            row  = (RowAVLDisk) store.get(this.row, false);
            node = (NodeAVLDiskLarge) row.getNode(iId);
        }

NodeAVLDiskLarge node = this;RowAVLDisk  row  = this.row;if (!row.isInMemory()) {
            row  = (RowAVLDisk) store.get(this.row, false);
            node = (NodeAVLDiskLarge) row.getNode(iId);
        }

NodeAVLDiskLarge node = this;RowAVLDisk  row  = this.row;if (!row.isInMemory()) {
            row  = (RowAVLDisk) store.get(this.row, false);
            node = (NodeAVLDiskLarge) row.getNode(iId);
        }

NodeAVLDiskLarge node = this;RowAVLDisk  row  = this.row;if (!row.isInMemory()) {
            row  = (RowAVLDisk) store.get(this.row, false);
            node = (NodeAVLDiskLarge) row.getNode(iId);
        }

---------------------------Clone group no  198 for hash 25a834dfb644641ab1e98f1b86874fc8--------------------



Object[] list = session.rowActionList.getArray();mergeTransaction(list, limit, newLimit,
                                 session.actionTimestamp);finaliseRows(session, list, limit, newLimit);session.rowActionList.setSize(limit);

Object[] list = session.rowActionList.getArray();mergeTransaction(list, limit, newLimit,
                                 session.actionTimestamp);finaliseRows(session, list, limit, newLimit);session.rowActionList.setSize(limit);

---------------------------Clone group no  199 for hash e2283d656ad212127428ea0e56c526fb--------------------



InputStreamReader isr = isEncoding(encoding)
                    ? new InputStreamReader(is, encoding)
                    : new InputStreamReader(is);close  = true;reader = new BufferedReader(isr);

InputStreamReader isr = isEncoding(encoding)
                    ? new InputStreamReader(is, encoding)
                    : new InputStreamReader(is);close  = true;reader = new BufferedReader(isr);

---------------------------Clone group no  200 for hash d2aefdcccd14eda971167aebde9d6fa9--------------------



read();Integer  size = readIntegerObject();Object[] args = new Object[]{ size };

read();Integer  size = readIntegerObject();Object[] args = new Object[]{ size };

---------------------------Clone group no  201 for hash 049db72d2fd7f8ae7eefb9031f906ae7--------------------



if (committedTransactionTimestamps.isEmpty()) {
                    break;
                }commitTimestamp = committedTransactionTimestamps.getFirst();if (commitTimestamp < timestamp) {
                    committedTransactionTimestamps.removeFirst();

                    actions = (Object[]) committedTransactions.removeFirst();
                } else {
                    break;
                }

if (committedTransactionTimestamps.isEmpty()) {
                    break;
                }commitTimestamp = committedTransactionTimestamps.getFirst();if (commitTimestamp < timestamp) {
                    committedTransactionTimestamps.removeFirst();

                    actions = (Object[]) committedTransactions.removeFirst();
                } else {
                    break;
                }

---------------------------Clone group no  202 for hash 3e45afa04e6c85641071e1aeb8c926d0--------------------



addColumn(t, \"SEQUENCE_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"SEQUENCE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"SEQUENCE_NAME\", SQL_IDENTIFIER);

addColumn(t, \"SEQUENCE_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"SEQUENCE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"SEQUENCE_NAME\", SQL_IDENTIFIER);

addColumn(t, \"SEQUENCE_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"SEQUENCE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"SEQUENCE_NAME\", SQL_IDENTIFIER);    // not null

---------------------------Clone group no  203 for hash 15bec501458b5dbc86c85ca271b4d556--------------------



setLayout(null);sbHoriz = new Scrollbar(Scrollbar.HORIZONTAL);add(sbHoriz);sbVert = new Scrollbar(Scrollbar.VERTICAL);add(sbVert);

setLayout(null);sbHoriz = new Scrollbar(Scrollbar.HORIZONTAL);add(sbHoriz);sbVert = new Scrollbar(Scrollbar.VERTICAL);add(sbVert);

---------------------------Clone group no  204 for hash aa0611c9c5fa18996987404b1e0cc41b--------------------



case Event.SCROLL_LINE_UP :case Event.SCROLL_LINE_DOWN :case Event.SCROLL_PAGE_UP :case Event.SCROLL_PAGE_DOWN :case Event.SCROLL_ABSOLUTE :iX = sbHoriz.getValue();iY = iRowHeight * sbVert.getValue();repaint();return true;

case Event.SCROLL_LINE_UP :case Event.SCROLL_LINE_DOWN :case Event.SCROLL_PAGE_UP :case Event.SCROLL_PAGE_DOWN :case Event.SCROLL_ABSOLUTE :iX = sbHoriz.getValue();iY = iRowHeight * sbVert.getValue();repaint();return true;

---------------------------Clone group no  205 for hash 1dd2402f065faf9d710646231f2caeef--------------------



PersistentStore store = t.getRowStore(session);// column number mappings
        final int icat          = 0;final int ischem        = 1;

PersistentStore store = t.getRowStore(session);// column number mappings
        final int icat       = 0;final int ischem     = 1;

---------------------------Clone group no  206 for hash bf7aaf04c3329857a84cd2f98689b847--------------------



Object[] newData = new Object[visibleColumnCount];ArrayUtil.projectRow(data, columnMap, newData);data = newData;

Object[] newData = new Object[visibleColumnCount];ArrayUtil.projectRow(data, columnMap, newData);data = newData;

---------------------------Clone group no  207 for hash ca9167f358d5e0ce4fd8af3526b23c5e--------------------



int windex = pos >> 5;int mask   = 0x80000000 >>> (pos & 0x1F);int word   = map[windex];int result = (word & mask) == 0 ? 0
                                        : 1;

int windex = pos >> 5;int mask   = 0x80000000 >>> (pos & 0x1F);int word   = map[windex];int result = (word & mask) == 0 ? 0
                                        : 1;

---------------------------Clone group no  208 for hash 2ab6cdbccd162fda578c5bed2d203d3c--------------------



r = s.getGeneratedKeys();while (r.next()) {
                r.getInt(1);

                valid = true;
            }assertTrue(valid);

r = s.getGeneratedKeys();while (r.next()) {
                r.getInt(1);

                valid = true;
            }assertTrue(valid);

---------------------------Clone group no  209 for hash 388ba7c845d4a4db780091ea1c3302bc--------------------



Expression e = XreadExplicitRowValueConstructorOrNull();if (e != null) {
            return e;
        }return XreadRowValueSpecialCase();

Expression e = XreadExplicitRowValueConstructorOrNull();if (e != null) {
            return e;
        }return XreadRowValueSpecialCase();

---------------------------Clone group no  210 for hash 2c67cb10fcc6c342a3ff627619fd0434--------------------



addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);        // not null

addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);        // not null

addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);

---------------------------Clone group no  211 for hash b0f55e0f3ebbe6de6ff7d312f4df4fe1--------------------



rs = st.getResultSet();rs.next();assertEquals(\"INFORMATION_SCHEMA\", rs.getString(2));

rs = st.getResultSet();rs.next();assertEquals(\"INFORMATION_SCHEMA\", rs.getString(2));

---------------------------Clone group no  212 for hash 3721e0073bcd199479d8dcaf02b65f96--------------------



destroy();elementCount.set(0);ArrayUtil.fillArray(accessorList, null);

destroy();elementCount.set(0);ArrayUtil.fillArray(accessorList, null);

---------------------------Clone group no  213 for hash 570ecc76ea0ec0b3ce79d8958ddacf89--------------------



case Types.SQL_INTERVAL_DAY :case Types.SQL_INTERVAL_HOUR :case Types.SQL_INTERVAL_MINUTE :case Types.SQL_INTERVAL_SECOND :

case Types.SQL_INTERVAL_DAY :case Types.SQL_INTERVAL_HOUR :case Types.SQL_INTERVAL_MINUTE :case Types.SQL_INTERVAL_SECOND :

case Types.SQL_INTERVAL_DAY :case Types.SQL_INTERVAL_HOUR :case Types.SQL_INTERVAL_MINUTE :case Types.SQL_INTERVAL_SECOND :

case Types.SQL_INTERVAL_DAY :case Types.SQL_INTERVAL_HOUR :case Types.SQL_INTERVAL_MINUTE :case Types.SQL_INTERVAL_SECOND :

---------------------------Clone group no  214 for hash 07e68c9bd24ed658dd1924ce293399d7--------------------



int limit = session.rowActionList.size();// new actionTimestamp used for commitTimestamp
            session.actionTimestamp         = getNextGlobalChangeTimestamp();session.transactionEndTimestamp = session.actionTimestamp;endTransaction(session);for (int i = 0; i < limit; i++) {
                RowAction action = (RowAction) session.rowActionList.get(i);

                action.commit(session);
            }adjustLobUsage(session);persistCommit(session);

int limit = session.rowActionList.size();// new actionTimestamp used for commitTimestamp
            session.actionTimestamp         = getNextGlobalChangeTimestamp();session.transactionEndTimestamp = session.actionTimestamp;endTransaction(session);for (int i = 0; i < limit; i++) {
                RowAction action = (RowAction) session.rowActionList.get(i);

                action.commit(session);
            }adjustLobUsage(session);persistCommit(session);

---------------------------Clone group no  215 for hash c156bae8d21356e22f6a3c074375a841--------------------



rs  = stmt.executeQuery(\"select count(*) from t\");rs.next();rowcount = rs.getInt(1);rs.close();

rs = stmt.executeQuery(\"select count(*) from t\");rs.next();rowcount = rs.getInt(1);rs.close();

rs = stmt.executeQuery(\"select count(*) from t\");rs.next();rowcount = rs.getInt(1);rs.close();

---------------------------Clone group no  216 for hash 723a7f32009fb3b2d2068f33f80f57c8--------------------



HsqlName name = nameList[i];if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) {
                continue;
            }Session holder = (Session) tableWriteLocks.get(name);if (holder != null && holder != session) {
                return false;
            }

HsqlName name = nameList[i];if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) {
                continue;
            }Session holder = (Session) tableWriteLocks.get(name);if (holder != null && holder != session) {
                return false;
            }

---------------------------Clone group no  217 for hash 2c87d86abf7ceac5111cbc643900609a--------------------



read();readThis(Tokens.EXISTS);ifExists = true;

read();readThis(Tokens.EXISTS);ifExists = true;

---------------------------Clone group no  218 for hash 2bce75c794bfcfaede6ca0c0fc4b806e--------------------



Type domain = (Type) it.next();if (!domain.isDomainType()) {
                continue;
            }if (!session.getGrantee().isFullyAccessibleByRole(
                    domain.getName())) {
                continue;
            }

Type domain = (Type) it.next();if (!domain.isDomainType()) {
                continue;
            }if (!session.getGrantee().isFullyAccessibleByRole(
                    domain.getName())) {
                continue;
            }

---------------------------Clone group no  219 for hash 58b1952207d525eb6562f8e1cd8a6025--------------------



pResult.removeAll();pResult.add(\"Center\", txtResult);pResult.doLayout();

pResult.removeAll();pResult.add(\"Center\", txtResult);pResult.doLayout();

---------------------------Clone group no  220 for hash 6a24f9cec05f57938ed6dcfe8eb6f332--------------------



ensureRoom(2);buffer[count++] = (byte) (v >>> 8);buffer[count++] = (byte) v;

ensureRoom(2);buffer[count++] = (byte) (v >>> 8);buffer[count++] = (byte) v;

---------------------------Clone group no  221 for hash 692ec4960371fcfe34596ef5f6649d7d--------------------



case Types.SQL_DATE :case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :case Types.SQL_TIMESTAMP :{
                return new TimestampData(millis / 1000, 0,
                                         ((TimestampData) a).getZone());
            }default :

case Types.SQL_DATE :case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :case Types.SQL_TIMESTAMP :{
                return new TimestampData(millis / 1000, 0,
                                         ((TimestampData) a).getZone());
            }default :

---------------------------Clone group no  222 for hash b345d11408832f34a5719d5a1fc6cc54--------------------



if (!columnList.contains(column.getName())) {
                    continue;
                }row                   = t.getEmptyRowData();row[table_cat]        = database.getCatalogName().name;row[table_schem]      = table.getSchemaName().name;row[table_name]       = table.getName().name;row[column_name]      = column.getName().name;

if (!columnList.contains(column.getName())) {
                    continue;
                }row                   = t.getEmptyRowData();row[table_cat]        = database.getCatalogName().name;row[table_schem]      = table.getSchemaName().name;row[table_name]       = table.getName().name;row[column_name]      = column.getName().name;

---------------------------Clone group no  223 for hash e7f09a191f1f32fb9a83fd56c8ea5953--------------------



part               = getTSIToken((String) nodes[0].valueData);nodes[0].valueData = ValuePool.getInt(part);nodes[0].dataType  = Type.SQL_INTEGER;

part = getTSIToken((String) nodes[0].valueData);nodes[0].valueData = ValuePool.getInt(part);nodes[0].dataType  = Type.SQL_INTEGER;

---------------------------Clone group no  224 for hash 504ca2da29c5852fbf57ba56cdc085e8--------------------



Result    resultIn  = session.execute(resultOut);if (resultIn.isError()) {
            throw resultIn.getException();
        }this.length = ((ResultLob) resultIn).getBlockLength();

Result resultIn = session.execute(resultOut);if (resultIn.isError()) {
            throw resultIn.getException();
        }this.length = ((ResultLob) resultIn).getBlockLength();

Result    resultIn  = session.execute(resultOut);if (resultIn.isError()) {
            throw resultIn.getException();
        }this.length = ((ResultLob) resultIn).getBlockLength();

---------------------------Clone group no  225 for hash 21edcc81c65d660b8fbc5903173cf984--------------------



columnIndex   = i;column        = range.getColumn(i);dataType      = column.getDataType();

columnIndex   = i;column        = range.getColumn(i);dataType      = column.getDataType();

---------------------------Clone group no  226 for hash 9d8180149499060dc8ec9c388dea1f1d--------------------



break;default :throw Error.runtimeError(ErrorCode.U_S0500, \"Expression\");

break;default :throw Error.runtimeError(ErrorCode.U_S0500, \"Expression\");

break;default :throw Error.runtimeError(ErrorCode.U_S0500, \"Expression\");

break;default :throw Error.runtimeError(ErrorCode.U_S0500, \"Expression\");

---------------------------Clone group no  227 for hash 1a60748aaf63bf21cfff645a2c62dda8--------------------



sb.append(' ').append(Tokens.T_TO).append(' ');sb.append(getName().getStatementName());list.add(sb.toString());

sb.append(' ').append(Tokens.T_TO).append(' ');sb.append(getName().getStatementName());list.add(sb.toString());

---------------------------Clone group no  228 for hash f98024dd693d6c442f60f999b42f1a01--------------------



Expression temp = nodes[LEFT];nodes[LEFT]  = nodes[RIGHT];nodes[RIGHT] = temp;

Expression temp = nodes[LEFT];nodes[LEFT]  = nodes[RIGHT];nodes[RIGHT] = temp;

---------------------------Clone group no  229 for hash 64003d0392c13ae462ea9740042704b3--------------------



nodes                = new Expression[BINARY];nodes[LEFT]          = e;nodes[LEFT].dataType = e.dataType;

nodes                = new Expression[BINARY];nodes[LEFT]          = e;nodes[LEFT].dataType = e.dataType;

---------------------------Clone group no  230 for hash b561f69c2db36ed717b61a199b0dce19--------------------



row[specific_catalog] = database.getCatalogName().name;row[specific_schema]  = refName.schema.name;row[specific_name]    = refName.name;try {
                    t.insertSys(session, store, row);
                } catch (HsqlException e) {}

row[specific_catalog] = database.getCatalogName().name;row[specific_schema]  = refName.schema.name;row[specific_name]    = refName.name;try {
                    t.insertSys(session, store, row);
                } catch (HsqlException e) {}

---------------------------Clone group no  231 for hash b8b519bae97717c137cdf2ab05dc41fa--------------------



Expression e = XreadDateTimeIntervalTerm();while (true) {
            int type;

            if (token.tokenType == Tokens.PLUS) {
                type = OpTypes.ADD;
            } else if (token.tokenType == Tokens.MINUS) {
                type = OpTypes.SUBTRACT;
            } else {
                break;
            }

            read();

            Expression a = e;

            e = XreadDateTimeIntervalTerm();
            e = new ExpressionArithmetic(type, a, e);
        }return e;

Expression e = XreadDateTimeIntervalTerm();while (true) {
            int type;

            if (token.tokenType == Tokens.PLUS) {
                type = OpTypes.ADD;
            } else if (token.tokenType == Tokens.MINUS) {
                type = OpTypes.SUBTRACT;
            } else {
                break;
            }

            read();

            Expression a = e;

            e = XreadDateTimeIntervalTerm();
            e = new ExpressionArithmetic(type, a, e);
        }return e;

---------------------------Clone group no  232 for hash aaa8935fe74a487338ba7218a77818de--------------------



case Tokens.WITH :case Tokens.SELECT :case Tokens.TABLE :

case Tokens.WITH :case Tokens.SELECT :case Tokens.TABLE :

---------------------------Clone group no  233 for hash 0698271eee1f06304c3c5704f37e375a--------------------



Table      t = c.getMain();if (t != table) {
                tableSet.add(t);
            }t = c.getRef();if (t != table) {
                tableSet.add(t);
            }constraintNameSet.add(c.getMainName());constraintNameSet.add(c.getRefName());indexNameSet.add(c.getRefIndex().getName());

Table      t = c.getMain();if (t != table) {
                        tableSet.add(t);
                    }t = c.getRef();if (t != table) {
                        tableSet.add(t);
                    }constraintNameSet.add(c.getMainName());constraintNameSet.add(c.getRefName());indexNameSet.add(c.getRefIndex().getName());

---------------------------Clone group no  234 for hash 6d22affe7bbbc078c4b1ed7e693d9e7e--------------------



break;case Tokens.MINUS :read();

break;case Tokens.MINUS :read();

---------------------------Clone group no  235 for hash af3ee0882dc72e34de13a155ef181f60--------------------



sb.append(' ').append(Tokens.T_MINVALUE).append(' ');sb.append(getMinValue());sb.append(' ').append(Tokens.T_MAXVALUE).append(' ');sb.append(getMaxValue());

sb.append(' ').append(Tokens.T_MINVALUE).append(' ');sb.append(getMinValue());sb.append(' ').append(Tokens.T_MAXVALUE).append(' ');sb.append(getMaxValue());

---------------------------Clone group no  236 for hash e824bc01faa7e3380d5a1f06b7cc9ed3--------------------



schemaToLog = table.getName().schema;writeSessionIdAndSchema(session);rowOut.reset();

schemaToLog = table.getName().schema;writeSessionIdAndSchema(session);rowOut.reset();

---------------------------Clone group no  237 for hash 68ea1612375f89365ca3d05d1399835f--------------------



NodeAVLDiskLarge node = this;RowAVLDisk  row  = this.row;if (!row.keepInMemory(true)) {
            row  = (RowAVLDisk) store.get(this.row, true);
            node = (NodeAVLDiskLarge) row.getNode(iId);
        }

NodeAVLDiskLarge node = this;RowAVLDisk  row  = this.row;if (!row.keepInMemory(true)) {
            row  = (RowAVLDisk) store.get(this.row, true);
            node = (NodeAVLDiskLarge) row.getNode(iId);
        }

NodeAVLDiskLarge node = this;RowAVLDisk  row  = this.row;if (!row.keepInMemory(true)) {
            row  = (RowAVLDisk) store.get(this.row, true);
            node = (NodeAVLDiskLarge) row.getNode(iId);
        }

NodeAVLDiskLarge node = this;RowAVLDisk  row  = this.row;if (!row.keepInMemory(true)) {
            row  = (RowAVLDisk) store.get(this.row, true);
            node = (NodeAVLDiskLarge) row.getNode(iId);
        }

NodeAVLDiskLarge node = this;RowAVLDisk  row  = this.row;if (!row.keepInMemory(true)) {
            row  = (RowAVLDisk) store.get(this.row, true);
            node = (NodeAVLDiskLarge) row.getNode(iId);
        }

---------------------------Clone group no  238 for hash 95c04d10e93e235a62f23d9d49fdb204--------------------



DirectoryBlockCachedObject directory;int                        indexInRoot = fileBlockIndex / blockSize;long position = rootBlock.getIntArray()[indexInRoot];

DirectoryBlockCachedObject directory;int                        indexInRoot = fileBlockIndex / blockSize;long position = rootBlock.getIntArray()[indexInRoot];

---------------------------Clone group no  239 for hash 9302a743dacc168d5d743f5d92a0fbb7--------------------



logger.releaseLock();setState(DATABASE_SHUTDOWN);clearStructures();DatabaseManager.removeDatabase(this);

logger.releaseLock();setState(DATABASE_SHUTDOWN);clearStructures();// fredt - this could change to avoid removing a db from the
        // DatabaseManager repository if there are pending getDatabase()
        // calls
        DatabaseManager.removeDatabase(this);

---------------------------Clone group no  240 for hash 021fd41543d564cf1647303c932e73d0--------------------



// column number mappings
        final int specific_catalog = 0;final int specific_schema  = 1;final int specific_name    = 2;final int routine_catalog  = 3;final int routine_schema   = 4;final int routine_name     = 5;

// column number mappings
        final int specific_catalog = 0;final int specific_schema  = 1;final int specific_name    = 2;final int routine_catalog  = 3;final int routine_schema   = 4;final int routine_name     = 5;

// column number mappings
        final int specific_catalog = 0;final int specific_schema  = 1;final int specific_name    = 2;final int routine_catalog  = 3;final int routine_schema   = 4;final int routine_name     = 5;

// column number mappings
        final int specific_catalog                       = 0;final int specific_schema                        = 1;final int specific_name                          = 2;final int routine_catalog                        = 3;final int routine_schema                         = 4;final int routine_name                           = 5;

---------------------------Clone group no  241 for hash 68c55954ee046d9f5ee1a9388c41e521--------------------



java.sql.Time     insertTime;Connection        connection = super.newConnection();PreparedStatement insertStatement;int               iUpdateCount = 0;

java.sql.Time     insertTime;Connection        connection = super.newConnection();PreparedStatement insertStatement;int               iUpdateCount = 0;

---------------------------Clone group no  242 for hash 782fe3ec10e087698da3e034787f4267--------------------



break;case ResultConstants.ERROR :case ResultConstants.WARNING :

break;case ResultConstants.ERROR :case ResultConstants.WARNING :

---------------------------Clone group no  243 for hash 01c53811d35c13bfdedcb05d4deb79fe--------------------



currentArg = arg[i];lowerArg   = arg[i].toLowerCase();if (lowerArg.startsWith(\"--\")) {
                lowerArg = lowerArg.substring(1);
            }if (lowerArg.equals(\"-noexit\") || lowerArg.equals(\"-help\")) {

                //
            } else if (i == arg.length - 1) {
                throw new IllegalArgumentException(\"No value for argument \"
                                                   + currentArg);
            }i++;

currentArg = arg[i];lowerArg = arg[i].toLowerCase();if (lowerArg.startsWith(\"--\")) {
                lowerArg = lowerArg.substring(1);
            }if (lowerArg.equals(\"-noexit\") || lowerArg.equals(\"-help\")) {

                //
            } else if (i == arg.length - 1) {
                throw new IllegalArgumentException(\"No value for argument \"
                                                   + currentArg);
            }i++;

---------------------------Clone group no  244 for hash 3bbc1fe291f64fa058e7a9d9128241e6--------------------



if (c == null) {
                break;
            }nodeData = c.getData(store);if (compareRow(session, data, nodeData) == 0) {
                row = c.getRow(store);

                session.database.txManager.setTransactionInfo(store, row);

                if (session.database.txManager.canRead(
                        session, store, row, TransactionManager.ACTION_DUP,
                        null)) {
                    return true;
                }

                continue;
            }break;

if (c == null) {
                break;
            }nodeData = c.getData(store);if (compareRow(session, data, nodeData) == 0) {
                row = c.getRow(store);

                session.database.txManager.setTransactionInfo(store, row);

                if (session.database.txManager.canRead(
                        session, store, row, TransactionManager.ACTION_DUP,
                        null)) {
                    return true;
                }

                continue;
            }break;

---------------------------Clone group no  245 for hash 79746d53f17653c9b3eb54a6fcf04c16--------------------



value = null;break;default :it = conditions[condIndex].rangeIndex
                                    .emptyIterator();return;

value = null;break;default :it = conditions[condIndex].rangeIndex
                                    .emptyIterator();return;

---------------------------Clone group no  246 for hash a0e0db75629d5312f3b42adcc4fa4ebb--------------------



break;default :throw Error.runtimeError(ErrorCode.U_S0500,
                                         \"StatementSession\");

break;default :throw Error.runtimeError(ErrorCode.U_S0500,
                                         \"StatementSession\");

---------------------------Clone group no  247 for hash c14f8db8271b2f19d6dd927dbf71ec64--------------------



write('\\'');writeBytes(type.convertToString(o));write('\\'');

write('\\'');writeBytes(type.convertToString(o));write('\\'');

---------------------------Clone group no  248 for hash 39c36c8d21801d9a123d2d9d607cff1a--------------------



checkSelects();checkUpdates();sw.zero();

//            sStatement.execute(\"SET WRITE_DELAY \" + writeDelay);
            checkSelects();checkUpdates();sw.zero();

---------------------------Clone group no  249 for hash 35be1bc6b9e91458835dd4e46cb84d6f--------------------



assertFalse(\"Too many rows fetched\", rs.next());rs.close();verifySimpleQueryOutput(); // Verify server state still good

assertFalse(\"Too many rows fetched\", rs.next());rs.close();verifySimpleQueryOutput(); // Verify server state still good

---------------------------Clone group no  250 for hash 4aeecf9a2d04ac4f54600568bf800e1d--------------------



int hash = (int) longKey;if (isObjectKey) {
            if (objectKey == null) {
                return null;
            }

            if (comparator == null) {
                hash = objectKey.hashCode();
            } else {
                hash = comparator.hashCode(objectKey);
            }
        }int    index       = hashIndex.getHashIndex(hash);int    lookup      = hashIndex.hashTable[index];int    lastLookup  = -1;Object returnValue = null;

int hash = (int) longKey;if (isObjectKey) {
            if (objectKey == null) {
                return null;
            }

            if (comparator == null) {
                hash = objectKey.hashCode();
            } else {
                hash = comparator.hashCode(objectKey);
            }
        }int     index       = hashIndex.getHashIndex(hash);int     lookup      = hashIndex.hashTable[index];int     lastLookup  = -1;Object  returnValue = null;

---------------------------Clone group no  251 for hash e9ebc3d9c2d003dd12ea352302fddf3d--------------------



case OpTypes.MULTICOLUMN :case OpTypes.DYNAMIC_PARAM :case OpTypes.ASTERISK :case OpTypes.SIMPLE_COLUMN :

case OpTypes.MULTICOLUMN :case OpTypes.DYNAMIC_PARAM :case OpTypes.ASTERISK :case OpTypes.SIMPLE_COLUMN :

---------------------------Clone group no  252 for hash aec3f6f06a0baae383f3a30d6fb67ed2--------------------



int low     = 0;int high    = count;int mid     = 0;int compare = 0;

int low     = 0;int high    = count;int mid     = 0;int compare = 0;

int low     = 0;int high    = count;int mid     = 0;int compare = 0;

---------------------------Clone group no  253 for hash 8bc32c339b1a5a27250c72575fa23198--------------------



prep.setTimestamp(2, now);    // last_updatefor (int ii = 0; ii < DECIMAL_FIELDS_PER_DATASET; ii++) {
            prep.setDouble(ii + 3, 0.123456789);    // Wert
        }prep.addBatch();

prep.setTimestamp(2, now);    // last_updatefor (int ii = 0; ii < DECIMAL_FIELDS_PER_DATASET; ii++) {
            prep.setDouble(ii + 3, 0.123456789);    // Wert
        }prep.addBatch();

---------------------------Clone group no  254 for hash a2e92555a915cf2551f15df0b0f2b20c--------------------



nodes                = new Expression[UNARY];nodes[LEFT] = new ExpressionOp(OpTypes.ZONE_MODIFIER, e, null);nodes[LEFT].dataType = e.dataType;

nodes                = new Expression[UNARY];nodes[LEFT] = new ExpressionOp(OpTypes.ZONE_MODIFIER, e, null);nodes[LEFT].dataType = e.dataType;

---------------------------Clone group no  255 for hash f23cc24a988fabf8fe1ad6a244e5c440--------------------



Result result;try {
            result = getResult(session);
        } catch (Throwable t) {
            result = Result.newErrorResult(t, null);
        }if (result.isError()) {
            result.getException().setStatementType(group, type);

            return result;
        }try {
            if (isLogged) {
                session.database.logger.writeOtherStatement(session, sql);
            }
        } catch (Throwable e) {
            return Result.newErrorResult(e, sql);
        }return result;

Result result;try {
            result = getResult(session);
        } catch (Throwable t) {
            result = Result.newErrorResult(t, null);
        }if (result.isError()) {
            result.getException().setStatementType(group, type);

            return result;
        }try {
            if (isLogged) {
                session.database.logger.writeOtherStatement(session, sql);
            }
        } catch (Throwable e) {
            return Result.newErrorResult(e, sql);
        }return result;

---------------------------Clone group no  256 for hash 57cc943c0b62e725cc3ec1622c85d881--------------------



final int character_set_catalog      = 16;final int character_set_schema       = 17;final int character_set_name         = 18;final int collation_catalog          = 19;final int collation_schema           = 20;final int collation_name             = 21;

final int character_set_catalog                  = 16;final int character_set_schema                   = 17;final int character_set_name                     = 18;final int collation_catalog                      = 19;final int collation_schema                       = 20;final int collation_name                         = 21;

---------------------------Clone group no  257 for hash e5c953bb09d722408d5d4505762705bc--------------------



read();scale = readInteger();if (scale < 0) {
                    throw Error.error(ErrorCode.X_42592);
                }

read();scale = readInteger();if (scale < 0) {
                throw Error.error(ErrorCode.X_42592);
            }

---------------------------Clone group no  258 for hash 1bd34d4a3a2116e38a4bd423907793e6--------------------



pw.println(\"allow 0.0.0.0/0\");pw.close();acls.add(new ServerAcl(file));

pw.println(\"allow 0.0.0.0/0\");pw.close();acls.add(new ServerAcl(file));

---------------------------Clone group no  259 for hash 74639a3cdd6417b65cae013170c9b57a--------------------



Connection Conn = connect(url, user, password);String     s    = Conn.getMetaData().getDatabaseProductName();System.out.println(\"DBMS: \" + s);

Connection Conn = connect(url, user, password);String     s    = Conn.getMetaData().getDatabaseProductName();System.out.println(\"DBMS: \" + s);

---------------------------Clone group no  260 for hash fb6c1e67bc8c5690599aaa87e45cea89--------------------



addColumn(t, \"EVENT_OBJECT_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"EVENT_OBJECT_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"EVENT_OBJECT_TABLE\", SQL_IDENTIFIER);

addColumn(t, \"EVENT_OBJECT_CATALOG\", SQL_IDENTIFIER);    // not nulladdColumn(t, \"EVENT_OBJECT_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"EVENT_OBJECT_TABLE\", SQL_IDENTIFIER);

---------------------------Clone group no  261 for hash 814bcd8058bc501f56548974c7ff02cb--------------------



Schema schema = (Schema) schemas.next();if (SqlInvariants.isLobsSchemaName(schema.getName().name)) {
                    continue;
                }if (SqlInvariants.isSystemSchemaName(schema.getName().name)) {
                    continue;
                }

Schema schema = (Schema) schemas.next();if (SqlInvariants.isLobsSchemaName(schema.getName().name)) {
                    continue;
                }if (SqlInvariants.isSystemSchemaName(schema.getName().name)) {
                    continue;
                }

---------------------------Clone group no  262 for hash fc1ac96f8dc393beaee4728ba98c3fd1--------------------



//
        Iterator it;Object[] row;return t;

//
        Iterator it;Object[] row;return t;

---------------------------Clone group no  263 for hash 11240bd98b5147bc261b2b6c130cfd7f--------------------



if (!JDBCClobClient.isInLimits(data.length, position, count)) {
            throw JDBCUtil.outOfRangeArgument();
        }Type[] types = new Type[2];types[0] = Type.SQL_INTEGER;types[1] = elementType;ResultMetaData meta = ResultMetaData.newSimpleResultMetaData(types);meta.columnLabels = new String[] {
            \"C1\", \"C2\"
        };meta.colIndexes   = new int[] {
            -1, -1
        };meta.columns      = new ColumnBase[2];

if (!JDBCClobClient.isInLimits(data.length, position, count)) {
            throw JDBCUtil.outOfRangeArgument();
        }Type[] types = new Type[2];types[0] = Type.SQL_INTEGER;types[1] = elementType;ResultMetaData meta = ResultMetaData.newSimpleResultMetaData(types);meta.columnLabels = new String[] {
            \"C1\", \"C2\"
        };meta.colIndexes   = new int[] {
            -1, -1
        };meta.columns      = new ColumnBase[2];

---------------------------Clone group no  264 for hash 5db064b336fc5e7665a6f87622bba2a7--------------------



//
        int  bufferLength  = session.getStreamBlockSize();long currentOffset = blockOffset;dataOut.writeByte(mode);dataOut.writeInt(databaseID);dataOut.writeLong(sessionID);dataOut.writeLong(lobID);dataOut.writeInt(subType);HsqlByteArrayOutputStream byteArrayOS =
            new HsqlByteArrayOutputStream(bufferLength);byteArrayOS.reset();

//
        int  bufferLength  = session.getStreamBlockSize();long currentOffset = blockOffset;dataOut.writeByte(mode);dataOut.writeInt(databaseID);dataOut.writeLong(sessionID);dataOut.writeLong(lobID);dataOut.writeInt(subType);HsqlByteArrayOutputStream byteArrayOS =
            new HsqlByteArrayOutputStream(bufferLength);byteArrayOS.reset();

---------------------------Clone group no  265 for hash db172e805d3d70b634f3efe576c077dd--------------------



addColumn(t, \"GRANTOR\", SQL_IDENTIFIER);        // not nulladdColumn(t, \"GRANTEE\", SQL_IDENTIFIER);        // not nulladdColumn(t, \"OBJECT_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"OBJECT_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"OBJECT_NAME\", SQL_IDENTIFIER);    // not nulladdColumn(t, \"OBJECT_TYPE\", CHARACTER_DATA);    // not nulladdColumn(t, \"PRIVILEGE_TYPE\", CHARACTER_DATA);addColumn(t, \"IS_GRANTABLE\", YES_OR_NO);        // not null

addColumn(t, \"GRANTOR\", SQL_IDENTIFIER);        // not nulladdColumn(t, \"GRANTEE\", SQL_IDENTIFIER);        // not nulladdColumn(t, \"OBJECT_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"OBJECT_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"OBJECT_NAME\", SQL_IDENTIFIER);    // not nulladdColumn(t, \"OBJECT_TYPE\", CHARACTER_DATA);    // not nulladdColumn(t, \"PRIVILEGE_TYPE\", CHARACTER_DATA);addColumn(t, \"IS_GRANTABLE\", YES_OR_NO);        // not null

---------------------------Clone group no  266 for hash d783c1986d6c82b2fc23f8154a398107--------------------



case Types.TINYINT :case Types.SQL_SMALLINT :case Types.SQL_INTEGER :

case Types.TINYINT :case Types.SQL_SMALLINT :case Types.SQL_INTEGER :

case Types.TINYINT :case Types.SQL_SMALLINT :case Types.SQL_INTEGER :

case Types.TINYINT :case Types.SQL_SMALLINT :case Types.SQL_INTEGER :

case Types.TINYINT :case Types.SQL_SMALLINT :case Types.SQL_INTEGER :

case Types.TINYINT :case Types.SQL_SMALLINT :case Types.SQL_INTEGER :

case Types.TINYINT :case Types.SQL_SMALLINT :case Types.SQL_INTEGER :

case Types.TINYINT :case Types.SQL_SMALLINT :case Types.SQL_INTEGER :

case Types.TINYINT :case Types.SQL_SMALLINT :case Types.SQL_INTEGER :

case Types.TINYINT :case Types.SQL_SMALLINT :case Types.SQL_INTEGER :

case Types.TINYINT :case Types.SQL_SMALLINT :case Types.SQL_INTEGER :

case Types.TINYINT :case Types.SQL_SMALLINT :case Types.SQL_INTEGER :

case Types.TINYINT :case Types.SQL_SMALLINT :case Types.SQL_INTEGER :

case Types.TINYINT :case Types.SQL_SMALLINT :case Types.SQL_INTEGER :

case Types.TINYINT :case Types.SQL_SMALLINT :case Types.SQL_INTEGER :

case Types.TINYINT :case Types.SQL_SMALLINT :case Types.SQL_INTEGER :

case Types.TINYINT :case Types.SQL_SMALLINT :case Types.SQL_INTEGER :

case Types.TINYINT :case Types.SQL_SMALLINT :case Types.SQL_INTEGER :

case Types.TINYINT :case Types.SQL_SMALLINT :case Types.SQL_INTEGER :

case Types.TINYINT :case Types.SQL_SMALLINT :case Types.SQL_INTEGER :

case Types.TINYINT :case Types.SQL_SMALLINT :case Types.SQL_INTEGER :

case Types.TINYINT :case Types.SQL_SMALLINT :case Types.SQL_INTEGER :

case Types.TINYINT :case Types.SQL_SMALLINT :case Types.SQL_INTEGER :

case Types.TINYINT :case Types.SQL_SMALLINT :case Types.SQL_INTEGER :

case Types.TINYINT :case Types.SQL_SMALLINT :case Types.SQL_INTEGER :

case Types.TINYINT :case Types.SQL_SMALLINT :case Types.SQL_INTEGER :

case Types.TINYINT :case Types.SQL_SMALLINT :case Types.SQL_INTEGER :

case Types.TINYINT :case Types.SQL_SMALLINT :case Types.SQL_INTEGER :

case Types.TINYINT :case Types.SQL_SMALLINT :case Types.SQL_INTEGER :

---------------------------Clone group no  267 for hash 7db287d904e35602917cde92d8bba165--------------------



case Tokens.COLON :read();if (token.tokenType == Tokens.X_DELIMITED_IDENTIFIER
                        || token.tokenType == Tokens.X_IDENTIFIER) {}
                else {
                    throw unexpectedToken(Tokens.T_COLON);
                }// fall through
            case Tokens.QUESTION :ExpressionColumn p =
                    new ExpressionColumn(OpTypes.DYNAMIC_PARAM);compileContext.addParameter(p, getPosition());read();return p;

case Tokens.COLON :read();if (token.tokenType == Tokens.X_DELIMITED_IDENTIFIER
                        || token.tokenType == Tokens.X_IDENTIFIER) {}
                else {
                    throw unexpectedToken(Tokens.T_COLON);
                }// fall through
            case Tokens.QUESTION :ExpressionColumn p =
                    new ExpressionColumn(OpTypes.DYNAMIC_PARAM);compileContext.addParameter(p, getPosition());read();return p;

---------------------------Clone group no  268 for hash dafbde9966f050db51ddcf94b94c6cda--------------------



TimeData ti = (TimeData) a;long seconds = session.getCurrentDate().getSeconds()
                                       + ti.getSeconds()
                                       - session.getZoneSeconds();return new TimestampData(seconds,
                                                 scaleNanos(ti.getNanos()),
                                                 session.getZoneSeconds());

TimeData ti = (TimeData) a;long seconds = session.getCurrentDate().getSeconds()
                                       + ti.getSeconds()
                                       - session.getZoneSeconds();return new TimestampData(seconds,
                                                 scaleNanos(ti.getNanos()),
                                                 session.getZoneSeconds());

---------------------------Clone group no  269 for hash 9e49d441bb6076f2247a8bf5d0a58249--------------------



addColumn(t, \"VIEW_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"VIEW_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"VIEW_NAME\", SQL_IDENTIFIER);addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);

addColumn(t, \"VIEW_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"VIEW_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"VIEW_NAME\", SQL_IDENTIFIER);     // not nulladdColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);    // not null

---------------------------Clone group no  270 for hash 6ef8a2fb1d20608f435cb65f306bc9e4--------------------



break;case LobResultTypes.REQUEST_GET_LENGTH :case LobResultTypes.REQUEST_TRUNCATE :

break;case LobResultTypes.REQUEST_GET_LENGTH :case LobResultTypes.REQUEST_TRUNCATE :

---------------------------Clone group no  271 for hash 47b04c84138d67810869d875a73560a5--------------------



sb.append(name.getSchemaQualifiedStatementName());sb.append(' ').append(Tokens.T_AS).append(' ');sb.append(dataType.getDefinition());

sb.append(name.getSchemaQualifiedStatementName());sb.append(' ').append(Tokens.T_AS).append(' ');sb.append(dataType.getDefinition());

---------------------------Clone group no  272 for hash c9d1d2fe089f161d73b483b0592a0187--------------------



dataOut.writeLong(blockOffset);dataOut.writeLong(blockLength);dataOut.writeChars(charBlock);break;

dataOut.writeLong(blockOffset);dataOut.writeLong(blockLength);dataOut.writeChars(charBlock);break;

---------------------------Clone group no  273 for hash 24a0fa08a256126bdfa03a0b5bb68208--------------------



read();checkIsSimpleName();name = token.tokenString;read();

read();checkIsSimpleName();name = token.tokenString;read();

---------------------------Clone group no  274 for hash ab48705966eb08cd4757f3c754f13d86--------------------



case SchemaObject.ROUTINE :case SchemaObject.PROCEDURE :case SchemaObject.FUNCTION :

case SchemaObject.ROUTINE :case SchemaObject.PROCEDURE :case SchemaObject.FUNCTION :

case SchemaObject.ROUTINE :case SchemaObject.PROCEDURE :case SchemaObject.FUNCTION :

---------------------------Clone group no  275 for hash 3a5adffd037d8027d73846850669a3c1--------------------



row[table_schema]     = refName.parent.schema.name;row[table_name]       = refName.parent.name;row[column_name]      = refName.name;try {
                    t.insertSys(session, store, row);
                } catch (HsqlException e) {}

row[table_schema]    = refName.parent.schema.name;row[table_name]      = refName.parent.name;row[column_name]     = refName.name;try {
                    t.insertSys(session, store, row);
                } catch (HsqlException e) {}

row[table_schema]  = refName.parent.schema.name;row[table_name]    = refName.parent.name;row[column_name]   = refName.name;try {
                    t.insertSys(session, store, row);
                } catch (HsqlException e) {}

---------------------------Clone group no  276 for hash b7a3db5bbf15623ff7564e222befd790--------------------



list[firstindex] = 0;firstindex++;if (firstindex == list.length) {
                firstindex = 0;
            }

list[firstindex] = 0;firstindex++;if (firstindex == list.length) {
                firstindex = 0;
            }

---------------------------Clone group no  277 for hash 18b2ee1a6c0ac0619090e840a47bb908--------------------



st.execute(
            \"CREATE TABLE t1 (id int not null, v1 int, v2 int, primary key(id))\");st.execute(
            \"CREATE TABLE t2 (id int not null, v1 int, v3 int, primary key(id))\");st.execute(\"INSERT INTO t1 values(1,1,1)\");st.execute(\"INSERT INTO t1 values(2,2,2)\");st.execute(\"INSERT INTO t2 values(1,3,3)\");ResultSet rs = st.executeQuery(
            \"select t as atable, a as idvalue, b as value1, c as value2, d as value3 from(\"
            + \"(select 't1' as t, t1.id as a, t1.v1 as b, t1.v2 as c, null as d from t1) union\"
            + \"(select 't2' as t, t2.id as a, t2.v1 as b, null as c, t2.v3 as d from t2)) order by atable, idvalue\");assertTrue(rs.next());assertEquals(\"t1\", rs.getObject(\"atable\"));assertEquals(1, rs.getInt(\"idvalue\"));assertEquals(1, rs.getInt(\"value1\"));assertEquals(1, rs.getInt(\"value2\"));assertEquals(null, rs.getObject(\"value3\"));assertTrue(rs.next());assertEquals(\"t1\", rs.getObject(\"atable\"));assertEquals(2, rs.getInt(\"idvalue\"));assertEquals(2, rs.getInt(\"value1\"));assertEquals(2, rs.getInt(\"value2\"));assertEquals(null, rs.getObject(\"value3\"));assertTrue(rs.next());assertEquals(\"t2\", rs.getObject(\"atable\"));assertEquals(1, rs.getInt(\"idvalue\"));assertEquals(3, rs.getInt(\"value1\"));assertEquals(null, rs.getObject(\"value2\"));assertEquals(3, rs.getInt(\"value3\"));    //this fails!assertFalse(rs.next());

st.execute(
            \"CREATE TABLE t1 (id int not null, v1 int, v2 int, primary key(id))\");st.execute(
            \"CREATE TABLE t2 (id int not null, v1 int, v3 int, primary key(id))\");st.execute(\"INSERT INTO t1 values(1,1,1)\");st.execute(\"INSERT INTO t1 values(2,2,2)\");st.execute(\"INSERT INTO t2 values(1,3,3)\");ResultSet rs = st.executeQuery(
            \"select t as atable, a as idvalue, b as value1, c as value2, d as value3 from(\"
            + \"(select 't1' as t, t1.id as a, t1.v1 as b, t1.v2 as c, null as d from t1) union\"
            + \"(select 't2' as t, t2.id as a, t2.v1 as b, null as c, t2.v3 as d from t2)) order by atable, idvalue\");assertTrue(rs.next());assertEquals(\"t1\", rs.getObject(\"atable\"));assertEquals(1, rs.getInt(\"idvalue\"));assertEquals(1, rs.getInt(\"value1\"));assertEquals(1, rs.getInt(\"value2\"));assertEquals(null, rs.getObject(\"value3\"));assertTrue(rs.next());assertEquals(\"t1\", rs.getObject(\"atable\"));assertEquals(2, rs.getInt(\"idvalue\"));assertEquals(2, rs.getInt(\"value1\"));assertEquals(2, rs.getInt(\"value2\"));assertEquals(null, rs.getObject(\"value3\"));assertTrue(rs.next());assertEquals(\"t2\", rs.getObject(\"atable\"));assertEquals(1, rs.getInt(\"idvalue\"));assertEquals(3, rs.getInt(\"value1\"));assertEquals(null, rs.getObject(\"value2\"));assertEquals(3, rs.getInt(\"value3\"));    //this fails!assertFalse(rs.next());

---------------------------Clone group no  278 for hash 88bdb8f7e7490f5b824b07035c4f3a26--------------------



treeModel.nodeStructureChanged(rootNode);treeModel.reload();tScrollPane.repaint();

treeModel.nodeStructureChanged(rootNode);treeModel.reload();tScrollPane.repaint();

---------------------------Clone group no  279 for hash 40e6dcba78171b9b06f93fa71cf29e1a--------------------



compareByUIteratorInt(uMap, hIntMap);compareByHIteratorInt(uMap, hIntMap);//
            clearByIntIterator(uMap, hIntMap);compareByUIteratorInt(uMap, hIntMap);compareByHIteratorInt(uMap, hIntMap);

compareByUIteratorInt(uMap, hIntMap);compareByHIteratorInt(uMap, hIntMap);//
            clearByIntIterator(uMap, hIntMap);compareByUIteratorInt(uMap, hIntMap);compareByHIteratorInt(uMap, hIntMap);

---------------------------Clone group no  280 for hash 85cec695c594f24591a29d311591ee4f--------------------



int i = 0;       /* index in packed string  */int j = offset;  /* index in unpacked array */int l = packed.length();while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }return j;

int i = 0;       /* index in packed string  */int j = offset;  /* index in unpacked array */int l = packed.length();while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }return j;

---------------------------Clone group no  281 for hash f31e86b38bf52382b3235521c5b7d220--------------------



if (read == -1) {
                break;
            }left  -= read;count += read;

if (read == -1) {
                break;
            }left  -= read;count += read;

---------------------------Clone group no  282 for hash 34daa09043e1994721d7fff5d7f09331--------------------



if (key == null) {
            throw new NoSuchElementException();
        }int hash   = key.hashCode();int lookup = getLookup(key, hash);

if (key == null) {
            throw new NoSuchElementException();
        }int hash   = key.hashCode();int lookup = getLookup(key, hash);

if (key == null) {
            throw new NoSuchElementException();
        }int hash   = key.hashCode();int lookup = getLookup(key, hash);

if (key == null) {
            throw new NoSuchElementException();
        }int hash   = key.hashCode();int lookup = getLookup(key, hash);

if (key == null) {
            throw new NoSuchElementException();
        }int hash   = key.hashCode();int lookup = getLookup(key, hash);

if (key == null) {
            throw new NoSuchElementException();
        }int hash   = key.hashCode();int lookup = getLookup(key, hash);

---------------------------Clone group no  283 for hash 7070eb9a2a23e89eec8063c6a26cf98c--------------------



int v = iY / iRowHeight,
            h = iHeight / iRowHeight;sbVert.setValues(v, h, 0, iRowCount + 1);iX = sbHoriz.getValue();iY = iRowHeight * sbVert.getValue();

int v = iY / iRowHeight,
            h = iHeight / iRowHeight;sbVert.setValues(v, h, 0, iRowCount + 1);iX = sbHoriz.getValue();iY = iRowHeight * sbVert.getValue();

---------------------------Clone group no  284 for hash 484044191e12e9c25d34a33b291d74cc--------------------



list.add(sb.toString());sb.setLength(0);sb.append(\"SET DATABASE \").append(Tokens.T_DEFAULT).append(' ');

list.add(sb.toString());sb.setLength(0);sb.append(\"SET DATABASE \").append(Tokens.T_DEFAULT).append(' ');

---------------------------Clone group no  285 for hash 2b3a38d548236478fd4b22beede44cbf--------------------



row                   = t.getEmptyRowData();row[table_catalog]    = database.getCatalogName().name;row[table_schema]     = name.schema.name;

row = t.getEmptyRowData();row[table_catalog] =
                                database.getCatalogName().name;row[table_schema]       = name.schema.name;

---------------------------Clone group no  286 for hash 55aa021842115ae8e180139f158d3b4d--------------------



sql = getStatement(position,
                                               startStatementTokensSchema);cs = new StatementSchema(sql, statementType);break;

sql = getStatement(position,
                                               startStatementTokensSchema);cs = new StatementSchema(sql, statementType);break;

sql = getStatement(position,
                                               startStatementTokensSchema);cs = new StatementSchema(sql, statementType);break;

sql = getStatement(position,
                                               startStatementTokensSchema);cs = new StatementSchema(sql, statementType);break;

sql = getStatement(position,
                                               startStatementTokensSchema);cs = new StatementSchema(sql, statementType);break;

---------------------------Clone group no  287 for hash 3144697776f7c0e7db79543fc8980e41--------------------



RowSetNavigatorClient navigator = new RowSetNavigatorClient();for (int i = (int) position; i < position + count; i++) {
            Object[] rowData = new Object[2];

            rowData[0] = Integer.valueOf(i + 1);
            rowData[1] = data[i];

            navigator.add(rowData);
        }Result result = Result.newDataResult(meta);result.setNavigator(navigator);return result;

RowSetNavigatorClient navigator = new RowSetNavigatorClient();for (int i = (int) position; i < position + count; i++) {
            Object[] rowData = new Object[2];

            rowData[0] = Integer.valueOf(i + 1);
            rowData[1] = data[i];

            navigator.add(rowData);
        }Result result = Result.newDataResult(meta);result.setNavigator(navigator);return result;

---------------------------Clone group no  288 for hash 3e46fa0833f336346b5905c93f8e5f26--------------------



int      zoneOffset = 0;Calendar calendar   = cal == null ? session.getCalendar()
                : cal;millis = HsqlDateTime.convertMillisFromCalendar(calendar, millis);

int      zoneOffset = 0;Calendar calendar   = cal == null ? session.getCalendar()
                : cal;millis = HsqlDateTime.convertMillisFromCalendar(calendar, millis);

---------------------------Clone group no  289 for hash ca0fbdf840dc0a6b674021e29edf2d10--------------------



if (token.tokenType == Tokens.BY) {
                read();
                readThis(Tokens.DEFAULT);
            } else {
                readThis(Tokens.ALWAYS);

                generatedAlways = true;
            }readThis(Tokens.AS);readThis(Tokens.IDENTITY);

if (token.tokenType == Tokens.BY) {
            read();
            readThis(Tokens.DEFAULT);
        } else {
            readThis(Tokens.ALWAYS);

            generatedAlways = true;
        }readThis(Tokens.AS);readThis(Tokens.IDENTITY);

---------------------------Clone group no  290 for hash 0c55bfec3e4a3a303cf176c7c80c17f3--------------------



// column number mappings
        final int specific_catalog = 0;final int specific_schema  = 1;final int specific_name    = 2;final int routine_catalog  = 3;final int routine_schema   = 4;final int routine_name     = 5;final int table_catalog    = 6;final int table_schema     = 7;final int table_name       = 8;

// column number mappings
        final int specific_catalog = 0;final int specific_schema  = 1;final int specific_name    = 2;final int routine_catalog  = 3;final int routine_schema   = 4;final int routine_name     = 5;final int table_catalog    = 6;final int table_schema     = 7;final int table_name       = 8;

---------------------------Clone group no  291 for hash 0c0f8e1863054ca78fe81bcb4da01e55--------------------



if (nodes[0].dataType == null) {
                    nodes[0].dataType = Type.SQL_DOUBLE;
                }if (nodes[1].dataType == null) {
                    nodes[1].dataType = Type.SQL_VARCHAR;
                }if (!nodes[0].dataType.isNumberType()) {
                    throw Error.error(ErrorCode.X_42563);
                }if (!nodes[1].dataType.isCharacterType()) {
                    throw Error.error(ErrorCode.X_42563);
                }

if (nodes[0].dataType == null) {
                    nodes[0].dataType = Type.SQL_DOUBLE;
                }if (nodes[1].dataType == null) {
                    nodes[1].dataType = Type.SQL_VARCHAR;
                }if (!nodes[0].dataType.isNumberType()) {
                    throw Error.error(ErrorCode.X_42563);
                }if (!nodes[1].dataType.isCharacterType()) {
                    throw Error.error(ErrorCode.X_42563);
                }

---------------------------Clone group no  292 for hash 4f69b9a336c036ba3e90c552a19a813b--------------------



Statement statement = jdbcConnection.createStatement();ResultSet results   = statement.executeQuery(sql);int       rowCount  = 0;

Statement statement = jdbcConnection.createStatement();ResultSet results   = statement.executeQuery(sql);int       rowCount  = 0;

---------------------------Clone group no  293 for hash 3a9dbfc035bd9eb3a3fb541a3f9e67ff--------------------



Query = \"DROP TABLE history\";Stmt.execute(Query);Stmt.clearWarnings();Query = \"DROP TABLE accounts\";Stmt.execute(Query);Stmt.clearWarnings();Query = \"DROP TABLE tellers\";Stmt.execute(Query);Stmt.clearWarnings();Query = \"DROP TABLE branches\";Stmt.execute(Query);Stmt.clearWarnings();

Query = \"DROP TABLE history\";Stmt.execute(Query);Stmt.clearWarnings();Query = \"DROP TABLE accounts\";Stmt.execute(Query);Stmt.clearWarnings();Query = \"DROP TABLE tellers\";Stmt.execute(Query);Stmt.clearWarnings();Query = \"DROP TABLE branches\";Stmt.execute(Query);Stmt.clearWarnings();

---------------------------Clone group no  294 for hash 33c74789265d9dc33cb2ed3d920e17ec--------------------



int r = randomgen.nextInt(sNumeric.length);doubleIntLookup.findFirstEqualKeyIndex(r);dummy += r;

int r = randomgen.nextInt(sNumeric.length);doubleIntLookup.findFirstEqualKeyIndex(r);dummy += r;

---------------------------Clone group no  295 for hash 4cc0fc9ee5fe7067095d7cb14990e033--------------------



String SeqName = new String(\"_\" + columnDesc.getString(4)
                                        + \"_seq\");int spaceleft = 31 - SeqName.length();if (t.Stmts.sDestTable.length() > spaceleft) {
                SeqName = t.Stmts.sDestTable.substring(0, spaceleft)
                          + SeqName;
            } else {
                SeqName = t.Stmts.sDestTable + SeqName;
            }String DropSequence = \"DROP SEQUENCE \" + SeqName + \";\";t.Stmts.sDestDrop += DropSequence;

String SeqName = new String(\"_\" + columnDesc.getString(4)
                                        + \"_seq\");int spaceleft = 31 - SeqName.length();if (t.Stmts.sDestTable.length() > spaceleft) {
                SeqName = t.Stmts.sDestTable.substring(0, spaceleft)
                          + SeqName;
            } else {
                SeqName = t.Stmts.sDestTable + SeqName;
            }String DropSequence = \"DROP SEQUENCE \" + SeqName + \";\";t.Stmts.sDestDrop += DropSequence;

---------------------------Clone group no  296 for hash 571bdbc1d8fbf7ab492d926bcb0b7573--------------------



ResultLob resultOut = ResultLob.newLobTruncateRequest(id, len);Result    resultIn  = session.execute(resultOut);if (resultIn.isError()) {
            throw resultIn.getException();
        }

ResultLob resultOut = ResultLob.newLobTruncateRequest(id, len);Result    resultIn  = session.execute(resultOut);if (resultIn.isError()) {
            throw resultIn.getException();
        }

---------------------------Clone group no  297 for hash b4f145d8bff7c76a6337f0316792ccfe--------------------



PreparedStatement ps = null;ResultSet rs = null;Timestamp aTimestamp = Timestamp.valueOf(\"2009-03-27 17:18:19\");

PreparedStatement ps = null;ResultSet rs = null;Timestamp aTimestamp = Timestamp.valueOf(\"2009-03-27 17:18:19\");

---------------------------Clone group no  298 for hash dfd35d51ccbb70df8f67eab3a5f604e2--------------------



char c = s.charAt(j);if (c == ' ') {
                continue;
            }n = getNibble(c);

char c = s.charAt(j);if (c == ' ') {
                continue;
            }n = getNibble(c);

---------------------------Clone group no  299 for hash 99697952bf744b9beaccc21ca4059640--------------------



String csn = charsetName;if (csn == null) {
            csn = Charset.defaultCharset().name();
        }try {
            if (Charset.isSupported(csn)) {
                return Charset.forName(csn);
            }
        } catch (IllegalCharsetNameException x) {
        }

String csn = charsetName;if (csn == null) {
            csn = Charset.defaultCharset().name();
        }try {
            if (Charset.isSupported(csn)) {
                return Charset.forName(csn);
            }
        } catch (IllegalCharsetNameException x) {}

---------------------------Clone group no  300 for hash fc35448df9057287868027b196736fa9--------------------



case OpTypes.STDDEV_POP :case OpTypes.STDDEV_SAMP :case OpTypes.VAR_POP :case OpTypes.VAR_SAMP :

case OpTypes.STDDEV_POP :case OpTypes.STDDEV_SAMP :case OpTypes.VAR_POP :case OpTypes.VAR_SAMP :

case OpTypes.STDDEV_POP :case OpTypes.STDDEV_SAMP :case OpTypes.VAR_POP :case OpTypes.VAR_SAMP :

case OpTypes.STDDEV_POP :case OpTypes.STDDEV_SAMP :case OpTypes.VAR_POP :case OpTypes.VAR_SAMP :

case OpTypes.STDDEV_POP :case OpTypes.STDDEV_SAMP :case OpTypes.VAR_POP :case OpTypes.VAR_SAMP :

---------------------------Clone group no  301 for hash fe7f83cc8c02a15635e7205f1f8b2e8d--------------------



set        = schema.indexLookup;objectName = set.getName(name);if (objectName == null) {
                        return null;
                    }table =
                        (Table) schema.tableList.get(objectName.parent.name);

set        = schema.indexLookup;objectName = set.getName(name);if (objectName == null) {
                        return null;
                    }table =
                        (Table) schema.tableList.get(objectName.parent.name);

---------------------------Clone group no  302 for hash 70efff8fdf3d54162e9b0378df8c7553--------------------



int aIndex  = 0;int bOffset = 0;int aOffset = 0;

int aIndex  = 0;int bOffset = 0;int aOffset = 0;

---------------------------Clone group no  303 for hash 132d6f03db9fd5fbad39b998ad7ae6f2--------------------



readThis(Tokens.ON);readThis(Tokens.NULL);readThis(Tokens.INPUT);

readThis(Tokens.ON);readThis(Tokens.NULL);readThis(Tokens.INPUT);

---------------------------Clone group no  304 for hash 156aabffc93088fac8f2d636d5bdfd47--------------------



// calculated column values
        String  tableCatalog;String  tableSchema;String  tableName;Grantee granteeObject;

// calculated column values
        String  tableCatalog;String  tableSchema;String  tableName;Grantee granteeObject;

---------------------------Clone group no  305 for hash 6bd23ed8592f02acf0a7ac782ca722df--------------------



Schema schema = (Schema) schemaMap.get(schemaName);if (schema != null) {
                SchemaObject object = schema.typeLookup.getObject(name);

                if (object != null) {
                    return (Type) object;
                }
            }if (raise) {
                throw Error.error(ErrorCode.X_42501, name);
            }return null;

Schema schema = (Schema) schemaMap.get(schemaName);if (schema != null) {
                SchemaObject object = schema.typeLookup.getObject(name);

                if (object != null) {
                    return (Type) object;
                }
            }if (raise) {
                throw Error.error(ErrorCode.X_42501, name);
            }return null;

---------------------------Clone group no  306 for hash 3e3fcbd4d5cc14d7f65f2da3c7609bd5--------------------



case StatementTypes.SET_CONNECTION :case StatementTypes.SET_CONSTRAINT :case StatementTypes.SET_DESCRIPTOR :

case StatementTypes.SET_CONNECTION :case StatementTypes.SET_CONSTRAINT :case StatementTypes.SET_DESCRIPTOR :

---------------------------Clone group no  307 for hash fd2a19fab7bc76bf9052dc8685915152--------------------



table = (Table) tables.next();if (!isAccessibleTable(session, table)) {
                continue;
            }row                = t.getEmptyRowData();row[table_catalog] = database.getCatalogName().name;row[table_schema]  = table.getSchemaName().name;row[table_name]    = table.getName().name;

table = (Table) tables.next();if (!isAccessibleTable(session, table)) {
                continue;
            }row                = t.getEmptyRowData();row[table_catalog] = database.getCatalogName().name;row[table_schema]  = table.getSchemaName().name;row[table_name]    = table.getName().name;

---------------------------Clone group no  308 for hash 36bb3ab39e8684437d6ed1be5bd37b5c--------------------



Object[] data    = getLobHeader(aID);long     aLength = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();data = getLobHeader(bID);long    bLength    = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();int[][] aAddresses = getBlockAddresses(aID, 0, Integer.MAX_VALUE);int[][] bAddresses = getBlockAddresses(bID, 0, Integer.MAX_VALUE);int     aIndex     = 0;int     bIndex     = 0;int     aOffset    = 0;int     bOffset    = 0;if (aLength == 0) {
            return bLength == 0 ? 0
                                : -1;
        }if (bLength == 0) {
            return 1;
        }

Object[] data    = getLobHeader(aID);long     aLength = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();data = getLobHeader(bID);long    bLength    = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();int[][] aAddresses = getBlockAddresses(aID, 0, Integer.MAX_VALUE);int[][] bAddresses = getBlockAddresses(bID, 0, Integer.MAX_VALUE);int     aIndex     = 0;int     bIndex     = 0;int     aOffset    = 0;int     bOffset    = 0;if (aLength == 0) {
            return bLength == 0 ? 0
                                : -1;
        }if (bLength == 0) {
            return 1;
        }

---------------------------Clone group no  309 for hash 5b09437688ee32398de9dfa884cd8485--------------------



rs = ps.executeQuery();assertTrue(\"No rows fetched\", rs.next());assertEquals(\"str\", rs.getString(4));assertEquals(5, rs.getInt(1));assertEquals(3, rs.getInt(2));assertEquals(\"five\", rs.getString(3));assertTrue(\"No rows fetched\", rs.next());assertEquals(\"str\", rs.getString(4));assertEquals(10, rs.getInt(1));assertEquals(3, rs.getInt(2));assertEquals(\"ten\", rs.getString(3));assertTrue(\"No rows fetched\", rs.next());assertEquals(\"str\", rs.getString(4));assertEquals(15, rs.getInt(1));assertEquals(3, rs.getInt(2));assertEquals(\"fifteen\", rs.getString(3));assertTrue(\"Not enough rows fetched\", rs.next());assertEquals(3, rs.getInt(2));assertEquals(25, rs.getInt(1));assertNull(rs.getString(3));assertEquals(\"str\", rs.getString(4));assertTrue(\"Not enough rows fetched\", rs.next());assertEquals(3, rs.getInt(2));assertEquals(40, rs.getInt(1));assertEquals(\"forty\", rs.getString(3));assertEquals(\"str\", rs.getString(4));assertFalse(\"Too many rows fetched\", rs.next());rs.close();

rs = ps.executeQuery();assertTrue(\"No rows fetched\", rs.next());assertEquals(\"str\", rs.getString(4));assertEquals(5, rs.getInt(1));assertEquals(3, rs.getInt(2));assertEquals(\"five\", rs.getString(3));assertTrue(\"No rows fetched\", rs.next());assertEquals(\"str\", rs.getString(4));assertEquals(10, rs.getInt(1));assertEquals(3, rs.getInt(2));assertEquals(\"ten\", rs.getString(3));assertTrue(\"No rows fetched\", rs.next());assertEquals(\"str\", rs.getString(4));assertEquals(15, rs.getInt(1));assertEquals(3, rs.getInt(2));assertEquals(\"fifteen\", rs.getString(3));assertTrue(\"Not enough rows fetched\", rs.next());assertEquals(3, rs.getInt(2));assertEquals(25, rs.getInt(1));assertNull(rs.getString(3));assertEquals(\"str\", rs.getString(4));assertTrue(\"Not enough rows fetched\", rs.next());assertEquals(3, rs.getInt(2));assertEquals(40, rs.getInt(1));assertEquals(\"forty\", rs.getString(3));assertEquals(\"str\", rs.getString(4));assertFalse(\"Too many rows fetched\", rs.next());rs.close();

---------------------------Clone group no  310 for hash 8e417cc4afa592b15e81eaa272cfe210--------------------



routineSchema = (RoutineSchema) routines.next();if (!session.getGrantee().isAccessible(routineSchema)) {
                continue;
            }Routine[] specifics = routineSchema.getSpecificRoutines();

routineSchema = (RoutineSchema) routines.next();if (!session.getGrantee().isAccessible(routineSchema)) {
                continue;
            }Routine[] specifics = routineSchema.getSpecificRoutines();

---------------------------Clone group no  311 for hash 7825e646b2c231834755b1be2de14a92--------------------



while (Statement.charAt(Statement.length() - 1) == ';') {
                        Statement = Statement.substring(0, Statement.length()
                                                        - 1);
                    }try {
                        tracer.trace(\"Executing \" + Statement);
                        destDb.execute(Statement);
                    } catch (Exception e) {
                        tracer.trace(\"Ignoring error \" + e.getMessage());
                    }lastsemicolon = nextsemicolon + 1;

while (Statement.charAt(Statement.length() - 1) == ';') {
                        Statement = Statement.substring(0, Statement.length()
                                                        - 1);
                    }try {
                        tracer.trace(\"Executing \" + Statement);
                        destDb.execute(Statement);
                    } catch (Exception e) {
                        tracer.trace(\"Ignoring error \" + e.getMessage());
                    }lastsemicolon = nextsemicolon + 1;

while (Statement.charAt(Statement.length() - 1) == ';') {
                        Statement = Statement.substring(0, Statement.length()
                                                        - 1);
                    }try {
                        tracer.trace(\"Executing \" + Statement);
                        destDb.execute(Statement);
                    } catch (Exception e) {
                        tracer.trace(\"Ignoring error \" + e.getMessage());
                    }lastsemicolon = nextsemicolon + 1;

while (Statement.charAt(Statement.length() - 1) == ';') {
                        Statement = Statement.substring(0, Statement.length()
                                                        - 1);
                    }try {
                        tracer.trace(\"Executing \" + Statement);
                        destDb.execute(Statement);
                    } catch (Exception e) {
                        tracer.trace(\"Ignoring error \" + e.getMessage());
                    }lastsemicolon = nextsemicolon + 1;

---------------------------Clone group no  312 for hash b6bc253558b521a5a96c0e90e8d731b2--------------------



row[table_catalog]    = database.getCatalogName().name;row[table_schema]     = refName.schema.name;row[table_name]       = refName.name;try {
                    t.insertSys(session, store, row);
                } catch (HsqlException e) {}

row[table_catalog]   = database.getCatalogName().name;row[table_schema]    = refName.schema.name;row[table_name]      = refName.name;try {
                    t.insertSys(session, store, row);
                } catch (HsqlException e) {}

row[table_catalog] = database.getCatalogName().name;row[table_schema]  = refName.schema.name;row[table_name]    = refName.name;try {
                    t.insertSys(session, store, row);
                } catch (HsqlException e) {}

---------------------------Clone group no  313 for hash eecfcefbc4054c205a51f962a252dc89--------------------



ps.executeUpdate();rs = st.executeQuery(\"SELECT b FROM blo WHERE id = 2\");if (!rs.next()) {
                assertTrue(\"No row with id 2\", false);
            }

ps.executeUpdate();rs = st.executeQuery(\"SELECT b FROM blo WHERE id = 2\");if (!rs.next()) {
                assertTrue(\"No row with id 2\", false);
            }

---------------------------Clone group no  314 for hash 7a345d49314b74b496d33ddd6b96a280--------------------



length = offset + dataLength;result = setLength(lobID, length);if (result.isError()) {
                    return result;
                }

length = offset + dataLength;result = setLength(lobID, length);if (result.isError()) {
                    return result;
                }

---------------------------Clone group no  315 for hash c65266d1b8b24cb16b112558fc758d6e--------------------



case Types.OTHER :return OTHER;default :

case Types.OTHER :return OTHER;default :

---------------------------Clone group no  316 for hash d4724ea92bd72d2325f94b403dbb4f62--------------------



synchLog();database.lobManager.synch();deleteOldDataFiles();

//
            synchLog();database.lobManager.synch();deleteOldDataFiles();

---------------------------Clone group no  317 for hash a0197a7e7801e45d9c6967e0f412df2b--------------------



for (int i = 0; i < rsmd.getColumnCount(); i++) {
                result += rsmd.getColumnLabel(i + 1) + \":\"
                           + rs.getString(i + 1) + \":\";
            }result += \"\\n\";rows++;

for (int i = 0; i < rsmd.getColumnCount(); i++) {
                result += rsmd.getColumnLabel(i + 1) + \":\"
                          + rs.getString(i + 1) + \":\";
            }result += \"\\n\";rows++;

---------------------------Clone group no  318 for hash bcade8d83203acd6fb1acf3a9c5a5d17--------------------



set.add(token.tokenType);read();long value = readBigint();

set.add(token.tokenType);read();long value = readBigint();

---------------------------Clone group no  319 for hash a5f5d4bfe07af4a95a745d87481076ec--------------------



case SchemaObject.VIEW :case SchemaObject.TABLE :case SchemaObject.COLUMN :case SchemaObject.SEQUENCE :case SchemaObject.CHARSET :case SchemaObject.DOMAIN :case SchemaObject.TYPE :

case SchemaObject.VIEW :case SchemaObject.TABLE :case SchemaObject.COLUMN :case SchemaObject.SEQUENCE :case SchemaObject.CHARSET :case SchemaObject.DOMAIN :case SchemaObject.TYPE :

---------------------------Clone group no  320 for hash 8258a273a6cea48b1e26f66465794415--------------------



result = executeProtected(session, statements[i]);result = handleCondition(session, result);if (result.isError()) {
                break;
            }if (result.getType() == ResultConstants.VALUE) {
                break;
            }if (result.getType() == ResultConstants.DATA) {
                break;
            }

result = executeProtected(session, statements[i]);result = handleCondition(session, result);if (result.isError()) {
                    break;
                }if (result.getType() == ResultConstants.VALUE) {
                    break;
                }if (result.getType() == ResultConstants.DATA) {
                    break;
                }

---------------------------Clone group no  321 for hash 9d66772b9d8fdfb6ff2ecb309e9aef94--------------------



iRowIdx      = 0;iMaxRowIdx   = 0;iColumnCount = 0;vRows        = new Vector();

iRowIdx      = 0;iMaxRowIdx   = 0;iColumnCount = 0;vRows        = new Vector();

iRowIdx      = 0;iMaxRowIdx   = 0;iColumnCount = 0;vRows        = new Vector();

---------------------------Clone group no  322 for hash 96c88e2e43b9f9b4d632da7cd2bd1f96--------------------



// Storing prevToken as an attempted hack
                        prevToken = buffer;setBuf(token);historize();

// Storing prevToken as an attempted hack
                        prevToken = buffer;setBuf(token);historize();

---------------------------Clone group no  323 for hash 906a5ce8aa3cd9de3a617da22fc6ce1a--------------------



resetState();token.tokenType = Tokens.X_ENDPARSE;return;

resetState();token.tokenType = Tokens.X_ENDPARSE;return;

---------------------------Clone group no  324 for hash 90db15cce41992f9bc0fe1af419c9568--------------------



int limit = session.rowActionList.size();for (int i = 0; i < limit; i++) {
                RowAction action = (RowAction) session.rowActionList.get(i);

                if (!action.canCommit(session, session.tempSet)) {

//                System.out.println(\"commit conflicts \" + session + \" \" + session.actionTimestamp);
                    return false;
                }
            }session.actionTimestamp = getNextGlobalChangeTimestamp();

int limit = session.rowActionList.size();for (int i = 0; i < limit; i++) {
                RowAction action = (RowAction) session.rowActionList.get(i);

                if (!action.canCommit(session, session.tempSet)) {

//                  System.out.println(\"commit conflicts \" + session + \" \" + session.actionTimestamp);
                    return false;
                }
            }// new actionTimestamp used for commitTimestamp
            session.actionTimestamp         = getNextGlobalChangeTimestamp();

---------------------------Clone group no  325 for hash a29b0514d2c2108a5d37059a312e456f--------------------



// column number mappings
        final int domain_catalog = 0;final int domain_schema  = 1;final int domain_name    = 2;

final int domain_catalog             = 0;final int domain_schema              = 1;final int domain_name                = 2;

---------------------------Clone group no  326 for hash a0bdfb75312be98e3c32bdd7153b7ad2--------------------



// (ulrivo): set default directory if set from command line
            if (defDirectory != null) {
                f.setDirectory(defDirectory);
            }f.show();String file = f.getFile();

// (ulrivo): set default directory if set from command line
            if (defDirectory != null) {
                f.setDirectory(defDirectory);
            }f.show();String file = f.getFile();

// (ulrivo): set default directory if set from command line
            if (defDirectory != null) {
                f.setDirectory(defDirectory);
            }f.show();String file = f.getFile();

---------------------------Clone group no  327 for hash 80b21d4752270e78d577722838449269--------------------



statement = new StatementExpression(session, compileContext,
                                                StatementTypes.CONDITION,
                                                condition);list.add(statement);readThis(Tokens.THEN);statements = compileSQLProcedureStatementList(routine, context);for (int i = 0; i < statements.length; i++) {
                list.add(statements[i]);
            }if (token.tokenType != Tokens.WHEN) {
                break;
            }

statement = new StatementExpression(session, compileContext,
                                                StatementTypes.CONDITION,
                                                condition);list.add(statement);readThis(Tokens.THEN);statements = compileSQLProcedureStatementList(routine, context);for (int i = 0; i < statements.length; i++) {
                list.add(statements[i]);
            }if (token.tokenType != Tokens.WHEN) {
                break;
            }

---------------------------Clone group no  328 for hash 00011167d3dca8bcbe34722ac6653bc5--------------------



sw.zero();cConnection = null;sStatement  = null;

//            System.out.println(\"Connecting\");
            sw.zero();cConnection = null;sStatement  = null;

---------------------------Clone group no  329 for hash c7b587bc1d5a04d52ee2dcee15c17d6f--------------------



final int table_catalog  = 3;final int table_schema   = 4;final int table_name     = 5;final int column_name    = 6;

final int table_catalog = 3;final int table_schema  = 4;final int table_name    = 5;final int column_name   = 6;

final int table_catalog                 = 3;final int table_schema                  = 4;final int table_name                    = 5;final int column_name                   = 6;

final int table_catalog   = 3;final int table_schema    = 4;final int table_name      = 5;final int column_name     = 6;

final int table_catalog = 3;final int table_schema  = 4;final int table_name    = 5;final int column_name   = 6;

---------------------------Clone group no  330 for hash 4d88d2efb53155815564128ca8bfa606--------------------



rowOut.writeLong(id);rowOut.writeInt(updateCount);rowOut.writeInt(fetchSize);

rowOut.writeLong(id);rowOut.writeInt(updateCount);rowOut.writeInt(fetchSize);

---------------------------Clone group no  331 for hash 1a32b9f579047f8f16a0a93237580285--------------------



long t1 = System.currentTimeMillis();long t2 = System.currentTimeMillis();System.out.println(\"done \" + (t2 - t1));

long t1 = System.currentTimeMillis();long t2 = System.currentTimeMillis();System.out.println(\"done \" + (t2 - t1));

---------------------------Clone group no  332 for hash 61d850ac66f01b3c45613e141fa91fed--------------------



scanCharacterString();if (token.isMalformed) {
                        return;
                    }token.dataType = CharacterType.getCharacterType(
                        Types.SQL_CHAR, token.tokenString.length());token.tokenType = Tokens.X_VALUE;

scanCharacterString();if (token.isMalformed) {
                    return;
                }token.dataType = CharacterType.getCharacterType(Types.SQL_CHAR,
                        token.tokenString.length());token.tokenType   = Tokens.X_VALUE;

---------------------------Clone group no  333 for hash 75943b32b2483559fc5de5fbdc88a112--------------------



int count = 0;tempBuffer[count++] = (byte) (v >>> 8);tempBuffer[count++] = (byte) v;write(tempBuffer, 0, count);

int count = 0;tempBuffer[count++] = (byte) (v >>> 8);tempBuffer[count++] = (byte) v;write(tempBuffer, 0, count);

int count = 0;tempBuffer[count++] = (byte) (v >>> 8);tempBuffer[count++] = (byte) v;write(tempBuffer, 0, count);

---------------------------Clone group no  334 for hash 7cc5d9b87ceaafc2c9f60efb778c7900--------------------



return;default :throw Error.runtimeError(ErrorCode.U_S0500, \"Expression\");

return;default :throw Error.runtimeError(ErrorCode.U_S0500, \"Expression\");

---------------------------Clone group no  335 for hash a4c3691cfb0afbcfd6509469645bc343--------------------



value        = rs.getDouble(2);wasEqual     = Double.isNaN(value);integerValue = rs.getInt(4);// tests for conversion
                // getInt on DECIMAL
                integerValue = rs.getInt(1);

value        = rs.getDouble(2);wasEqual     = Double.isNaN(value);integerValue = rs.getInt(4);// tests for conversion
                // getInt on DECIMAL
                integerValue = rs.getInt(1);

---------------------------Clone group no  336 for hash 5f18ed73c657d189b7082624fcaa79a2--------------------



break;default :throw JDBCUtil.invalidArgument();

break;default :throw JDBCUtil.invalidArgument();

break;default :throw JDBCUtil.invalidArgument();

break;default :throw JDBCUtil.invalidArgument();

---------------------------Clone group no  337 for hash 85b97cbfc3cb2f7800395dc2243cf1aa--------------------



case Types.SQL_BIGINT :return convertToLong(session, a);case Types.SQL_REAL :case Types.SQL_FLOAT :case Types.SQL_DOUBLE :return convertToDouble(a);case Types.SQL_NUMERIC :case Types.SQL_DECIMAL :

case Types.SQL_BIGINT :return convertToLong(session, a);case Types.SQL_REAL :case Types.SQL_FLOAT :case Types.SQL_DOUBLE :return convertToDouble(a);case Types.SQL_NUMERIC :case Types.SQL_DECIMAL :

---------------------------Clone group no  338 for hash 709daa33dc77c2746c36a512a5c20c43--------------------



HsqlName hsqlName = database.nameManager.newHsqlName(
                            table.getSchemaName(), n, isDelimitedIdentifier(),
                            SchemaObject.TRANSITION);Table transition = new Table(table, hsqlName);RangeVariable range = new RangeVariable(transition,
                            null, null, null, compileContext);

HsqlName hsqlName = database.nameManager.newHsqlName(
                            table.getSchemaName(), n, isDelimitedIdentifier(),
                            SchemaObject.TRANSITION);Table transition = new Table(table, hsqlName);RangeVariable range = new RangeVariable(transition,
                            null, null, null, compileContext);

---------------------------Clone group no  339 for hash 9ecb0b517f75b5a20307c2c66e94e020--------------------



// This query returns no rows.  typenam \"lo\"??
                        outPacket.write(\"SELECT\");outPacket.xmit('C', dataOutput);sendReadyForQuery = true;break;

// This query returns no rows.  typenam \"lo\"??
                        outPacket.write(\"SELECT\");outPacket.xmit('C', dataOutput);sendReadyForQuery = true;break;

outPacket.write(\"SELECT\");outPacket.xmit('C', dataOutput);sendReadyForQuery = true;break;

---------------------------Clone group no  340 for hash 92845a64fc8f45cff2a9dfef48424fdd--------------------



if (length > Integer.MAX_VALUE) {
            throw new IndexOutOfBoundsException();
        }byte[] bytes = b.getBytes(session, offset, (int) length);setBytes(session, pos, bytes, 0, bytes.length);

if (length > Integer.MAX_VALUE) {
            throw new IndexOutOfBoundsException();
        }byte[] bytes = b.getBytes(session, offset, (int) length);setBytes(session, pos, bytes, 0, bytes.length);

---------------------------Clone group no  341 for hash c9268dea14ca1e66307c78af73891ff7--------------------



System.out.println(failed_transactions + \" / \" + transaction_count
                           + \" failed to complete.\");double rate = (transaction_count - failed_transactions)
                      / completion_time;System.out.println(\"Transaction rate: \" + rate + \" txn/sec.\");

System.out.println(failed_transactions + \" / \" + transaction_count
                           + \" failed to complete.\");double rate = (transaction_count - failed_transactions)
                      / completion_time;System.out.println(\"Transaction rate: \" + rate + \" txn/sec.\");

---------------------------Clone group no  342 for hash e45fc6866b4fd6ee9fc93e96fcfd05b8--------------------



if (buffer == null) {
                        stdprintln(nobufferYetString);
                        return;
                    }newVal.append(buffer.val);if (matcher.groupCount() > 1 && matcher.group(2) != null
                            && matcher.group(2).length() > 0)
                        newVal.append(matcher.group(2));newType = buffer.type;

if (buffer == null) {
                    stdprintln(nobufferYetString);
                    return;
                }newVal.append(buffer.val);if (matcher.groupCount() > 1 && matcher.group(2) != null
                        && matcher.group(2).length() > 0)
                    newVal.append(matcher.group(2));newType = buffer.type;

---------------------------Clone group no  343 for hash 0af81c5707dec74ae3ef12994d247f91--------------------



System.out.println(number_of_txns);ntrans = number_of_txns;Conn   = connect(url, user, password);if (Conn == null) {
                return;
            }try {
                Conn.setAutoCommit(false);
                Conn.setTransactionIsolation(transactionMode);
                prepareStatements();
            } catch (Exception E) {
                System.out.println(E.getMessage());
                E.printStackTrace();
            }

System.out.println(number_of_txns);ntrans = number_of_txns;Conn   = connect(url, user, password);if (Conn == null) {
                return;
            }try {
                Conn.setAutoCommit(false);
                Conn.setTransactionIsolation(transactionMode);
                prepareStatements();
            } catch (Exception E) {
                System.out.println(E.getMessage());
                E.printStackTrace();
            }

---------------------------Clone group no  344 for hash 69a0605ff33d01ad0e3ad7e38928a1c2--------------------



row = t.getEmptyRowData();//
                row[itable_cat]         = tableCatalog;row[itable_schem]       = tableSchema;row[itable_name]        = tableName;

row                    = t.getEmptyRowData();row[itable_cat]        = tableCatalog;row[itable_schem]      = tableSchema;row[itable_name]       = tableName;

row               = t.getEmptyRowData();row[itable_cat]   = tableCatalog;row[itable_schem] = tableSchema;row[itable_name]  = tableName;

---------------------------Clone group no  345 for hash 86f249e69a2f661d0d5d3bcc84a90a25--------------------



java.util.Date start = new java.util.Date();if (init) {
                System.out.println(\"Start: \" + start.toString());
                System.out.print(\"Initializing dataset...\");
                createDatabase(url, user, password);

                double seconds = (System.currentTimeMillis() - start.getTime())
                                 / 1000D;

                System.out.println(\"done. in \" + seconds + \" seconds\\n\");
                System.out.println(\"Complete: \"
                                   + (new java.util.Date()).toString());
            }System.out.println(\"* Starting Benchmark Run *\");

java.util.Date start = new java.util.Date();if (init) {
                System.out.println(\"Start: \" + start.toString());
                System.out.print(\"Initializing dataset...\");
                createDatabase(url, user, password);

                double seconds = (System.currentTimeMillis() - start.getTime())
                                 / 1000D;

                System.out.println(\"done. in \" + seconds + \" seconds\\n\");
                System.out.println(\"Complete: \"
                                   + (new java.util.Date()).toString());
            }System.out.println(\"* Starting Benchmark Run *\");

---------------------------Clone group no  346 for hash 8f293ad918bba039fbb49c17edb8c22e--------------------



int pos = sqlString.indexOf('\\r', currentPosition + 2);if (pos == -1) {
                        pos = sqlString.indexOf('\\n', currentPosition + 2);
                    }if (pos == -1) {
                        pos = limit;
                    }token.tokenString = sqlString.substring(currentPosition
                            + 2, pos);token.tokenType   = Tokens.X_REMARK;token.isDelimiter = true;return;

int pos = sqlString.indexOf('\\r', currentPosition + 2);if (pos == -1) {
                        pos = sqlString.indexOf('\\n', currentPosition + 2);
                    }if (pos == -1) {
                        pos = limit;
                    }token.tokenString = sqlString.substring(currentPosition
                            + 2, pos);token.tokenType   = Tokens.X_REMARK;token.isDelimiter = true;return;

---------------------------Clone group no  347 for hash 1767ac7977ef559d8559d1a3aaed5e36--------------------



int rows = 0;ResultSet rs = stmnt.executeQuery(\"SELECT \" + cols + \" FROM \" + table);ResultSetMetaData rsmd = rs.getMetaData();String result = \"Table \" + table + \", expecting \"
            + expected + \" rows total:\\n\";while (rs.next()) {
            for (int i = 0; i < rsmd.getColumnCount(); i++) {
                result += rsmd.getColumnLabel(i + 1) + \":\"
                           + rs.getString(i + 1) + \":\";
            }
            result += \"\\n\";
            rows++;
        }rs.close();System.out.println(result);assertEquals(expected, rows);

int               rows = 0;ResultSet rs = stmnt.executeQuery(\"SELECT \" + cols + \" FROM \" + table);ResultSetMetaData rsmd = rs.getMetaData();String result = \"Table \" + table + \", expecting \" + expected
                        + \" rows total:\\n\";while (rs.next()) {
            for (int i = 0; i < rsmd.getColumnCount(); i++) {
                result += rsmd.getColumnLabel(i + 1) + \":\"
                          + rs.getString(i + 1) + \":\";
            }

            result += \"\\n\";

            rows++;
        }rs.close();System.out.println(result);assertEquals(expected, rows);

---------------------------Clone group no  348 for hash 46a73394329341b1b4788a19210606ac--------------------



if (end < offset) {
            throw Error.error(ErrorCode.X_22011);
        }if (offset > end || end < 0) {

            // return zero length data
            offset = 0;
            end    = 0;
        }if (offset < 0) {
            offset = 0;
        }if (end > dataLength) {
            end = dataLength;
        }length = end - offset;

if (end < offset) {
            throw Error.error(ErrorCode.X_22011);
        }if (offset > end || end < 0) {

            // return zero length data
            offset = 0;
            end    = 0;
        }if (offset < 0) {
            offset = 0;
        }if (end > dataLength) {
            end = dataLength;
        }length = end - offset;

---------------------------Clone group no  349 for hash 2778c62c2faee35e77a4afaca4528711--------------------



if (getLeftNode() != null) {
            sb.append(\" arg_left=[\");
            sb.append(nodes[LEFT].describe(session, blanks + 1));
            sb.append(']');
        }if (getRightNode() != null) {
            sb.append(\" arg_right=[\");
            sb.append(nodes[RIGHT].describe(session, blanks + 1));
            sb.append(']');
        }return sb.toString();

if (getLeftNode() != null) {
            sb.append(\" arg_left=[\");
            sb.append(nodes[LEFT].describe(session, blanks + 1));
            sb.append(']');
        }if (getRightNode() != null) {
            sb.append(\" arg_right=[\");
            sb.append(nodes[RIGHT].describe(session, blanks + 1));
            sb.append(']');
        }return sb.toString();

if (getLeftNode() != null) {
            sb.append(\" arg_left=[\");
            sb.append(nodes[LEFT].describe(session, blanks + 1));
            sb.append(']');
        }if (getRightNode() != null) {
            sb.append(\" arg_right=[\");
            sb.append(nodes[RIGHT].describe(session, blanks + 1));
            sb.append(']');
        }return sb.toString();

---------------------------Clone group no  350 for hash 439ecc6a0d93ef5d4d9e9809d6625613--------------------



token.tokenType   = Tokens.X_MALFORMED_NUMERIC;token.isMalformed = true;return;

token.tokenType   = Tokens.X_MALFORMED_NUMERIC;token.isMalformed = true;return;

token.tokenType   = Tokens.X_MALFORMED_NUMERIC;token.isMalformed = true;return;

token.tokenType   = Tokens.X_MALFORMED_NUMERIC;token.isMalformed = true;return;

token.tokenType   = Tokens.X_MALFORMED_NUMERIC;token.isMalformed = true;return;

token.tokenType   = Tokens.X_MALFORMED_NUMERIC;token.isMalformed = true;return;

---------------------------Clone group no  351 for hash 6f8c346caa37410cf33f73f0eb093432--------------------



return result < 0 ? Boolean.TRUE
                                  : Boolean.FALSE;default :throw Error.runtimeError(ErrorCode.U_S0500,
                                         \"ExpressionLogical\");

return result < 0 ? Boolean.TRUE
                                  : Boolean.FALSE;default :throw Error.runtimeError(ErrorCode.U_S0500,
                                         \"ExpressionLogical\");

---------------------------Clone group no  352 for hash 5e0c065d68fbcfcd7dfdcfc139b043dd--------------------



b = (BlobData) a;long blobLength = b.length(session);if (blobLength > precision) {
                throw Error.error(ErrorCode.X_22001);
            }

b = (BlobData) a;long blobLength = b.length(session);if (blobLength > precision) {
                throw Error.error(ErrorCode.X_22001);
            }

---------------------------Clone group no  353 for hash 208f501f7129e01abfb3c5596eb2b5e9--------------------



reset();for (int i = 0; i < limitcount; i++) {
            next();
        }while (hasNext()) {
            next();
            removeCurrent();
        }

reset();for (int i = 0; i < limitcount; i++) {
            next();
        }while (hasNext()) {
            next();
            removeCurrent();
        }

---------------------------Clone group no  354 for hash ac9f868c94206df4291f581ec37729d7--------------------



if (!(a instanceof BigDecimal)) {
                    a = convertToDefaultType(null, a);
                }if (!(b instanceof BigDecimal)) {
                    b = convertToDefaultType(null, b);
                }BigDecimal abd = (BigDecimal) a;BigDecimal bbd = (BigDecimal) b;

if (!(a instanceof BigDecimal)) {
                    a = convertToDefaultType(null, a);
                }if (!(b instanceof BigDecimal)) {
                    b = convertToDefaultType(null, b);
                }BigDecimal abd = (BigDecimal) a;BigDecimal bbd = (BigDecimal) b;

---------------------------Clone group no  355 for hash c09f955b980792b13f69495446babc96--------------------



case Tokens.CURRENT_DATE :case Tokens.CURRENT_TIME :case Tokens.CURRENT_TIMESTAMP :case Tokens.LOCALTIME :case Tokens.LOCALTIMESTAMP :

case Tokens.CURRENT_DATE :case Tokens.CURRENT_TIME :case Tokens.CURRENT_TIMESTAMP :case Tokens.LOCALTIME :case Tokens.LOCALTIMESTAMP :

---------------------------Clone group no  356 for hash 217e26437f2c19587544ec8312c2cf05--------------------



int         i     = 2;int         j     = 0;//
        table[0] = -1;table[1] = 0;

int   i     = 2;int   j     = 0;table[0] = -1;table[1] = 0;

int   i     = 2;int   j     = 0;table[0] = -1;table[1] = 0;

---------------------------Clone group no  357 for hash c85f785937facec301d770ae9d2cc3f7--------------------



String[] array = new String[list.size()];list.toArray(array);return array;

String[] array = new String[list.size()];list.toArray(array);return array;

String[] array = new String[list.size()];list.toArray(array);return array;

String[] array = new String[list.size()];list.toArray(array);return array;

String[] array = new String[list.size()];list.toArray(array);return array;

String[] array = new String[list.size()];list.toArray(array);return array;

String[] array = new String[list.size()];list.toArray(array);return array;

String[] array = new String[list.size()];list.toArray(array);return array;

String[] array = new String[list.size()];list.toArray(array);return array;

String[] array = new String[list.size()];list.toArray(array);return array;

String[] array = new String[list.size()];list.toArray(array);return array;

String[] array = new String[list.size()];list.toArray(array);return array;

String[] array = new String[list.size()];list.toArray(array);return array;

---------------------------Clone group no  358 for hash ca00147acaaaea1cfe0b159fc7fb8fd7--------------------



case StatementTypes.SELECT_CURSOR :break;case StatementTypes.DELETE_WHERE :

case StatementTypes.SELECT_CURSOR :break;case StatementTypes.DELETE_WHERE :

---------------------------Clone group no  359 for hash 1e42a03089bd6fde635becdf7343570a--------------------



int count = packed.charAt(i++);int value = packed.charAt(i++);do result[j++] = value; while (--count > 0);

int count = packed.charAt(i++);int value = packed.charAt(i++);do result[j++] = value; while (--count > 0);

---------------------------Clone group no  360 for hash 6de9ba63d79132d96d26bb7e9e4bef1c--------------------



boolean wasEscape   = false;int     escapeCount = 0;int     i           = 0;int     j           = 0;

boolean wasEscape   = false;int     escapeCount = 0;int     i           = 0;int     j           = 0;

---------------------------Clone group no  361 for hash 5fed9c43f55decbbfd7bd4dd63067121--------------------



break;default :throw Error.error(ErrorCode.X_42566);

break;default :throw Error.error(ErrorCode.X_42566);

---------------------------Clone group no  362 for hash f7842052b9b8889b25d7ed04032bf8e3--------------------



readThis(Tokens.OPENBRACKET);TableDerived td =
                    XreadSubqueryTableBody(OpTypes.TABLE_SUBQUERY);readThis(Tokens.CLOSEBRACKET);return new Expression(OpTypes.TABLE_SUBQUERY, td);

readThis(Tokens.OPENBRACKET);TableDerived td = XreadSubqueryTableBody(OpTypes.TABLE_SUBQUERY);readThis(Tokens.CLOSEBRACKET);return new Expression(OpTypes.TABLE_SUBQUERY, td);

---------------------------Clone group no  363 for hash 9da9c75500475c5ec65564924c84ea12--------------------



catch (java.security.InvalidKeyException e) {
            throw Error.error(ErrorCode.X_S0531, e);
        }catch (BadPaddingException e) {
            throw Error.error(ErrorCode.X_S0531, e);
        }catch (IllegalBlockSizeException e) {
            throw Error.error(ErrorCode.X_S0531, e);
        }catch (ShortBufferException e) {
            throw Error.error(ErrorCode.X_S0531, e);
        }

catch (java.security.InvalidKeyException e) {
            throw Error.error(ErrorCode.X_S0531, e);
        }catch (BadPaddingException e) {
            throw Error.error(ErrorCode.X_S0531, e);
        }catch (IllegalBlockSizeException e) {
            throw Error.error(ErrorCode.X_S0531, e);
        }catch (ShortBufferException e) {
            throw Error.error(ErrorCode.X_S0531, e);
        }

---------------------------Clone group no  364 for hash 4b099ebec3d3e9cef9a26ac4cd55bbd2--------------------



sb.append(sql.substring(tail, i));i       = onStartEscapeSequence(sql, sb, i);tail    = i;changed = true;nest++;state = inside_escape;

sb.append(sql.substring(tail, i));i       = onStartEscapeSequence(sql, sb, i);tail    = i;changed = true;nest++;state = inside_escape;

---------------------------Clone group no  365 for hash 2870726c9fc9b7f5b77b0f2b0ea6bb7c--------------------



addColumn(t, \"REMARKS\", CHARACTER_DATA);                // 11addColumn(t, \"COLUMN_DEF\", CHARACTER_DATA);             // 12addColumn(t, \"SQL_DATA_TYPE\", Type.SQL_INTEGER);        // 13addColumn(t, \"SQL_DATETIME_SUB\", Type.SQL_INTEGER);     // 14addColumn(t, \"CHAR_OCTET_LENGTH\", Type.SQL_INTEGER);    // 15addColumn(t, \"ORDINAL_POSITION\", Type.SQL_INTEGER);     // not null

addColumn(t, \"REMARKS\", CHARACTER_DATA);                // 12// ----------------------------------------------------------------
            // JDBC 4.0
            // ----------------------------------------------------------------
            addColumn(t, \"COLUMN_DEF\", CHARACTER_DATA);             // 13addColumn(t, \"SQL_DATA_TYPE\", Type.SQL_INTEGER);        // 14addColumn(t, \"SQL_DATETIME_SUB\", Type.SQL_INTEGER);     // 15addColumn(t, \"CHAR_OCTET_LENGTH\", Type.SQL_INTEGER);    // 16addColumn(t, \"ORDINAL_POSITION\", Type.SQL_INTEGER);     // 17

---------------------------Clone group no  366 for hash 21da5142797d81ed4869eb6cb67fe3f1--------------------



row[sequence_catalog] = database.getCatalogName().name;row[sequence_schema]  = refName.schema.name;row[sequence_name]    = refName.name;try {
                    t.insertSys(session, store, row);
                } catch (HsqlException e) {}

row[sequence_catalog] = database.getCatalogName().name;row[sequence_schema]  = refName.schema.name;row[sequence_name]    = refName.name;try {
                    t.insertSys(session, store, row);
                } catch (HsqlException e) {}

---------------------------Clone group no  367 for hash 2e09005f8ff0d0bde70dc36649ca3980--------------------



/** @todo 1.9.0 - review message malformed character set identifier */
                    token.tokenType   = Tokens.X_MALFORMED_STRING;token.isMalformed = true;return;

/** @todo 1.9.0 - review message malformed character set identifier */
                        token.tokenType   = Tokens.X_MALFORMED_STRING;token.isMalformed = true;return;

---------------------------Clone group no  368 for hash e491d0015d3bc835948952cd2ed3cfac--------------------



Conn.setAutoCommit(false);Conn.setTransactionIsolation(transactionMode);prepareStatements();

Conn.setAutoCommit(false);Conn.setTransactionIsolation(transactionMode);prepareStatements();

---------------------------Clone group no  369 for hash ef22b8fdd937972ea4c17f8573c8acf1--------------------



sb.append(\" arg=[\");sb.append(nodes[LEFT].describe(session, blanks + 1));sb.append(']');

sb.append(\" arg=[\");sb.append(nodes[LEFT].describe(session, blanks + 1));sb.append(']');

---------------------------Clone group no  370 for hash 70672f9ffd45615066ee96716835dcbb--------------------



if (data[3] == null) {
                        return null;
                    }value = Type.SQL_BIGINT.convertToType(session, data[3],
                                                          nodes[3].dataType);length = ((Number) value).longValue();

if (data[3] == null) {
                        return null;
                    }value = Type.SQL_BIGINT.convertToType(session, data[3],
                                                          nodes[3].dataType);length = ((Number) value).longValue();

---------------------------Clone group no  371 for hash d6f94fc54f2a4544fce1de377a69ccbf--------------------



pResult.removeAll();pResult.add(\"Center\", gResult);pResult.doLayout();

pResult.removeAll();pResult.add(\"Center\", gResult);pResult.doLayout();

---------------------------Clone group no  372 for hash a7dfb43e9984b0d87c4ca6488fcbd157--------------------



if (object.isMemory()) {
            return;
        }Row row = (Row) object;if (row.getTable().tableType == TableBase.CACHED_TABLE) {
            RowAction rowact = (RowAction) rowActionMap.get(row.getPos());

            row.rowAction = rowact;
        }

if (object.isMemory()) {
            return;
        }Row row = (Row) object;if (row.getTable().tableType == TableBase.CACHED_TABLE) {
            RowAction rowact = (RowAction) rowActionMap.get(row.getPos());

            row.rowAction = rowact;
        }

---------------------------Clone group no  373 for hash 489b09952502153065a8a867e51579c1--------------------



r.close();assertTrue(valid);s.execute(\"insert into a(b) values(2)\", new int[]{ 1 });r = s.getGeneratedKeys();

r.close();assertTrue(valid);s.execute(\"insert into a(b) values(2)\", new int[]{ 1 });r = s.getGeneratedKeys();

---------------------------Clone group no  374 for hash e66ef8f46f1226dac0f1db4bf501acbd--------------------



row[icat]       = cat;row[ischem]     = schem;row[iname]      = pName;row[icol_name]  = cName;row[icol_type]  = cType;row[idata_type] = dType;row[itype_name] = tName;row[iprec]      = prec;row[ilength]    = len;row[iscale]     = scale;row[iradix]     = radix;row[inullable]  = nullability;row[iremark]    = remark;// JDBC 4.0
                row[icol_default]      = colDefault;row[isql_data_type]    = sqlDataType;row[isql_datetime_sub] = sqlDateTimeSub;row[ichar_octet_len]   = charOctetLength;row[iordinal_position] = ordinalPosition;row[iis_nullable]      = isNullable;row[ispecific_name]    = specificName;t.insertSys(session, store, row);

// Do it.
        row[icat]       = cat;row[ischem]     = schem;row[iname]      = pName;row[icol_name]  = cName;row[icol_type]  = cType;row[idata_type] = dType;row[itype_name] = tName;row[iprec]      = prec;row[ilength]    = len;row[iscale]     = scale;row[iradix]     = radix;row[inullable]  = nullability;row[iremark]    = remark;// JDBC 4.0
        row[icol_default]      = colDefault;row[isql_data_type]    = sqlDataType;row[isql_datetime_sub] = sqlDateTimeSub;row[ichar_octet_len]   = charOctetLength;row[iordinal_position] = ordinalPosition;row[iis_nullable]      = isNullable;row[ispecific_name]    = specificName;t.insertSys(session, store, row);

---------------------------Clone group no  375 for hash a30d51ef8de5005e9bef7523a9a59c51--------------------



addColumn(t, \"JAR_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"JAR_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"JAR_NAME\", SQL_IDENTIFIER);

addColumn(t, \"JAR_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"JAR_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"JAR_NAME\", SQL_IDENTIFIER);

addColumn(t, \"JAR_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"JAR_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"JAR_NAME\", SQL_IDENTIFIER);

---------------------------Clone group no  376 for hash 4e3b262a7caa1bf71808a31c529e665b--------------------



println(\"***************************************\");// drop and recreate the test table
        println(drop_table_sql);stmnt.execute(drop_table_sql);

println(\"***************************************\");// drop and recreate the test table
        println(drop_table_sql);stmnt.execute(drop_table_sql);

println(\"***************************************\");// drop and recreate the test table
        println(drop_table_sql);stmnt.execute(drop_table_sql);

---------------------------Clone group no  377 for hash 76c7a187d2b2a1994effe9f1be8fe2d0--------------------



case OpTypes.GREATER_EQUAL :case OpTypes.SMALLER_EQUAL :case OpTypes.SMALLER :

case OpTypes.GREATER_EQUAL :case OpTypes.SMALLER_EQUAL :case OpTypes.SMALLER :

---------------------------Clone group no  378 for hash 0f82750872d05a58ededd93996abb092--------------------



readFieldPrefix();if (scanner.scanNull()) {
            return null;
        }scanner.scanBinaryStringWithQuote();if (scanner.getTokenType() == Tokens.X_MALFORMED_BINARY_STRING) {
            throw Error.error(ErrorCode.X_42587);
        }value = scanner.getValue();

readFieldPrefix();if (scanner.scanNull()) {
            return null;
        }scanner.scanBinaryStringWithQuote();if (scanner.getTokenType() == Tokens.X_MALFORMED_BINARY_STRING) {
            throw Error.error(ErrorCode.X_42587);
        }value = scanner.getValue();

---------------------------Clone group no  379 for hash c8d9a88ffd5f031eed45cf11dfad911f--------------------



case SessionInterface.TX_REPEATABLE_READ :case SessionInterface.TX_SERIALIZABLE :default :

case SessionInterface.TX_REPEATABLE_READ :case SessionInterface.TX_SERIALIZABLE :default :

---------------------------Clone group no  380 for hash f1a883a9f222599db35543bff24abc8d--------------------



currentPosition   += 3;token.isDelimiter = true;return;

currentPosition   += 3;token.isDelimiter = true;return;

---------------------------Clone group no  381 for hash af5d1aa98938a6cd508b2a8cf116807b--------------------



case Types.TINYINT :max = Byte.MAX_VALUE;min = Byte.MIN_VALUE;break;case Types.SQL_SMALLINT :max = Short.MAX_VALUE;min = Short.MIN_VALUE;break;case Types.SQL_INTEGER :max = Integer.MAX_VALUE;min = Integer.MIN_VALUE;break;case Types.SQL_BIGINT :max = Long.MAX_VALUE;min = Long.MIN_VALUE;break;case Types.SQL_NUMERIC :case Types.SQL_DECIMAL :max = Long.MAX_VALUE;min = Long.MIN_VALUE;break;default :throw Error.runtimeError(ErrorCode.U_S0500, \"NumberSequence\");

case Types.TINYINT :max = Byte.MAX_VALUE;min = Byte.MIN_VALUE;break;case Types.SQL_SMALLINT :max = Short.MAX_VALUE;min = Short.MIN_VALUE;break;case Types.SQL_INTEGER :max = Integer.MAX_VALUE;min = Integer.MIN_VALUE;break;case Types.SQL_BIGINT :max = Long.MAX_VALUE;min = Long.MIN_VALUE;break;case Types.SQL_NUMERIC :case Types.SQL_DECIMAL :max = Long.MAX_VALUE;min = Long.MIN_VALUE;break;default :throw Error.runtimeError(ErrorCode.U_S0500, \"NumberSequence\");

case Types.TINYINT :max = Byte.MAX_VALUE;min = Byte.MIN_VALUE;break;case Types.SQL_SMALLINT :max = Short.MAX_VALUE;min = Short.MIN_VALUE;break;case Types.SQL_INTEGER :max = Integer.MAX_VALUE;min = Integer.MIN_VALUE;break;case Types.SQL_BIGINT :max = Long.MAX_VALUE;min = Long.MIN_VALUE;break;case Types.SQL_NUMERIC :case Types.SQL_DECIMAL :max = Long.MAX_VALUE;min = Long.MIN_VALUE;break;default :throw Error.runtimeError(ErrorCode.U_S0500, \"NumberSequence\");

---------------------------Clone group no  382 for hash eefa422ae9d392b35dd84dc7f840da03--------------------



row[table_catalog]  = database.getCatalogName().name;row[table_schema]   = tableName.schema.name;row[table_name]     = tableName.name;row[column_name]    = column.getNameString();t.insertSys(session, store, row);

row[table_catalog] = database.getCatalogName().name;row[table_schema]  = tableName.schema.name;row[table_name]    = tableName.name;row[column_name]   = column.getNameString();t.insertSys(session, store, row);

---------------------------Clone group no  383 for hash 47ba5545cbfee1cc6bb7134f3e0f23ed--------------------



group = StatementTypes.X_SQL_SCHEMA_DEFINITION;order = 2;break;

group = StatementTypes.X_SQL_SCHEMA_DEFINITION;order = 2;break;

---------------------------Clone group no  384 for hash 432a8eed757ce818aa02b0b0ae910f40--------------------



result.generateKeys = in.readByte();if (result.generateKeys == ResultConstants
                        .RETURN_GENERATED_KEYS_COL_NAMES || result
                        .generateKeys == ResultConstants
                        .RETURN_GENERATED_KEYS_COL_INDEXES) {
                    result.generatedMetaData = new ResultMetaData(in);
                }break;

result.generateKeys        = in.readByte();if (result.generateKeys == ResultConstants
                        .RETURN_GENERATED_KEYS_COL_NAMES || result
                        .generateKeys == ResultConstants
                        .RETURN_GENERATED_KEYS_COL_INDEXES) {
                    result.generatedMetaData = new ResultMetaData(in);
                }break;

---------------------------Clone group no  385 for hash 48557ef4e01a363ed18ae4eb3c41b052--------------------



String            insert = \"insert into t1 values(?,?,?)\";String            select = \"select i, c, t from t1\";PreparedStatement ps     = connection.prepareStatement(insert);for (int i = 0; i < 10; i++) {
                ps.setInt(1, i);
                ps.setString(2, String.valueOf(i) + \" s\");
                ps.setBytes(3, new byte[] {
                    (byte) i, ' ', (byte) i
                });
                ps.execute();
            }connection.setAutoCommit(false);

String            insert = \"insert into t1 values(?,?,?)\";String            select = \"select i, c, t from t1\";PreparedStatement ps     = connection.prepareStatement(insert);for (int i = 0; i < 10; i++) {
                ps.setInt(1, i);
                ps.setString(2, String.valueOf(i) + \" s\");
                ps.setBytes(3, new byte[] {
                    (byte) i, ' ', (byte) i
                });
                ps.execute();
            }connection.setAutoCommit(false);

String            insert = \"insert into t1 values(?,?,?)\";String            select = \"select i, c, t from t1\";PreparedStatement ps     = connection.prepareStatement(insert);for (int i = 0; i < 10; i++) {
                ps.setInt(1, i);
                ps.setString(2, String.valueOf(i) + \" s\");
                ps.setBytes(3, new byte[] {
                    (byte) i, ' ', (byte) i
                });
                ps.execute();
            }connection.setAutoCommit(false);

---------------------------Clone group no  386 for hash e27f0e8dbeac11e63e0ef492cba219e6--------------------



result = executeProtected(session, statements[i]);result = handleCondition(session, result);if (result.isError()) {
                break;
            }if (result.getType() == ResultConstants.VALUE) {
                break;
            }

result = executeProtected(session, statements[i]);result = handleCondition(session, result);if (result.isError()) {
                    break;
                }if (result.getType() == ResultConstants.VALUE) {
                    break;
                }

result = executeProtected(session, statements[i]);result = handleCondition(session, result);if (result.isError()) {
                break;
            }if (result.getType() == ResultConstants.VALUE) {
                break;
            }

---------------------------Clone group no  387 for hash b42c202a486da58dc941b07bd8d61f89--------------------



Expression e = XreadBooleanValueExpression();resolveOuterReferencesAndTypes(routine, context, e);StatementExpression condition = new StatementExpression(session,
            compileContext, StatementTypes.CONDITION, e);

Expression e = XreadBooleanValueExpression();resolveOuterReferencesAndTypes(routine, context, e);StatementExpression condition = new StatementExpression(session,
            compileContext, StatementTypes.CONDITION, e);

---------------------------Clone group no  388 for hash 6d8ac1f1cf4f583e0258152435763425--------------------



String[] root  = new String[100];root[0] = \"\";int currentindent = 0;

String[] root = new String[100];root[0] = \"\";int     currentindent = 0;

---------------------------Clone group no  389 for hash f6c88fcb928f98b45e88fcf2218c64ba--------------------



case Tokens.SERIALIZABLE :read();level = SessionInterface.TX_SERIALIZABLE;break;

case Tokens.SERIALIZABLE :read();level = SessionInterface.TX_SERIALIZABLE;break;

---------------------------Clone group no  390 for hash 8d38baecefbff3b9a328ffb62f938ef2--------------------



case FUNC_ACOS :case FUNC_ASCII :case FUNC_ASIN :case FUNC_ATAN :

case FUNC_ACOS :case FUNC_ASCII :case FUNC_ASIN :case FUNC_ATAN :

---------------------------Clone group no  391 for hash e2ddded7fb9cc49dfa079be1d1a0794f--------------------



st = netConn.createStatement();rs = st.executeQuery(\"SELECT * FROM alltypes WHERE id in (1, 2)\");assertTrue(\"Got no rows with id in (1, 2)\", rs.next());

st = netConn.createStatement();rs = st.executeQuery(\"SELECT * FROM alltypes WHERE id in (1, 2)\");assertTrue(\"Got no rows with id in (1, 2)\", rs.next());

st = netConn.createStatement();rs = st.executeQuery(\"SELECT * FROM alltypes WHERE id in (1, 2)\");assertTrue(\"Got no rows with id in (1, 2)\", rs.next());

st = netConn.createStatement();rs = st.executeQuery(\"SELECT * FROM alltypes WHERE id in (1, 2)\");assertTrue(\"Got no rows with id in (1, 2)\", rs.next());

st = netConn.createStatement();rs = st.executeQuery(\"SELECT * FROM alltypes WHERE id in (1, 2)\");assertTrue(\"Got no rows with id in (1, 2)\", rs.next());

st = netConn.createStatement();rs = st.executeQuery(\"SELECT * FROM alltypes WHERE id in (1, 2)\");assertTrue(\"Got no rows with id in (1, 2)\", rs.next());

st = netConn.createStatement();rs = st.executeQuery(\"SELECT * FROM alltypes WHERE id in (1, 2)\");assertTrue(\"Got no rows with id in (1, 2)\", rs.next());

st = netConn.createStatement();rs = st.executeQuery(\"SELECT * FROM alltypes WHERE id in (1, 2)\");assertTrue(\"Got no rows with id in (1, 2)\", rs.next());

st = netConn.createStatement();rs = st.executeQuery(\"SELECT * FROM alltypes WHERE id in (1, 2)\");assertTrue(\"Got no rows with id in (1, 2)\", rs.next());

st = netConn.createStatement();rs = st.executeQuery(\"SELECT * FROM alltypes WHERE id in (1, 2)\");assertTrue(\"Got no rows with id in (1, 2)\", rs.next());

st = netConn.createStatement();rs = st.executeQuery(\"SELECT * FROM alltypes WHERE id in (1, 2)\");assertTrue(\"Got no rows with id in (1, 2)\", rs.next());

st = netConn.createStatement();rs = st.executeQuery(\"SELECT * FROM alltypes WHERE id in (1, 2)\");assertTrue(\"Got no rows with id in (1, 2)\", rs.next());

st = netConn.createStatement();rs = st.executeQuery(\"SELECT * FROM alltypes WHERE id in (1, 2)\");assertTrue(\"Got no rows with id in (1, 2)\", rs.next());

st = netConn.createStatement();rs = st.executeQuery(\"SELECT * FROM alltypes WHERE id in (1, 2)\");assertTrue(\"Got no rows with id in (1, 2)\", rs.next());

st = netConn.createStatement();rs = st.executeQuery(\"SELECT * FROM alltypes WHERE id in (1, 2)\");assertTrue(\"Got no rows with id in (1, 2)\", rs.next());

st = netConn.createStatement();rs = st.executeQuery(\"SELECT * FROM alltypes WHERE id in (1, 2)\");assertTrue(\"Got no rows with id in (1, 2)\", rs.next());

st = netConn.createStatement();rs = st.executeQuery(\"SELECT * FROM alltypes WHERE id in (1, 2)\");assertTrue(\"Got no rows with id in (1, 2)\", rs.next());

st = netConn.createStatement();rs = st.executeQuery(\"SELECT * FROM alltypes WHERE id in (1, 2)\");assertTrue(\"Got no rows with id in (1, 2)\", rs.next());

st = netConn.createStatement();rs = st.executeQuery(\"SELECT * FROM alltypes WHERE id in (1, 2)\");assertTrue(\"Got no rows with id in (1, 2)\", rs.next());

---------------------------Clone group no  392 for hash 783f8ae8b04af84138a034b8b53274b8--------------------



break;case Types.SQL_TIMESTAMP :case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :

break;case Types.SQL_TIMESTAMP :case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :

break;case Types.SQL_TIMESTAMP :case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :

break;case Types.SQL_TIMESTAMP :case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :

---------------------------Clone group no  393 for hash b98cf91858812682a2557cf329453ca3--------------------



updateUserSettings();sqlExpandMode = null;return;

updateUserSettings();sqlExpandMode = null;return;

updateUserSettings();sqlExpandMode = null;return;

---------------------------Clone group no  394 for hash af76f0e0154980078375cbd0efd9e0af--------------------



break;default :throw Error.error(ErrorCode.X_42561);

break;default :throw Error.error(ErrorCode.X_42561);

break;default :throw Error.error(ErrorCode.X_42561);

break;default :throw Error.error(ErrorCode.X_42561);

---------------------------Clone group no  395 for hash 605f3cfa1be1b1ac009bb83737b7bf29--------------------



rs = cs.getResultSet();rs.next();assertEquals(\"INFORMATION_SCHEMA\", rs.getString(2));

rs = cs.getResultSet();rs.next();assertEquals(\"INFORMATION_SCHEMA\", rs.getString(2));

rs = cs.getResultSet();rs.next();assertEquals(\"INFORMATION_SCHEMA\", rs.getString(2));

---------------------------Clone group no  396 for hash fb8874cc8d594f4c0b47303d924c373e--------------------



if (rs == null)
                        throw new BadSpecial(
                            SqltoolRB.metadata_fetch_fail.getString());displaySqlResults(null, rs, listMDSchemaCols, filter, false);return;

if (rs == null)
                        throw new BadSpecial(
                            SqltoolRB.metadata_fetch_fail.getString());displaySqlResults(null, rs, listMDSchemaCols, filter, false);return;

---------------------------Clone group no  397 for hash 0238433d0f927db38ac82440bcfa664c--------------------



addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);    //0addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);

addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);

addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);     // not nulladdColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);    // not null

addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);     // not nulladdColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);    // not null

addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);           //0addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);

addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);         // not nulladdColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);        // not null

addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);                        // not nulladdColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);                       // not null

addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);        // not nulladdColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);       // not null

addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);

addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);      // not nulladdColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);     // not null

addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);

---------------------------Clone group no  398 for hash 82e46029a7f53f9c4322a64d3539f108--------------------



Object[] args = new Object[] {
            name, newName
        };HsqlName[] writeLockNames =
            database.schemaManager.getCatalogNameArray();return new StatementSchema(sql, StatementTypes.RENAME_OBJECT, args,
                                   null, writeLockNames);

Object[] args    = new Object[] {
            name, newName
        };HsqlName[] writeLockNames =
            database.schemaManager.getCatalogNameArray();return new StatementSchema(sql, StatementTypes.RENAME_OBJECT, args,
                                   null, writeLockNames);

---------------------------Clone group no  399 for hash 001d86db4f07fa57d296a097fd26e463--------------------



TriggerDef td         = trigVec[i];boolean    sqlTrigger = td instanceof TriggerDefSQL;if (td.hasOldTable()) {

                //
            }td.pushPair(session, null, null);

TriggerDef td         = trigVec[i];boolean    sqlTrigger = td instanceof TriggerDefSQL;if (td.hasOldTable()) {

                //
            }td.pushPair(session, null, null);

---------------------------Clone group no  400 for hash a394666a594e08d6e93cd6e76c39836d--------------------



case OpTypes.VALUE :return valueData;case OpTypes.SIMPLE_COLUMN :{
                Object value =
                    session.sessionContext.rangeIterators[rangePosition]
                        .getCurrent(columnIndex);

                return value;
            }case OpTypes.NEGATE :return ((NumberType) dataType).negate(
                    nodes[LEFT].getValue(session, nodes[LEFT].dataType));

case OpTypes.VALUE :return valueData;case OpTypes.SIMPLE_COLUMN :{
                Object value =
                    session.sessionContext.rangeIterators[rangePosition]
                        .getCurrent(columnIndex);

                return value;
            }case OpTypes.NEGATE :return ((NumberType) dataType).negate(
                    nodes[LEFT].getValue(session, nodes[LEFT].dataType));

---------------------------Clone group no  401 for hash 092044b870937ad6233d16212492cc3a--------------------



result.lobID       = id;result.blockOffset = offset;result.byteBlock   = block;result.blockLength = block.length;return result;

result.lobID       = id;result.blockOffset = offset;result.byteBlock   = block;result.blockLength = block.length;return result;

---------------------------Clone group no  402 for hash 06abb06809c2ba79cfe3689803635a63--------------------



StopWatch        sw        = new StopWatch();java.util.Random randomgen = new java.util.Random();int              i         = 0;boolean          slow      = false;int              count     = 0;int              random    = 0;

StopWatch        sw        = new StopWatch();java.util.Random randomgen = new java.util.Random();int              i         = 0;boolean          slow      = false;int              count     = 0;int              random    = 0;

StopWatch        sw        = new StopWatch();java.util.Random randomgen = new java.util.Random();int              i         = 0;boolean          slow      = false;int              count     = 0;int              random    = 0;

StopWatch        sw        = new StopWatch();java.util.Random randomgen = new java.util.Random();int              i         = 0;boolean          slow      = false;int              count     = 0;int              random    = 0;

StopWatch        sw        = new StopWatch();java.util.Random randomgen = new java.util.Random();int              i         = 0;boolean          slow      = false;int              count     = 0;int              random    = 0;

StopWatch        sw        = new StopWatch();java.util.Random randomgen = new java.util.Random();int              i         = 0;boolean          slow      = false;int              count     = 0;int              random    = 0;

---------------------------Clone group no  403 for hash b055f9b7d1b613e5c26a012221997e82--------------------



int    length      = a.length > b.length ? a.length
                                                 : b.length;int    shortLength = a.length > b.length ? b.length
                                                 : a.length;byte[] map         = new byte[length];if (length != shortLength) {
            byte[] source = a.length > b.length ? a
                                                : b;

            System.arraycopy(source, shortLength, map, shortLength,
                             length - shortLength);
        }

int    length      = a.length > b.length ? a.length
                                                 : b.length;int    shortLength = a.length > b.length ? b.length
                                                 : a.length;byte[] map         = new byte[length];if (length != shortLength) {
            byte[] source = a.length > b.length ? a
                                                : b;

            System.arraycopy(source, shortLength, map, shortLength,
                             length - shortLength);
        }

---------------------------Clone group no  404 for hash 2ee1b6ac5a0fe76e0bd289865ac749d3--------------------



int position = getPosition();read();if (!readIfThis(Tokens.OPENBRACKET)) {
            rewind(position);

            return null;
        }Expression c = XreadValueExpression();readThis(Tokens.COMMA);

int position = getPosition();read();if (!readIfThis(Tokens.OPENBRACKET)) {
            rewind(position);

            return null;
        }Expression c = XreadValueExpression();readThis(Tokens.COMMA);

---------------------------Clone group no  405 for hash f6bf347b92043426bb199063eccda9b8--------------------



// Reduce powers
        i = startAtomIndex;atom = atoms.get(i);if (atom.op != null)
            throw new IllegalStateException(
                    \"Expected initial value expected but got operation \"
                    + atom.op);

// Reduce multiplication and division
        i = startAtomIndex;atom = atoms.get(i);if (atom.op != null)
            throw new IllegalStateException(
                    \"Expected initial value expected but got operation \"
                    + atom.op);

---------------------------Clone group no  406 for hash 6433c341829dade06b6d87af693bf2a2--------------------



Dimension d    = Toolkit.getDefaultToolkit().getScreenSize();Dimension size = fMain.getSize();// (ulrivo): full size on screen with less than 640 width
        if (d.width >= 640) {
            fMain.setLocation((d.width - size.width) / 2,
                              (d.height - size.height) / 2);
        } else {
            fMain.setLocation(0, 0);
            fMain.setSize(d);
        }

Dimension d    = Toolkit.getDefaultToolkit().getScreenSize();Dimension size = fMain.getSize();// (ulrivo): full size on screen with less than 640 width
        if (d.width >= 640) {
            fMain.setLocation((d.width - size.width) / 2,
                              (d.height - size.height) / 2);
        } else {
            fMain.setLocation(0, 0);
            fMain.setSize(d);
        }

---------------------------Clone group no  407 for hash 5b15108de17397c67617479335826e9b--------------------



result.metaData     = new ResultMetaData(in);result.navigator    = new RowSetNavigatorClient();result.navigator.read(in, result.metaData);break;

result.metaData  = new ResultMetaData(in);result.navigator = new RowSetNavigatorClient();result.navigator.read(in, result.metaData);break;

---------------------------Clone group no  408 for hash 50097e3a06b183e89467aa4730962aff--------------------



Object[]        array      = (Object[]) a;TypedComparator comparator = session.getComparator();comparator.setType(dataType, sort);

Object[]        array      = (Object[]) a;TypedComparator comparator = session.getComparator();comparator.setType(dataType, sort);

---------------------------Clone group no  409 for hash c96c87cd51ac6915dc3c74fc7e234f70--------------------



case TextFileSettings.CR_CHAR :wasCR = true;break;case TextFileSettings.LF_CHAR :

case TextFileSettings.CR_CHAR :wasCR = true;break;case TextFileSettings.LF_CHAR :

---------------------------Clone group no  410 for hash 2cb6c836b52a46a0a55dac48a8822531--------------------



database.schemaManager.recompileDependentObjects(tn);tn.compile(session, null);table = tn;

database.schemaManager.recompileDependentObjects(tn);tn.compile(session, null);table = tn;

---------------------------Clone group no  411 for hash 5cd9891355f0b450f69a4e5b91e06490--------------------



checkClosed();if (pos < 1) {
            throw JDBCUtil.outOfRangeArgument(\"pos: \" + pos);
        }if (!isWritable) {
            throw JDBCUtil.notUpdatableColumn();
        }startUpdate();

checkClosed();if (pos < 1) {
            throw JDBCUtil.outOfRangeArgument(\"pos: \" + pos);
        }if (!isWritable) {
            throw JDBCUtil.notUpdatableColumn();
        }startUpdate();

checkClosed();if (pos < 1) {
            throw JDBCUtil.outOfRangeArgument(\"pos: \" + pos);
        }if (!isWritable) {
            throw JDBCUtil.notUpdatableColumn();
        }startUpdate();

---------------------------Clone group no  412 for hash fc83b70e85496a6f1fb0d3b1f8d7e80c--------------------



t          = (TransferTable) tTable.elementAt(i);t.tracer   = tracer;t.sourceDb = (TransferDb) sourceDb;t.destDb   = targetDb;

t          = (TransferTable) tTable.elementAt(i);t.tracer   = tracer;t.sourceDb = (TransferDb) sourceDb;t.destDb   = targetDb;

---------------------------Clone group no  413 for hash 4295269b3272e391918dc47c56fe1d5e--------------------



row[event_object_catalog] = database.getCatalogName().name;row[event_object_schema] = trigger.getTable().getSchemaName().name;row[event_object_table]   = trigger.getTable().getName().name;

row[event_object_catalog] = database.getCatalogName().name;row[event_object_schema] =
                    trigger.getTable().getSchemaName().name;row[event_object_table]  = trigger.getTable().getName().name;

---------------------------Clone group no  414 for hash 72e13ec9e3aaebf13b99c88ebe26588c--------------------



StringBuffer b = new StringBuffer(blanks);for (int i = 0; i < blanks; i++) {
            b.append(' ');
        }sb = new StringBuffer();

StringBuffer b = new StringBuffer(blanks);for (int i = 0; i < blanks; i++) {
            b.append(' ');
        }sb = new StringBuffer();

StringBuffer b = new StringBuffer(blanks);for (int i = 0; i < blanks; i++) {
            b.append(' ');
        }sb = new StringBuffer();

---------------------------Clone group no  415 for hash bfab6daba9cf53ac327e193315d7397a--------------------



final int table_cat        = 0;final int table_schem      = 1;final int table_name       = 2;final int column_name      = 3;

// column number mappings
        final int table_cat                  = 0;final int table_schem                = 1;final int table_name                 = 2;final int column_name                = 3;

---------------------------Clone group no  416 for hash 8f2cf71ef48c9e68d5dd52144af7ce6e--------------------



pResult.removeAll();pResult.add(txtResultScroll, BorderLayout.CENTER);pResult.doLayout();

pResult.removeAll();pResult.add(txtResultScroll, BorderLayout.CENTER);pResult.doLayout();

---------------------------Clone group no  417 for hash 4e27cb4d5760a932f52bf54a695f3524--------------------



Object[]    compareData = null;RowIterator it;Object[]    otherData = null;sortFull(session);other.sortFull(session);it = queryExpression.fullIndex.emptyIterator();

Object[]    compareData = null;RowIterator it;Object[]    otherData = null;sortFull(session);other.sortFull(session);it = queryExpression.fullIndex.emptyIterator();

---------------------------Clone group no  418 for hash 3190f667e8c4d3173d1d4359bfa434d1--------------------



case FUNC_CHAR :case FUNC_COS :case FUNC_COT :

case FUNC_CHAR :case FUNC_COS :case FUNC_COT :

---------------------------Clone group no  419 for hash ea8bcad706ddac30fea98d401b2c765d--------------------



return result > 0 ? Boolean.TRUE
                                  : Boolean.FALSE;case OpTypes.GREATER_EQUAL :case OpTypes.GREATER_EQUAL_PRE :

return result > 0 ? Boolean.TRUE
                                  : Boolean.FALSE;case OpTypes.GREATER_EQUAL :case OpTypes.GREATER_EQUAL_PRE :

---------------------------Clone group no  420 for hash 4f6bd2bf5221e613358be4dbd621afeb--------------------



addColumn(t, \"GRANTOR\", SQL_IDENTIFIER);          // not nulladdColumn(t, \"GRANTEE\", SQL_IDENTIFIER);          // not nulladdColumn(t, \"SPECIFIC_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"SPECIFIC_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"SPECIFIC_NAME\", SQL_IDENTIFIER);    // not nulladdColumn(t, \"ROUTINE_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"ROUTINE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"ROUTINE_NAME\", SQL_IDENTIFIER);addColumn(t, \"PRIVILEGE_TYPE\", CHARACTER_DATA);addColumn(t, \"IS_GRANTABLE\", YES_OR_NO);

addColumn(t, \"GRANTOR\", SQL_IDENTIFIER);           // not nulladdColumn(t, \"GRANTEE\", SQL_IDENTIFIER);           // not nulladdColumn(t, \"SPECIFIC_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"SPECIFIC_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"SPECIFIC_NAME\", SQL_IDENTIFIER);     // not nulladdColumn(t, \"ROUTINE_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"ROUTINE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"ROUTINE_NAME\", SQL_IDENTIFIER);      // not nulladdColumn(t, \"PRIVILEGE_TYPE\", CHARACTER_DATA);    // not nulladdColumn(t, \"IS_GRANTABLE\", YES_OR_NO);           // not null

---------------------------Clone group no  421 for hash 77ad789c309442d44b1de9e362039086--------------------



Constraint   constraint;Object[]     row;//
        tables =
            database.schemaManager.databaseObjectIterator(SchemaObject.TABLE);

Constraint   constraint;Object[]     row;tables =
            database.schemaManager.databaseObjectIterator(SchemaObject.TABLE);

---------------------------Clone group no  422 for hash a9ba74c98710226f18cd0a1ca0af32d9--------------------



addColumn(t, \"SPECIFIC_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"SPECIFIC_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"SPECIFIC_NAME\", SQL_IDENTIFIER);      // not null

addColumn(t, \"SPECIFIC_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"SPECIFIC_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"SPECIFIC_NAME\", SQL_IDENTIFIER);

addColumn(t, \"SPECIFIC_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"SPECIFIC_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"SPECIFIC_NAME\", SQL_IDENTIFIER);    // not null

addColumn(t, \"SPECIFIC_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"SPECIFIC_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"SPECIFIC_NAME\", SQL_IDENTIFIER);

addColumn(t, \"SPECIFIC_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"SPECIFIC_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"SPECIFIC_NAME\", SQL_IDENTIFIER);     // not null

addColumn(t, \"SPECIFIC_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"SPECIFIC_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"SPECIFIC_NAME\", SQL_IDENTIFIER);

addColumn(t, \"SPECIFIC_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"SPECIFIC_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"SPECIFIC_NAME\", SQL_IDENTIFIER);

addColumn(t, \"SPECIFIC_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"SPECIFIC_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"SPECIFIC_NAME\", SQL_IDENTIFIER);

addColumn(t, \"SPECIFIC_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"SPECIFIC_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"SPECIFIC_NAME\", SQL_IDENTIFIER);

addColumn(t, \"SPECIFIC_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"SPECIFIC_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"SPECIFIC_NAME\", SQL_IDENTIFIER);

addColumn(t, \"SPECIFIC_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"SPECIFIC_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"SPECIFIC_NAME\", SQL_IDENTIFIER);    // not null

addColumn(t, \"SPECIFIC_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"SPECIFIC_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"SPECIFIC_NAME\", SQL_IDENTIFIER);

---------------------------Clone group no  423 for hash cdd58ad1443b840fef54851ca2e0b307--------------------



persistenceScope = SCOPE_STATEMENT;isSessionBased   = true;break;

persistenceScope = SCOPE_STATEMENT;isSessionBased   = true;break;

persistenceScope = SCOPE_STATEMENT;isSessionBased   = true;break;

---------------------------Clone group no  424 for hash 2cbfe215012623b2361e78226f493721--------------------



Object[] data = (Object[]) nav.getNext();Object[] newData =
                (Object[]) ArrayUtil.resizeArrayIfDifferent(data, columnCount);insertData(session, store, newData);

Object[] data = (Object[]) nav.getNext();Object[] newData =
                (Object[]) ArrayUtil.resizeArrayIfDifferent(data, columnCount);insertData(session, store, newData);

---------------------------Clone group no  425 for hash 7e0503f4b30e6dbad7db46e8234eb48c--------------------



final int tableValue = table[patternIndex];matchStart += (patternIndex - tableValue);if (patternIndex > 0) {
                    patternIndex = tableValue;
                }patternIndex++;

final int tableValue = table[patternIndex];matchStart += (patternIndex - tableValue);if (patternIndex > 0) {
                    patternIndex = tableValue;
                }patternIndex++;

---------------------------Clone group no  426 for hash 74c64ebbdb31eb4e439f5f00ad314bc8--------------------



case '0' :case '1' :case '2' :case '3' :case '4' :case '5' :case '6' :case '7' :case '8' :case '9' :

case '0' :case '1' :case '2' :case '3' :case '4' :case '5' :case '6' :case '7' :case '8' :case '9' :

---------------------------Clone group no  427 for hash 32faf8a6028a1cb83d92bfee13827b14--------------------



long   address   = (long) blockAddress * lobBlockSize;int    count     = blockCount * lobBlockSize;byte[] dataBytes = new byte[count];

long   address   = (long) blockAddress * lobBlockSize;int    count     = blockCount * lobBlockSize;byte[] dataBytes = new byte[count];

---------------------------Clone group no  428 for hash d30481a108f51ed98c6f2105db92c0f3--------------------



super(type);nodes        = new Expression[BINARY];nodes[LEFT]  = left;nodes[RIGHT] = right;

super(type);nodes        = new Expression[BINARY];nodes[LEFT]  = left;nodes[RIGHT] = right;

super(type);nodes        = new Expression[BINARY];nodes[LEFT]  = left;nodes[RIGHT] = right;

---------------------------Clone group no  429 for hash c24ed54a70cde0ce3b4c9dedb4b78c4a--------------------



Label l = new Label(s);l.setBackground(SystemColor.control);return l;

Label l = new Label(s);l.setBackground(SystemColor.control);return l;

---------------------------Clone group no  430 for hash b2216d5dd8d9f1f791cfec935a97d22b--------------------



if (isFullyAccessibleByRole(table.getName())) {
            return true;
        }Right right = (Right) fullRightsMap.get(table.getName());if (right == null) {
            return false;
        }

if (isFullyAccessibleByRole(table.getName())) {
            return true;
        }Right right = (Right) fullRightsMap.get(table.getName());if (right == null) {
            return false;
        }

---------------------------Clone group no  431 for hash ce91facd9c5db27eb7117543ca3a2124--------------------



break;default :return null;

break;default:return null;

---------------------------Clone group no  432 for hash 04295313ef69632d746e1d1cdf7dd2dd--------------------



StringBuffer sb = new StringBuffer();sb.append('\\n');for (int i = 0; i < blanks; i++) {
            sb.append(' ');
        }sb.append(Tokens.T_STATEMENT);return sb.toString();

StringBuffer sb = new StringBuffer();sb.append('\\n');for (int i = 0; i < blanks; i++) {
            sb.append(' ');
        }sb.append(Tokens.T_STATEMENT);return sb.toString();

StringBuffer sb = new StringBuffer();sb.append('\\n');for (int i = 0; i < blanks; i++) {
            sb.append(' ');
        }sb.append(Tokens.T_STATEMENT);return sb.toString();

StringBuffer sb = new StringBuffer();sb.append('\\n');for (int i = 0; i < blanks; i++) {
            sb.append(' ');
        }sb.append(Tokens.T_STATEMENT);return sb.toString();

---------------------------Clone group no  433 for hash c7ca043fb63c12021bfcaf5619d426d0--------------------



default :end = true;break;

default :end = true;break;

default :end = true;break;

// fall through
                default :end = true;break;

// fall through
                default :end = true;break;

default :end = true;break;

default :end = true;break;

---------------------------Clone group no  434 for hash e1a5798f33c02a03b0821fc868017939--------------------



Result          resultOut          = null;RowSetNavigator generatedNavigator = null;if (generatedIndexes != null) {
            resultOut = Result.newUpdateCountResult(generatedResultMetaData,
                    0);
            generatedNavigator = resultOut.getChainedResult().getNavigator();
        }

Result          resultOut          = null;RowSetNavigator generatedNavigator = null;if (generatedIndexes != null) {
            resultOut = Result.newUpdateCountResult(generatedResultMetaData,
                    0);
            generatedNavigator = resultOut.getChainedResult().getNavigator();
        }

---------------------------Clone group no  435 for hash b7e66833864228b618ae9fc420ff9d95--------------------



if (!set.add(token.tokenType)) {
                                throw unexpectedToken();
                            }read();long value = readBigint();

if (!set.add(token.tokenType)) {
                                throw unexpectedToken();
                            }read();long value = readBigint();

---------------------------Clone group no  436 for hash 33fc12d7c2eefbdb46aad5b6a9fa8c4a--------------------



populateBySerialIntKeys(uMap, hMap, testSize);compareByUIterator(uMap, hMap);compareByHIterator(uMap, hMap);

// -
            populateBySerialIntKeys(uMap, hMap, testSize);compareByUIterator(uMap, hMap);compareByHIterator(uMap, hMap);

---------------------------Clone group no  437 for hash 526ac70abd00130dd442e9a9a7b83a2e--------------------



break;case Types.SQL_NUMERIC :case Types.SQL_DECIMAL :

break;case Types.SQL_NUMERIC :case Types.SQL_DECIMAL :

break;case Types.SQL_NUMERIC :case Types.SQL_DECIMAL :

break;case Types.SQL_NUMERIC :case Types.SQL_DECIMAL :

break;case Types.SQL_NUMERIC :case Types.SQL_DECIMAL :

break;case Types.SQL_NUMERIC :case Types.SQL_DECIMAL :

break;case Types.SQL_NUMERIC :case Types.SQL_DECIMAL :

break;case Types.SQL_NUMERIC :case Types.SQL_DECIMAL :

break;case Types.SQL_NUMERIC :case Types.SQL_DECIMAL :

---------------------------Clone group no  438 for hash f0305de336b5e0ef604fe4f412873363--------------------



// fall through
            case OpTypes.GREATER :case OpTypes.GREATER_EQUAL :case OpTypes.GREATER_EQUAL_PRE :

case OpTypes.GREATER :case OpTypes.GREATER_EQUAL :case OpTypes.GREATER_EQUAL_PRE :

case OpTypes.GREATER :case OpTypes.GREATER_EQUAL :case OpTypes.GREATER_EQUAL_PRE :

case OpTypes.GREATER :case OpTypes.GREATER_EQUAL :case OpTypes.GREATER_EQUAL_PRE :

case OpTypes.GREATER :case OpTypes.GREATER_EQUAL :case OpTypes.GREATER_EQUAL_PRE :

case OpTypes.GREATER :case OpTypes.GREATER_EQUAL :case OpTypes.GREATER_EQUAL_PRE :

case OpTypes.GREATER :case OpTypes.GREATER_EQUAL :case OpTypes.GREATER_EQUAL_PRE :

---------------------------Clone group no  439 for hash aeaa950bbffbaa5c0366452005d7ce2b--------------------



result.id          = in.readLong();result.updateCount = in.readInt();result.fetchSize   = in.readInt();

result.id           = in.readLong();result.updateCount  = in.readInt();result.fetchSize    = in.readInt();

---------------------------Clone group no  440 for hash b23cca404ac5e460cf6111865233c862--------------------



break;case Tokens.TABLE :read();

break;case Tokens.TABLE :read();

break;case Tokens.TABLE :read();

---------------------------Clone group no  441 for hash 8de0952da6ca62d56520b6a615d231c4--------------------



if (e == null) {
            return null;
        }if (minus) {
            e = new ExpressionArithmetic(OpTypes.NEGATE, e);
        }return e;

if (e == null) {
            return null;
        }if (minus) {
            e = new ExpressionArithmetic(OpTypes.NEGATE, e);
        }return e;

---------------------------Clone group no  442 for hash de31c0578ff61c7d667c59b21a90d1d1--------------------



Connection        connection = super.newConnection();PreparedStatement insertStatement;int               iUpdateCount = 0;// Set date of my birthday ;-)
        calGenerate.set(1995, 9, 15, 1, 2, 3);

Connection        connection = super.newConnection();PreparedStatement insertStatement;int               iUpdateCount = 0;// Set date of my birthday ;-)
        calGenerate.set(1995, 9, 15, 1, 2, 3);

---------------------------Clone group no  443 for hash 74642ecbb6a050c96cf337ea740b5fb3--------------------



HsqlName name       = (HsqlName) arguments[0];int      objectType = ((Integer) arguments[1]).intValue();boolean  cascade = ((Boolean) arguments[2]).booleanValue();boolean ifExists = ((Boolean) arguments[3]).booleanValue();

HsqlName name       = (HsqlName) arguments[0];int      objectType = ((Integer) arguments[1]).intValue();boolean  cascade = ((Boolean) arguments[2]).booleanValue();boolean ifExists = ((Boolean) arguments[3]).booleanValue();

---------------------------Clone group no  444 for hash 693439ce239b7a81b89909473c81e041--------------------



int size = object.getRealSize(cache.rowOut);size = cache.rowOut.getStorageSize(size);object.setStorageSize(size);

int size = object.getRealSize(cache.rowOut);size = cache.rowOut.getStorageSize(size);object.setStorageSize(size);

---------------------------Clone group no  445 for hash 7113b282e690857c841e5d5e9c7eda1b--------------------



int position = getPosition();read();if (!readIfThis(Tokens.OPENBRACKET)) {
            rewind(position);

            return null;
        }Expression casewhen    = null;

int position = getPosition();read();if (!readIfThis(Tokens.OPENBRACKET)) {
            rewind(position);

            return null;
        }Expression casewhen = null;

int position = getPosition();read();if (!readIfThis(Tokens.OPENBRACKET)) {
            rewind(position);

            return null;
        }Expression casewhen = null;

---------------------------Clone group no  446 for hash acb71e8aa13c3495a7b562475001aee8--------------------



case java.sql.Types.VARCHAR :case java.sql.Types.BLOB :case java.sql.Types.CLOB :

case java.sql.Types.VARCHAR :case java.sql.Types.BLOB :case java.sql.Types.CLOB :

---------------------------Clone group no  447 for hash e6db60d9ef39b680e0563886d049f14d--------------------



int columnIndex = findColumn(columnLabel);startUpdate(columnIndex);preparedStatement.setCharacterStream(columnIndex, reader);

int columnIndex = findColumn(columnLabel);startUpdate(columnIndex);preparedStatement.setCharacterStream(columnIndex, reader);

---------------------------Clone group no  448 for hash 71325dd074279480cd8830d2e5b690ea--------------------



break;/*
            case FUNCTION_TRANSCODING :
                break;
            case FUNCTION_TRANSLITERATION :
                break;
            case FUNCTION_REGEX_TRANSLITERATION :
                break;
             */
            case FUNC_TRIM_CHAR :case FUNC_TRIM_BINARY :

break;/*
            case FUNCTION_TRANSCODING :
                break;
            case FUNCTION_TRANSLITERATION :
                break;
            case FUNCTION_REGEX_TRANSLITERATION :
                break;
             */
            case FUNC_TRIM_CHAR :case FUNC_TRIM_BINARY :

break;/*
            case FUNCTION_NORMALIZE :
                break;
            */
            case FUNC_TRIM_CHAR :case FUNC_TRIM_BINARY :

---------------------------Clone group no  449 for hash 43ca54f990b2dbb8f73552cf55ff236d--------------------



scanner.scanNext();scanner.scanNext();tableName = scanner.getString();

scanner.scanNext();scanner.scanNext();tableName = scanner.getString();

---------------------------Clone group no  450 for hash c26c0ea2ede9c2cb88e367d785ee62f4--------------------



read();long value = readBigint();sequence.setMaxValueNoCheck(value);break;

read();long value = readBigint();sequence.setMaxValueNoCheck(value);break;

---------------------------Clone group no  451 for hash 015c5e43a7fd4896cd52c81e7559ba5f--------------------



case Types.SQL_REAL :case Types.SQL_DOUBLE :return SQL_DOUBLE;case Types.SQL_NUMERIC :

// fall through
            case Types.SQL_REAL :case Types.SQL_DOUBLE :return SQL_DOUBLE;case Types.SQL_NUMERIC :

---------------------------Clone group no  452 for hash ea23ccbd5075ff0ac0e8b0366d2039dd--------------------



resultIn       = null;resultOut      = null;isClosed       = true;

resultIn          = null;resultOut         = null;isClosed          = true;

---------------------------Clone group no  453 for hash d396eb45a06355e3d06d99fd2eee7da1--------------------



iUpdateCount = insertStatement.executeUpdate();insertStatement.close();Assert.assertEquals(
            \"Exactly one record with time data shoud have been inserted.\",
            iUpdateCount, 1);// Now select it back to be sure it is there
        PreparedStatement selectStatement = null;PreparedStatement deleteStatement = null;ResultSet         results         = null;java.sql.Time     retrievedTime;int               iDeletedCount = 0;java.sql.Time     selectTime;selectStatement = connection.prepareStatement(SELECT_TIME);

iUpdateCount = insertStatement.executeUpdate();insertStatement.close();Assert.assertEquals(
            \"Exactly one record with time data shoud have been inserted.\",
            iUpdateCount, 1);// Now select it back to be sure it is there
        PreparedStatement selectStatement = null;PreparedStatement deleteStatement = null;ResultSet         results         = null;java.sql.Time     retrievedTime;int               iDeletedCount = 0;java.sql.Time     selectTime;selectStatement = connection.prepareStatement(SELECT_TIME);

---------------------------Clone group no  454 for hash 3d6c60e4eef2435dc103dea2d34c1b70--------------------



result.lobID       = id;result.blockOffset = offset;result.charBlock   = chars;result.blockLength = chars.length;return result;

result.lobID       = id;result.blockOffset = offset;result.charBlock   = chars;result.blockLength = chars.length;return result;

---------------------------Clone group no  455 for hash 6b122ef8e1775406e62a8b246ec1f32e--------------------



case Tokens.DATE :case Tokens.TIME :case Tokens.TIMESTAMP :case Tokens.INTERVAL :

case Tokens.DATE :case Tokens.TIME :case Tokens.TIMESTAMP :case Tokens.INTERVAL :

---------------------------Clone group no  456 for hash 00c72ac8e64e06107346f752bc303897--------------------



read();readIfThis(Tokens.OUTER);readThis(Tokens.JOIN);left = true;

read();readIfThis(Tokens.OUTER);readThis(Tokens.JOIN);left  = true;

---------------------------Clone group no  457 for hash 69c7b508cf2792f1c4ac8f9bb9c28259--------------------



ps.setBytes(2, data);ps.setBytes(3, data);ps.setBytes(4, data);ps.executeUpdate();

ps.setBytes(2, data);ps.setBytes(3, data);ps.setBytes(4, data);ps.executeUpdate();

---------------------------Clone group no  458 for hash 9d7a41922ecd23b99ab5ab4d8a9c58e9--------------------



break;/*
            case FUNCTION_CHAR_NORMALIZE :
                break;
            */
            case FUNC_OVERLAY_CHAR :case FUNC_OVERLAY_BINARY :

break;case FUNC_OVERLAY_CHAR :case FUNC_OVERLAY_BINARY :

break;/*
            case FUNCTION_TRANSCODING :
                break;
            case FUNCTION_TRANSLITERATION :
                break;
            case FUNCTION_REGEX_TRANSLITERATION :
                break;
             */
            case FUNC_OVERLAY_CHAR :case FUNC_OVERLAY_BINARY :

---------------------------Clone group no  459 for hash 4009e9a1f4192cc23376b3767733fe55--------------------



Stmt.execute(Query);Stmt.clearWarnings();if (transactions) {
                Conn.commit();
            }Stmt.close();

Stmt.execute(Query);Stmt.clearWarnings();/*
            Stmt.execute(\"SET TABLE ACCOUNTS SOURCE \\\"ACCOUNTS.TXT\\\"\");
            Stmt.execute(\"SET TABLE BRANCHES SOURCE \\\"BBRANCHES.TXT\\\"\");
            Stmt.execute(\"SET TABLE TELLERS SOURCE \\\"TELLERS.TXT\\\"\");
            Stmt.execute(\"SET TABLE HISTORY SOURCE \\\"HISTORY.TXT\\\"\");
*/
            if (transactions) {
                Conn.commit();
            }Stmt.close();

---------------------------Clone group no  460 for hash ed8ad1f016e9da9ab36576c7f61d6d73--------------------



NodeAVL x          = getAccessor(store);NodeAVL n          = null;NodeAVL result     = null;Row     currentRow = null;

NodeAVL  x          = getAccessor(store);NodeAVL  n          = null;NodeAVL  result     = null;Row      currentRow = null;

---------------------------Clone group no  461 for hash f6436fad4219458d38d0e6a74c8fd95c--------------------



database        = db;lobSession      = database.sessionManager.getSysLobSession();rowActionMap    = new LongKeyHashMap(10000);

database     = db;lobSession   = database.sessionManager.getSysLobSession();rowActionMap = new LongKeyHashMap(10000);

---------------------------Clone group no  462 for hash aa60cb1838d189bc5c227eb9ce430b2e--------------------



Stmt.execute(Query);Stmt.clearWarnings();if (transactions) {
                Conn.commit();
            }

Stmt.execute(Query);Stmt.clearWarnings();/*
            Stmt.execute(\"SET TABLE ACCOUNTS SOURCE \\\"ACCOUNTS.TXT\\\"\");
            Stmt.execute(\"SET TABLE BRANCHES SOURCE \\\"BBRANCHES.TXT\\\"\");
            Stmt.execute(\"SET TABLE TELLERS SOURCE \\\"TELLERS.TXT\\\"\");
            Stmt.execute(\"SET TABLE HISTORY SOURCE \\\"HISTORY.TXT\\\"\");
*/
            if (transactions) {
                Conn.commit();
            }

Stmt.execute(Query);Stmt.clearWarnings();if (transactions) {
                Conn.commit();
            }

---------------------------Clone group no  463 for hash 7064ef930a71293c1849243b84d7667d--------------------



Expression e = readSQLFunction(function);if (e != null) {
                    return e;
                }default :

Expression e = readSQLFunction(function);if (e != null) {
                    return e;
                }default :

---------------------------Clone group no  464 for hash 7d9534e8dc8d047f1aeec357350b29a6--------------------



pResult.removeAll();pResult.add(gScrollPane, BorderLayout.CENTER);pResult.doLayout();gResult.fireTableChanged(null);pResult.repaint();

pResult.removeAll();pResult.add(gScrollPane, BorderLayout.CENTER);pResult.doLayout();gResult.fireTableChanged(null);pResult.repaint();

---------------------------Clone group no  465 for hash 7deb0e47970b5372f638434cd334842e--------------------



t               = (TransferTable) tTable.elementAt(i);lTable.select(i);displayTable(t);

t            = (TransferTable) tTable.elementAt(i);lTable.select(i);displayTable(t);

---------------------------Clone group no  466 for hash 62246951e56c02d93051e3f7e7c73870--------------------



read();readIfThis(Tokens.AS);checkIsSimpleName();

read();readIfThis(Tokens.AS);checkIsSimpleName();

---------------------------Clone group no  467 for hash 93f7865ad83666d29bb77c5c342fde05--------------------



read();readThis(Tokens.TABLE);isTable   = true;tableType = TableBase.TEMP_TABLE;break;

read();readThis(Tokens.TABLE);isTable   = true;tableType = TableBase.TEMP_TABLE;break;

---------------------------Clone group no  468 for hash 4803ee79affeb5dc9a293679d288bce0--------------------



boolean isResult = cs.execute();assertFalse(isResult);cs.getMoreResults();ResultSet rs = cs.getResultSet();rs.next();assertEquals(rs.getString(1), \"SYSTEM_LOBS\");assertEquals(rs.getString(2), \"LOB_IDS\");rs.close();if (cs.getMoreResults()) {
            rs = cs.getResultSet();

            rs.next();
            assertEquals(rs.getString(1), \"SYSTEM_LOBS\");
            assertEquals(rs.getString(2), \"LOBS\");
            rs.close();
        }

boolean isResult = cs.execute();assertFalse(isResult);cs.getMoreResults();ResultSet rs = cs.getResultSet();rs.next();assertEquals(rs.getString(1), \"SYSTEM_LOBS\");assertEquals(rs.getString(2), \"LOB_IDS\");rs.close();if (cs.getMoreResults()) {
            rs = cs.getResultSet();

            rs.next();
            assertEquals(rs.getString(1), \"SYSTEM_LOBS\");
            assertEquals(rs.getString(2), \"LOBS\");
            rs.close();
        }

---------------------------Clone group no  469 for hash 60195ff8364506756d1b07be94c5e670--------------------



break;case Types.SQL_TIME_WITH_TIME_ZONE :zoneOffset = HsqlDateTime.getZoneMillis(calendar, millis);

break;case Types.SQL_TIME_WITH_TIME_ZONE :zoneOffset = HsqlDateTime.getZoneMillis(calendar, millis);

---------------------------Clone group no  470 for hash 7671ba99d7d29f2d5d686d5ae96ae594--------------------



HsqlProperties argProps = null;argProps = HsqlProperties.argArrayToProps(args,
                ServerProperties.sc_key_prefix);String[] errors = argProps.getErrorKeys();

HsqlProperties argProps = null;argProps = HsqlProperties.argArrayToProps(args,
                ServerProperties.sc_key_prefix);String[] errors = argProps.getErrorKeys();

---------------------------Clone group no  471 for hash 63c4847ffebe2f58f8feb91868163404--------------------



case Tokens.TABLE :case Tokens.VALUES :case Tokens.SELECT :

case Tokens.TABLE :case Tokens.VALUES :case Tokens.SELECT :

case Tokens.TABLE :case Tokens.VALUES :case Tokens.SELECT :

case Tokens.TABLE :case Tokens.VALUES :case Tokens.SELECT :

case Tokens.TABLE :case Tokens.VALUES :case Tokens.SELECT :

case Tokens.TABLE :case Tokens.VALUES :case Tokens.SELECT :

---------------------------Clone group no  472 for hash 57b8c43ae250a4e2943e3eb49beb7b7c--------------------



addColumn(t, \"GRANTOR\", SQL_IDENTIFIER);           // not nulladdColumn(t, \"GRANTEE\", SQL_IDENTIFIER);           // not nulladdColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);        // not null

addColumn(t, \"GRANTOR\", SQL_IDENTIFIER);           // not nulladdColumn(t, \"GRANTEE\", SQL_IDENTIFIER);           // not nulladdColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);        // not null

---------------------------Clone group no  473 for hash 4e8df657c3879b27de7ee243ca781e1d--------------------



NodeAVL last = n;n          = n.nNext;last.nNext = null;

NodeAVL last = n;n          = n.nNext;last.nNext = null;

---------------------------Clone group no  474 for hash fbb1af6bf017db8b06d8a76a3706475f--------------------



objectKeyTable[lookup]   = null;returnValue              = objectValueTable[lookup];objectValueTable[lookup] = null;hashIndex.unlinkNode(index, lastLookup, lookup);multiValueTable[lookup] = false;

objectKeyTable[lookup]   = null;returnValue = objectValueTable[lookup];objectValueTable[lookup] = null;hashIndex.unlinkNode(index, lastLookup, lookup);multiValueTable[lookup] = false;

---------------------------Clone group no  475 for hash fd7d3419ec735c585128ef06ac7baeb6--------------------



list[firstindex] = null;firstindex++;if (firstindex == list.length) {
                firstindex = 0;
            }

list[firstindex] = null;firstindex++;if (firstindex == list.length) {
                firstindex = 0;
            }

---------------------------Clone group no  476 for hash 72544cd5a41b2e954faa85429a41d783--------------------



case Tokens.X_VALUE :e = new ExpressionValue(token.tokenValue, token.dataType);read();return e;

case Tokens.X_VALUE :e = new ExpressionValue(token.tokenValue, token.dataType);read();return e;

---------------------------Clone group no  477 for hash 11848c9683b5be55bb67637e115d2a4b--------------------



//
        Iterator it;Object[] row;it = database.schemaManager.databaseObjectIterator(
            SchemaObject.SPECIFIC_ROUTINE);

//
        Iterator it;Object[] row;it = database.schemaManager.databaseObjectIterator(
            SchemaObject.SPECIFIC_ROUTINE);

//
        Iterator it;Object[] row;it = database.schemaManager.databaseObjectIterator(
            SchemaObject.SPECIFIC_ROUTINE);

//
        Iterator it;Object[] row;it = database.schemaManager.databaseObjectIterator(
            SchemaObject.SPECIFIC_ROUTINE);

//
        Iterator it;Object[] row;it = database.schemaManager.databaseObjectIterator(
            SchemaObject.SPECIFIC_ROUTINE);

---------------------------Clone group no  478 for hash 7f286f20d6957a52f9479ce484fc764b--------------------



childName = childNode.getFirstChild().toString();isChar    = childName.indexOf(\"CHAR\") >= 0;result    += \" WHERE \" + quoteObjectName(column);if (isChar) {
                            result += \" LIKE \\'%%\\'\";
                        } else {
                            result += \" = \";
                        }

childName = childNode.getFirstChild().toString();isChar    = childName.indexOf(\"CHAR\") >= 0;result    += \" WHERE \" + quoteObjectName(column);if (isChar) {
                            result += \" LIKE \\'%%\\'\";
                        } else {
                            result += \" = \";
                        }

---------------------------Clone group no  479 for hash ec66555edd9fec3eb813e7e2e323f75a--------------------



PersistentStore store = table.getRowStore(session);store.setSpaceManager(tableSpace);return Result.updateZeroResult;

PersistentStore store = table.getRowStore(session);store.setSpaceManager(tableSpace);return Result.updateZeroResult;

---------------------------Clone group no  480 for hash b0a2d16b6096968f5b58c3d00d45a851--------------------



row                             = t.getEmptyRowData();row[object_catalog] = database.getCatalogName().name;row[object_schema]              = routine.getSchemaName().name;row[object_name]                = routine.getName().name;row[object_type]                = \"ROUTINE\";row[collection_type_identifier] = type.getDefinition();addTypeInfo(row, ((ArrayType) type).collectionBaseType());try {
                    t.insertSys(session, store, row);
                } catch (HsqlException e) {}

row                             = t.getEmptyRowData();row[object_catalog] = database.getCatalogName().name;row[object_schema]              = routine.getSchemaName().name;row[object_name]                = routine.getName().name;row[object_type]                = \"ROUTINE\";row[collection_type_identifier] = type.getDefinition();addTypeInfo(row, ((ArrayType) type).collectionBaseType());try {
                    t.insertSys(session, store, row);
                } catch (HsqlException e) {}

---------------------------Clone group no  481 for hash ae6b75cdf21c670d68a9d0326f197faa--------------------



break;case OpTypes.ARRAY_SUBQUERY ://
            case OpTypes.ROW_SUBQUERY :case OpTypes.TABLE_SUBQUERY :

break;case OpTypes.ARRAY_SUBQUERY :case OpTypes.ROW_SUBQUERY :case OpTypes.TABLE_SUBQUERY :

---------------------------Clone group no  482 for hash 8da6c55c5c4c10349ee2e598b1ea3660--------------------



TestUtil.deleteDatabase(\"/hsql/testtext/test\");TestUtil.delete(\"/hsql/testtext/t.txt\");TestUtil.delete(\"/hsql/testtext/tt.txt\");TestUtil.delete(\"/hsql/testtext/tident.txt\");TestUtil.delete(\"/hsql/testtext/tsingle.txt\");initDatabase();

TestUtil.deleteDatabase(\"/hsql/testtext/test\");TestUtil.delete(\"/hsql/testtext/t.txt\");TestUtil.delete(\"/hsql/testtext/tt.txt\");TestUtil.delete(\"/hsql/testtext/tident.txt\");TestUtil.delete(\"/hsql/testtext/tsingle.txt\");initDatabase();

---------------------------Clone group no  483 for hash 49473308bfb4eaf6bdd868c8e1352311--------------------



nLeft    = null;nRight   = null;nParent  = null;iBalance = 0;row.setNodesChanged();

nLeft    = null;nRight   = null;nParent  = null;iBalance = 0;row.setNodesChanged();

---------------------------Clone group no  484 for hash 296fd3cb418509e9eaaaaf8cdb425f92--------------------



row               = t.getEmptyRowData();row[itable_cat]   = database.getCatalogName().name;row[itable_schem] = table.getSchemaName().name;row[itable_name]  = table.getName().name;

row               = t.getEmptyRowData();row[itable_cat]   = database.getCatalogName().name;row[itable_schem] = table.getSchemaName().name;row[itable_name]  = table.getName().name;

---------------------------Clone group no  485 for hash 56f240366f7246567ac15916d6b0011c--------------------



break;case Types.SQL_TIME :case Types.SQL_TIME_WITH_TIME_ZONE :

break;case Types.SQL_TIME :case Types.SQL_TIME_WITH_TIME_ZONE :

break;case Types.SQL_TIME :case Types.SQL_TIME_WITH_TIME_ZONE :

---------------------------Clone group no  486 for hash dfaae9ce497865029ab21b53f94a417b--------------------



read();readSequenceOptions(sequence, false, false, true);readThis(Tokens.CLOSEBRACKET);

read();readSequenceOptions(sequence, false, false, true);readThis(Tokens.CLOSEBRACKET);

---------------------------Clone group no  487 for hash f1d127cd988f483a19c494c5fcfcf249--------------------



Routine routine = (Routine) parameters[0];session.checkAdmin();session.checkDDLWrite();

Routine routine = (Routine) parameters[0];session.checkAdmin();session.checkDDLWrite();

---------------------------Clone group no  488 for hash 98d586e81e74d8160a0a750d603e7cb9--------------------



break;// SYSTEM_TABLE + INFO_SCHEMA_TABLE
            case TableBase.SCOPE_FULL :case TableBase.SCOPE_TRANSACTION :

break;// SYSTEM_TABLE + INFO_SCHEMA_TABLE
            case TableBase.SCOPE_FULL :case TableBase.SCOPE_TRANSACTION :

---------------------------Clone group no  489 for hash 1df38e6258c3c8851c8d18615e73584e--------------------



table[i] = j + 1;j++;i++;

table[i] = j + 1;j++;i++;

table[i] = j + 1;j++;i++;

---------------------------Clone group no  490 for hash 3ffa9a183ef320de034213968372cadc--------------------



int        newSize  = size == 0 ? 4
                                            : size * 2;Object[][] newTable = new Object[newSize][];System.arraycopy(table, 0, newTable, 0, size);table = newTable;

int        newSize  = size == 0 ? 4
                                            : size * 2;Object[][] newTable = new Object[newSize][];System.arraycopy(table, 0, newTable, 0, size);table = newTable;

---------------------------Clone group no  491 for hash f665010a346c8ba17860fb8b1d4d14fd--------------------



setupChecks();setDatabseObjects(session, compileContext);checkAccessRights(session);

setupChecks();setDatabseObjects(session, compileContext);checkAccessRights(session);

---------------------------Clone group no  492 for hash 107f6ff8c9dc3dcc37b42e09272eb165--------------------



break;case LobResultTypes.REQUEST_GET_LOB :case LobResultTypes.REQUEST_DUPLICATE_LOB ://
            case LobResultTypes.REQUEST_GET_BYTES :case LobResultTypes.REQUEST_GET_CHARS :

break;case LobResultTypes.REQUEST_GET_LOB :case LobResultTypes.REQUEST_DUPLICATE_LOB ://
            case LobResultTypes.REQUEST_GET_BYTES :case LobResultTypes.REQUEST_GET_CHARS :

---------------------------Clone group no  493 for hash de408221e0cd3c2b54e10bcff7624036--------------------



break;case Types.SQL_INTERVAL_DAY :case Types.SQL_INTERVAL_DAY_TO_HOUR :case Types.SQL_INTERVAL_DAY_TO_MINUTE :case Types.SQL_INTERVAL_DAY_TO_SECOND :case Types.SQL_INTERVAL_HOUR :case Types.SQL_INTERVAL_HOUR_TO_MINUTE :case Types.SQL_INTERVAL_HOUR_TO_SECOND :case Types.SQL_INTERVAL_MINUTE :case Types.SQL_INTERVAL_MINUTE_TO_SECOND :case Types.SQL_INTERVAL_SECOND :

break;case Types.SQL_INTERVAL_DAY :case Types.SQL_INTERVAL_DAY_TO_HOUR :case Types.SQL_INTERVAL_DAY_TO_MINUTE :case Types.SQL_INTERVAL_DAY_TO_SECOND :case Types.SQL_INTERVAL_HOUR :case Types.SQL_INTERVAL_HOUR_TO_MINUTE :case Types.SQL_INTERVAL_HOUR_TO_SECOND :case Types.SQL_INTERVAL_MINUTE :case Types.SQL_INTERVAL_MINUTE_TO_SECOND :case Types.SQL_INTERVAL_SECOND :

break;case Types.SQL_INTERVAL_DAY :case Types.SQL_INTERVAL_DAY_TO_HOUR :case Types.SQL_INTERVAL_DAY_TO_MINUTE :case Types.SQL_INTERVAL_DAY_TO_SECOND :case Types.SQL_INTERVAL_HOUR :case Types.SQL_INTERVAL_HOUR_TO_MINUTE :case Types.SQL_INTERVAL_HOUR_TO_SECOND :case Types.SQL_INTERVAL_MINUTE :case Types.SQL_INTERVAL_MINUTE_TO_SECOND :case Types.SQL_INTERVAL_SECOND :

---------------------------Clone group no  494 for hash 767a14feb744b99737e6e2e7404dfe93--------------------



ColumnSchema column  = getColumn(j);String       colname = column.getName().statementName;Type         type    = column.getDataType();if (j > 0) {
                sb.append(',');
            }sb.append(colname);sb.append(' ');sb.append(type.getTypeDefinition());

ColumnSchema column  = getColumn(j);String       colname = column.getName().statementName;Type         type    = column.getDataType();if (j > 0) {
                sb.append(',');
            }sb.append(colname);sb.append(' ');sb.append(type.getTypeDefinition());

---------------------------Clone group no  495 for hash 849d7c91ba5746d47ee08d1f172b7dd7--------------------



case OpTypes.COLUMN :case OpTypes.PARAMETER :case OpTypes.VARIABLE :

case OpTypes.COLUMN :case OpTypes.PARAMETER :case OpTypes.VARIABLE :

---------------------------Clone group no  496 for hash 2f6963b0087cb703373150edf061c26f--------------------



row[icat]          = cat;row[ischem]        = schem;row[ipname]        = pName;row[iinput_parms]  = ip;row[ioutput_parms] = op;row[iresult_sets]  = rs;row[iremark]       = remark;row[iptype]        = pType;

row[icat]          = cat;row[ischem]        = schem;row[ipname]        = pName;row[iinput_parms]  = ip;row[ioutput_parms] = op;row[iresult_sets]  = rs;row[iremark]       = remark;row[iptype]        = pType;

---------------------------Clone group no  497 for hash da536e1328a739bb25426a0bc1c2a2b6--------------------



int min = 0,
            max = 0;switch (type) {

            case TELLER :
                max = ntellers * tps - 1;
                break;

            case BRANCH :
                max = nbranches * tps - 1;
                break;

            case ACCOUNT :
                max = naccounts * tps - 1;
                break;
        }return (getRandomInt(min, max));

int min = 0,
            max = 0;switch (type) {

            case TELLER :
                max = ntellers * tps - 1;
                break;

            case BRANCH :
                max = nbranches * tps - 1;
                break;

            case ACCOUNT :
                max = naccounts * tps - 1;
                break;
        }return (getRandomInt(min, max));

---------------------------Clone group no  498 for hash 7269290575598f318b69ecfb4bbe66ec--------------------



moveData(table, tn, -1, 0);table = tn;database.schemaManager.addSchemaObject(constraint);setNewTableInSchema(table);updateConstraints(table, emptySet);database.schemaManager.recompileDependentObjects(table);

moveData(table, tn, -1, 0);table = tn;database.schemaManager.addSchemaObject(constraint);setNewTableInSchema(table);updateConstraints(table, emptySet);database.schemaManager.recompileDependentObjects(table);

moveData(table, tn, -1, 0);table = tn;database.schemaManager.addSchemaObject(constraint);setNewTableInSchema(table);updateConstraints(table, emptySet);database.schemaManager.recompileDependentObjects(table);

---------------------------Clone group no  499 for hash dacc337e279e64122d2e3cc98b025056--------------------



case Tokens.EXTRACT :case Tokens.CHAR_LENGTH :case Tokens.CHARACTER_LENGTH :case Tokens.OCTET_LENGTH :case Tokens.CARDINALITY :case Tokens.ABS :case Tokens.MOD :case Tokens.LN :case Tokens.EXP :case Tokens.POWER :case Tokens.SQRT :case Tokens.FLOOR :case Tokens.CEILING :case Tokens.CEIL :case Tokens.WIDTH_BUCKET :FunctionSQL function =
                    FunctionSQL.newSQLFunction(token.tokenString,
                                               compileContext);

//            case Token.OCCURRENCES_REGEX :
//            case Token.POSITION_REGEX :
            case Tokens.EXTRACT :case Tokens.CHAR_LENGTH :case Tokens.CHARACTER_LENGTH :case Tokens.OCTET_LENGTH :case Tokens.CARDINALITY :case Tokens.ABS :case Tokens.MOD :case Tokens.LN :case Tokens.EXP :case Tokens.POWER :case Tokens.SQRT :case Tokens.FLOOR :case Tokens.CEILING :case Tokens.CEIL :case Tokens.WIDTH_BUCKET :FunctionSQL function =
                    FunctionSQL.newSQLFunction(token.tokenString,
                                               compileContext);

---------------------------Clone group no  500 for hash 00c3e5ad00c39bc46890e7f258f944e9--------------------



Result result = sysLobSession.executeCompiledStatement(createLob,
                params, 0);usageChanged = true;return lobID.longValue();

Result result = sysLobSession.executeCompiledStatement(createLob,
                params, 0);usageChanged = true;return lobID.longValue();

---------------------------Clone group no  501 for hash e14667a2230f32aa2c4d4a353182a199--------------------



if (startAtomIndex + remaining < i + 3)
                throw new IllegalStateException(
                        \"No operator/operand pairing remaining\");nextAtom = atoms.get(i + 1);if (nextAtom.op == null)
                throw new IllegalStateException(
                        \"Operator expected but got value \" + nextAtom.val);op = nextAtom.op;nextAtom = atoms.get(i + 2);if (nextAtom.op != null)
                throw new IllegalStateException(
                        \"Value expected but got operator \" + nextAtom.op);

if (startAtomIndex + remaining < i + 3)
                throw new IllegalStateException(
                        \"No operator/operand pairing remaining\");nextAtom = atoms.get(i + 1);if (nextAtom.op == null)
                throw new IllegalStateException(
                        \"Operator expected but got value \" + nextAtom.val);op = nextAtom.op;nextAtom = atoms.get(i + 2);if (nextAtom.op != null)
                throw new IllegalStateException(
                        \"Value expected but got operator \" + nextAtom.op);

---------------------------Clone group no  502 for hash da7724d12839cb3aabf07800fbf85b68--------------------



long timestamp = session.sessionContext.savepointTimestamps.get(index);Integer oi = (Integer) session.sessionContext.savepoints.get(index);int     start  = oi.intValue();while (session.sessionContext.savepoints.size() > index + 1) {
            session.sessionContext.savepoints.remove(
                session.sessionContext.savepoints.size() - 1);
            session.sessionContext.savepointTimestamps.removeLast();
        }rollbackPartial(session, start, timestamp);

long timestamp = session.sessionContext.savepointTimestamps.get(index);Integer oi = (Integer) session.sessionContext.savepoints.get(index);int     start  = oi.intValue();while (session.sessionContext.savepoints.size() > index + 1) {
            session.sessionContext.savepoints.remove(
                session.sessionContext.savepoints.size() - 1);
            session.sessionContext.savepointTimestamps.removeLast();
        }rollbackPartial(session, start, timestamp);

long timestamp = session.sessionContext.savepointTimestamps.get(index);Integer oi = (Integer) session.sessionContext.savepoints.get(index);int     start  = oi.intValue();while (session.sessionContext.savepoints.size() > index + 1) {
            session.sessionContext.savepoints.remove(
                session.sessionContext.savepoints.size() - 1);
            session.sessionContext.savepointTimestamps.removeLast();
        }rollbackPartial(session, start, timestamp);

---------------------------Clone group no  503 for hash 6732a4efa3d9efaf4c96546ec93f1737--------------------



HsqlName[] writeLockNames =
            database.schemaManager.getCatalogNameArray();StatementSchema cs = new StatementSchema(sql, type, args, null,
            writeLockNames);return cs;

HsqlName[] writeLockNames =
            database.schemaManager.getCatalogNameArray();StatementSchema cs = new StatementSchema(sql, type, args, null,
            writeLockNames);return cs;

---------------------------Clone group no  504 for hash 42348996d7b2f73b43c305b0e4f1466f--------------------



boolean value = ((Boolean) parameters[0]).booleanValue();session.checkAdmin();session.checkDDLWrite();

boolean value = ((Boolean) parameters[0]).booleanValue();session.checkAdmin();session.checkDDLWrite();

---------------------------Clone group no  505 for hash eeaf5ead4979d5c0ab4e0946857d1715--------------------



conn1.createStatement().executeUpdate(\"savepoint \\\"savepoint1\\\"\");//-- test 16 : A JDBC Savepoint shall be considered invalid if used to
        //             release an SQL-savepoint other than precisely the
        //             one created in correspondence to the creation of that
        //             JDBC Savepoint object
        // fredt@users - we allow this if the name is valid
/*
        msg = \"JDBC Savepoint used to successfully release an identically named \"
              + \"savepoint in a transaction distinct from the originating \"
              + \"transaction\";
        try {
            conn1.releaseSavepoint(sp1);
            assertTrue(msg, false);
        } catch (Exception e) {}
*/
        conn1.setAutoCommit(false);sp1 = conn1.setSavepoint(\"savepoint1\");conn1.createStatement().executeUpdate(\"savepoint \\\"savepoint1\\\"\");

conn1.createStatement().executeUpdate(\"savepoint \\\"savepoint1\\\"\");//-- test 18 : A JDBC Savepoint shall be considered invalid if used to
        //             roll back to an SQL-savepoint other than precisely the
        //             one created in correspondence to the creation of that
        //             JDBC Savepoint object
        // fredt@users - we allow this if the name is valid
/*
        msg = \"JDBC Savepoint used to successfully to roll back to an \"
              + \"identically named savepoint in a transaction distinct \"
              + \"from the originating transaction\";
        try {
            conn1.rollback(sp1);
            assertTrue(msg, false);
        } catch (Exception e) {}
*/
        conn1.setAutoCommit(false);sp1 = conn1.setSavepoint(\"savepoint1\");conn1.createStatement().executeUpdate(\"savepoint \\\"savepoint1\\\"\");

---------------------------Clone group no  506 for hash 62942f03a2df7f5cbd0b96faa61045d3--------------------



connection.rollback();rs = statement.executeQuery(select);while (rs.next()) {
                String s = rs.getString(2);

                System.out.println(s);
            }connection.commit();

connection.rollback();rs = statement.executeQuery(select);while (rs.next()) {
                String s = rs.getString(2);

                System.out.println(s);
            }connection.commit();

---------------------------Clone group no  507 for hash ff93a66a09750563eee1eec1af60ccf9--------------------



break;case RowAction.ACTION_INSERT_DELETE :// INSERT + DELETE
                if (txModel == TransactionManager.LOCKS) {
                    remove(row);
                } else {
                    delete(session, row);
                    remove(row);
                }break;

break;case RowAction.ACTION_INSERT_DELETE :// INSERT + DELETE
                if (txModel == TransactionManager.LOCKS) {
                    remove(row);
                } else {
                    delete(session, row);
                    remove(row);
                }break;

---------------------------Clone group no  508 for hash 7f6790ce32cb307bb8c465121648b0ce--------------------



case TableBase.RESULT_TABLE :case TableBase.SYSTEM_SUBQUERY :case TableBase.VIEW_TABLE :case TableBase.TRANSITION_TABLE :

case TableBase.RESULT_TABLE :case TableBase.SYSTEM_SUBQUERY :case TableBase.VIEW_TABLE :case TableBase.TRANSITION_TABLE :

---------------------------Clone group no  509 for hash 0832f5d8a9e1ba5a3f8b1e434891804f--------------------



java.sql.Timestamp value = new java.sql.Timestamp(millis);value.setNanos(((TimestampData) a).getNanos());return value;

java.sql.Timestamp value = new java.sql.Timestamp(millis);value.setNanos(((TimestampData) a).getNanos());return value;

---------------------------Clone group no  510 for hash 39a3529e0da7200397ec49fbb8d1b2f9--------------------



if (!e.getDataType().isCharacterType()) {
                    throw Error.error(ErrorCode.X_0P000);
                }if (e.getType() != OpTypes.VALUE
                        && (e.getType() != OpTypes.SQL_FUNCTION
                            || !((FunctionSQL) e).isValueFunction())) {
                    throw Error.error(ErrorCode.X_0P000);
                }Expression[] args = new Expression[]{ e };

if (!e.getDataType().isCharacterType()) {
                    throw Error.error(ErrorCode.X_0P000);
                }if (e.getType() != OpTypes.VALUE
                        && (e.getType() != OpTypes.SQL_FUNCTION
                            || !((FunctionSQL) e).isValueFunction())) {
                    throw Error.error(ErrorCode.X_0P000);
                }Expression[] args = new Expression[]{ e };

---------------------------Clone group no  511 for hash 3731dd92c8abf151a29a1cb5ccfd83bb--------------------



Result resultIn = session.execute(resultOut);if (resultIn.isError()) {
            throw resultIn.getException();
        }return ((ResultLob) resultIn).getOffset();

Result resultIn = session.execute(resultOut);if (resultIn.isError()) {
            throw resultIn.getException();
        }return ((ResultLob) resultIn).getOffset();

Result resultIn = session.execute(resultOut);if (resultIn.isError()) {
            throw resultIn.getException();
        }return ((ResultLob) resultIn).getOffset();

Result resultIn = session.execute(resultOut);if (resultIn.isError()) {
            throw resultIn.getException();
        }return ((ResultLob) resultIn).getOffset();

---------------------------Clone group no  512 for hash 9abb730e46e05b8da27d26523266fd0d--------------------



conn.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);Statement st = conn.createStatement();ResultSet rs = st.executeQuery(
            \"select count(*) from information_schema.columns where table_name='LOB_IDS' and table_schema='SYSTEM_LOBS'\");if (rs.next()) {
            intparam[0] = rs.getInt(1);

            rs.close();
        }

conn.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);Statement st = conn.createStatement();ResultSet rs = st.executeQuery(
            \"select count(*) from information_schema.columns where table_name='LOB_IDS' and table_schema='SYSTEM_LOBS'\");if (rs.next()) {
            intparam[0] = rs.getInt(1);

            rs.close();
        }

---------------------------Clone group no  513 for hash fa8ba88d208ee8987566f20ccfbf48df--------------------



case GrantConstants.EXECUTE :return isFull;default :throw Error.runtimeError(ErrorCode.U_S0500, \"Right\");

case GrantConstants.EXECUTE :return isFull;default :throw Error.runtimeError(ErrorCode.U_S0500, \"Right\");

---------------------------Clone group no  514 for hash db55048928e392028b4aa83b721a1dac--------------------



int oldSize = size();super.addOrRemove(key, 0, null, null, true);return oldSize != size();

int oldSize = size();super.addOrRemove(key, 0, null, null, true);return oldSize != size();

---------------------------Clone group no  515 for hash 91e103b6a0d2d92053663cd044ddf132--------------------



final int sequence_catalog = 3;final int sequence_schema  = 4;final int sequence_name    = 5;//
        Iterator it;Object[] row;

final int sequence_catalog = 3;final int sequence_schema  = 4;final int sequence_name    = 5;//
        Iterator it;Object[] row;

---------------------------Clone group no  516 for hash 863ec2c9d8dc176a21db3661bd1f2314--------------------



case StatementTypes.DROP_ASSERTION :case StatementTypes.DROP_CHARACTER_SET :case StatementTypes.DROP_COLLATION :case StatementTypes.DROP_TYPE :case StatementTypes.DROP_DOMAIN :case StatementTypes.DROP_ROLE :case StatementTypes.DROP_USER :case StatementTypes.DROP_ROUTINE :case StatementTypes.DROP_SCHEMA :case StatementTypes.DROP_SEQUENCE :case StatementTypes.DROP_TABLE :case StatementTypes.DROP_TRANSFORM :case StatementTypes.DROP_TRANSLATION :case StatementTypes.DROP_TRIGGER :case StatementTypes.DROP_CAST :case StatementTypes.DROP_ORDERING :case StatementTypes.DROP_VIEW :case StatementTypes.DROP_INDEX :case StatementTypes.DROP_CONSTRAINT :

case StatementTypes.DROP_ASSERTION :case StatementTypes.DROP_CHARACTER_SET :case StatementTypes.DROP_COLLATION :case StatementTypes.DROP_TYPE :case StatementTypes.DROP_DOMAIN :case StatementTypes.DROP_ROLE :case StatementTypes.DROP_USER :case StatementTypes.DROP_ROUTINE :case StatementTypes.DROP_SCHEMA :case StatementTypes.DROP_SEQUENCE :case StatementTypes.DROP_TABLE :case StatementTypes.DROP_TRANSFORM :case StatementTypes.DROP_TRANSLATION :case StatementTypes.DROP_TRIGGER :case StatementTypes.DROP_CAST :case StatementTypes.DROP_ORDERING :case StatementTypes.DROP_VIEW :case StatementTypes.DROP_INDEX :case StatementTypes.DROP_CONSTRAINT :

---------------------------Clone group no  517 for hash be04ffb9481938f9ed5b1064e1e8c51d--------------------



dataFile.seek(FLAGS_POS);dataFile.writeInt(flags);dataFile.synch();

dataFile.seek(FLAGS_POS);dataFile.writeInt(flags);dataFile.synch();

dataFile.seek(FLAGS_POS);dataFile.writeInt(flags);dataFile.synch();

dataFile.seek(FLAGS_POS);dataFile.writeInt(flags);dataFile.synch();

---------------------------Clone group no  518 for hash d81a890cb162c74b482fbe3e6659e26b--------------------



int windex = pos >> 5;int mask   = 0x80000000 >>> (pos & 0x1F);int word   = map[windex];

int windex = pos >> 5;int mask   = 0x80000000 >>> (pos & 0x1F);int word   = map[windex];

int windex = pos >> 5;int mask   = 0x80000000 >>> (pos & 0x1F);int word   = map[windex];

---------------------------Clone group no  519 for hash b24ae53cc05d24f98da247facbe08b3e--------------------



// column number mappings
        final int trigger_catalog = 0;final int trigger_schema  = 1;final int trigger_name    = 2;final int table_catalog   = 3;final int table_schema    = 4;final int table_name      = 5;

// column number mappings
        final int trigger_catalog = 0;final int trigger_schema  = 1;final int trigger_name    = 2;final int table_catalog   = 3;final int table_schema    = 4;final int table_name      = 5;

---------------------------Clone group no  520 for hash 37adbaf3b9d769052f7073c45d6fc1cf--------------------



return true;default :return false;

return true;default :return false;

return true;default :return false;

return true;default :return false;

return true;default :return false;

return true;default :return false;

return true;default :return false;

return true;default :return false;

return true;default :return false;

return true;default :return false;

return true;default :return false;

return true;default :return false;

return true;default :return false;

return true;default :return false;

---------------------------Clone group no  521 for hash 1704882cf098691ab2b7b840d8b53690--------------------



e = readAggregateExpression(tokenT);readThis(Tokens.CLOSEBRACKET);readFilterClause(e);

e = readAggregateExpression(tokenT);readThis(Tokens.CLOSEBRACKET);readFilterClause(e);

---------------------------Clone group no  522 for hash fd35177f61d67014217bdff9da48adc1--------------------



ps.setInt(1, i);ps.setString(2, String.valueOf(i) + \" s\");ps.setBytes(3, new byte[] {
                    (byte) i, ' ', (byte) i
                });ps.execute();

ps.setInt(1, i);ps.setString(2, String.valueOf(i) + \" s\");ps.setBytes(3, new byte[] {
                    (byte) i, ' ', (byte) i
                });ps.execute();

ps.setInt(1, i);ps.setString(2, String.valueOf(i) + \" s\");ps.setBytes(3, new byte[] {
                    (byte) i, ' ', (byte) i
                });ps.execute();

---------------------------Clone group no  523 for hash 36ca833a8c00a3474c59a934ca0c07ab--------------------



if (foreignKeyName.length() > 0) {
                                alterCreate +=
                                    \" (\"
                                    + Dest.helper.formatIdentifier(
                                        foreignKeyName.substring(
                                            0, foreignKeyName.length()
                                            - 1)) + \")\";
                            }alterCreate += \";\";alterDrop =
                                alterDrop.substring(0, alterDrop.length() - 1)
                                + \";\";

if (foreignKeyName.length() > 0) {
                    alterCreate +=
                        \" (\"
                        + Dest.helper.formatIdentifier(
                            foreignKeyName.substring(
                                0, foreignKeyName.length() - 1)) + \")\";
                }alterCreate += \";\";alterDrop = alterDrop.substring(0, alterDrop.length() - 1)
                            + \";\";

---------------------------Clone group no  524 for hash b03680a7d2457361ff5c32c56dfe3298--------------------



OrderedHashSet  targetSet    = new OrderedHashSet();HsqlArrayList   exprList     = new HsqlArrayList();LongDeque       colIndexList = new LongDeque();

OrderedHashSet targetSet    = new OrderedHashSet();HsqlArrayList  exprList     = new HsqlArrayList();LongDeque      colIndexList = new LongDeque();

---------------------------Clone group no  525 for hash a5c4c1612e7564943ccbc7eab11bc825--------------------



case Types.SQL_DATE :case Types.SQL_TIMESTAMP :case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :

case Types.SQL_DATE :case Types.SQL_TIMESTAMP :case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :

case Types.SQL_DATE :case Types.SQL_TIMESTAMP :case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :

case Types.SQL_DATE :case Types.SQL_TIMESTAMP :case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :

case Types.SQL_DATE :case Types.SQL_TIMESTAMP :case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :

case Types.SQL_DATE :case Types.SQL_TIMESTAMP :case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :

---------------------------Clone group no  526 for hash 8e90b82110c8784ee81fdeaa6c316e7d--------------------



break;default :throw JDBCUtil.sqlException(ErrorCode.X_42561);

break;default :throw JDBCUtil.sqlException(ErrorCode.X_42561);

break;default :throw JDBCUtil.sqlException(ErrorCode.X_42561);

---------------------------Clone group no  527 for hash e9a266bdad42891e5359ef2e91d45f03--------------------



dataString =
                                        pgTypes[i].valueString(rowData[i]);outPacket.writeSized(dataString);if (server.isTrace()) {
                                        server.printWithThread(
                                            \"R\" + rowNum + \"C\" + (i + 1)
                                            + \" => (\"
                                            + rowData[i].getClass().getName()
                                            + \") [\" + dataString + ']');
                                    }

dataString =
                                    pgTypes[i].valueString(rowData[i]);outPacket.writeSized(dataString);if (server.isTrace()) {
                                    server.printWithThread(
                                        \"R\" + rowNum + \"C\" + (i + 1) + \" => (\"
                                        + rowData[i].getClass().getName()
                                        + \") [\" + dataString + ']');
                                }

---------------------------Clone group no  528 for hash 9d0a2497120d5a75b9e11c5ff2b5b078--------------------



read();isIdentity   = true;isPKIdentity = true;sequence     = new NumberSequence(null, 0, 1, typeObject);

read();isIdentity   = true;isPKIdentity = true;sequence     = new NumberSequence(null, 0, 1, typeObject);

---------------------------Clone group no  529 for hash 1a3b851ee22dd90cf0d7deb4f86a3b84--------------------



g[0] = \"\" + total;g[1] = \"total\";g[2] = \"\";

g[0] = \"\" + total;g[1] = \"total\";g[2] = \"\";

---------------------------Clone group no  530 for hash d7da11d022d295e39b0db72be7f808d1--------------------



rs = cs.getResultSet();rs.next();assertEquals(rs.getString(1), \"SYSTEM_LOBS\");assertEquals(rs.getString(2), \"LOBS\");rs.close();

rs = cs.getResultSet();rs.next();assertEquals(rs.getString(1), \"SYSTEM_LOBS\");assertEquals(rs.getString(2), \"LOBS\");rs.close();

---------------------------Clone group no  531 for hash b2ceab1711dc3dae7bb863339d7eb8a6--------------------



months += days / 31;if (minus) {
                months = -months;
            }return BigDecimal.valueOf(months);

months += days / 31;if (minus) {
                months = -months;
            }return BigDecimal.valueOf(months);

---------------------------Clone group no  532 for hash 6012dae26b3e36879842b0fd67503932--------------------



sortOrder      = new int[columnCount];sortDescending = new boolean[columnCount];sortNullsLast  = new boolean[columnCount];

sortOrder      = new int[columnCount];sortDescending = new boolean[columnCount];sortNullsLast  = new boolean[columnCount];

---------------------------Clone group no  533 for hash 5ab72787d3b10e62ce1c7ac7de92b0ab--------------------



break;default :throw Error.runtimeError(ErrorCode.U_S0500, \"ResultLob\");

break;default :throw Error.runtimeError(ErrorCode.U_S0500, \"ResultLob\");

---------------------------Clone group no  534 for hash b373e56b5cf469c7c90f2a6b555c4df4--------------------



dataType   = seq.getDataType();sequence   = seq;schema     = null;tableName  = null;columnName = null;resolved   = true;

dataType   = seq.getDataType();sequence   = seq;schema     = null;tableName  = null;columnName = null;resolved   = true;

---------------------------Clone group no  535 for hash 59446e89efd60160df7022dd732dbf11--------------------



int[] baseColumnMap = table.getBaseTableColumnMap();int[] newColumnMap  = new int[columnMap.length];ArrayUtil.projectRow(baseColumnMap, columnMap,
                                         newColumnMap);columnMap = newColumnMap;

int[] baseColumnMap = table.getBaseTableColumnMap();int[] newColumnMap  = new int[columnMap.length];ArrayUtil.projectRow(baseColumnMap, columnMap, newColumnMap);columnMap = newColumnMap;

int[] baseColumnMap = table.getBaseTableColumnMap();int[] newColumnMap  = new int[columnMap.length];ArrayUtil.projectRow(baseColumnMap, columnMap, newColumnMap);columnMap = newColumnMap;

---------------------------Clone group no  536 for hash 4dec86b129666eb0c7d20bbedefd7672--------------------



boole = false;break;case Tokens.MINUS :

boole = false;break;case Tokens.MINUS :

---------------------------Clone group no  537 for hash 3c93af936340e12c1b52ae073ddd14be--------------------



c.core.uniqueName = uniqueConstraint.getName();c.core.mainName   = mainName;c.core.mainIndex  = mainIndex;c.core.refTable   = table;c.core.refName    = c.getName();

c.core.uniqueName = uniqueConstraint.getName();c.core.mainName   = mainName;c.core.mainIndex  = mainIndex;c.core.refTable   = table;c.core.refName    = c.getName();

---------------------------Clone group no  538 for hash fb3e5f8dddbf4e1fd198775eef82828a--------------------



readNumberField(Type.SQL_BIGINT);if (value == null) {
            return null;
        }long id = ((Number) value).longValue();

readNumberField(Type.SQL_BIGINT);if (value == null) {
            return null;
        }long id = ((Number) value).longValue();

---------------------------Clone group no  539 for hash 7907ae0d84992f042a212e3d9880baf8--------------------



NodeAVLDiskLarge node = this;RowAVLDisk  row  = this.row;if (!row.keepInMemory(true)) {
            row  = (RowAVLDisk) store.get(this.row, true);
            node = (NodeAVLDiskLarge) row.getNode(iId);
        }if (!row.isInMemory()) {
            throw Error.runtimeError(ErrorCode.U_S0500, \"NodeAVLDisk\");
        }row.setNodesChanged();

NodeAVLDiskLarge node = this;RowAVLDisk  row  = this.row;if (!row.keepInMemory(true)) {
            row  = (RowAVLDisk) store.get(this.row, true);
            node = (NodeAVLDiskLarge) row.getNode(iId);
        }if (!row.isInMemory()) {
            throw Error.runtimeError(ErrorCode.U_S0500, \"NodeAVLDisk\");
        }row.setNodesChanged();

NodeAVLDiskLarge node = this;RowAVLDisk  row  = this.row;if (!row.keepInMemory(true)) {
            row  = (RowAVLDisk) store.get(this.row, true);
            node = (NodeAVLDiskLarge) row.getNode(iId);
        }if (!row.isInMemory()) {
            throw Error.runtimeError(ErrorCode.U_S0500, \"NodeAVLDisk\");
        }row.setNodesChanged();

---------------------------Clone group no  540 for hash 0ae123f5899019cffe99716979764fe5--------------------



String  DriverName         = \"\";String  DBUrl              = \"\";String  DBUser             = \"\";String  DBPassword         = \"\";

String  DriverName         = \"\";String  DBUrl              = \"\";String  DBUser             = \"\";String  DBPassword         = \"\";

---------------------------Clone group no  541 for hash 66bc575129a140ffcf7d7554dbd43720--------------------



addColumn(t, \"DOMAIN_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"DOMAIN_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"DOMAIN_NAME\", SQL_IDENTIFIER);

addColumn(t, \"DOMAIN_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"DOMAIN_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"DOMAIN_NAME\", SQL_IDENTIFIER);

addColumn(t, \"DOMAIN_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"DOMAIN_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"DOMAIN_NAME\", SQL_IDENTIFIER);

addColumn(t, \"DOMAIN_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"DOMAIN_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"DOMAIN_NAME\", SQL_IDENTIFIER);

---------------------------Clone group no  542 for hash fd9224dc8803cc8f3bf6baf9c36a5560--------------------



checkIsSimpleName();granteeList.add(token.tokenString);read();if (token.tokenType == Tokens.COMMA) {
                read();
            } else {
                break;
            }

checkIsSimpleName();granteeList.add(token.tokenString);read();if (token.tokenType == Tokens.COMMA) {
                read();
            } else {
                break;
            }

---------------------------Clone group no  543 for hash c202151724dec1402c26e07949a1753e--------------------



String            dql0 = \"select * from clobtest;\";PreparedStatement ps   = connection.prepareStatement(dml0);String            data = \"Testing clob insert and select ops\";Clob              clob = new JDBCClob(data);

String            dql0 = \"select * from clobtest;\";PreparedStatement ps   = connection.prepareStatement(dml0);String            data = \"Testing clob insert and select ops\";Clob              clob = new JDBCClob(data);

---------------------------Clone group no  544 for hash 1f16a6cb44d3b12a922702d4e1a8d85b--------------------



values = new Object[set.map.size()];set.map.valuesToArray(values);objects = new WrapperIterator(objects,
                                                  new WrapperIterator(values));

values = new Object[set.map.size()];set.map.valuesToArray(values);objects =
                            new WrapperIterator(objects,
                                                new WrapperIterator(values));

---------------------------Clone group no  545 for hash 754d1f4cf70c8156a79d764937b06f81--------------------



pstmt.setInt(1, 0);rs = pstmt.executeQuery();rs.next();

pstmt.setInt(1, 0);rs = pstmt.executeQuery();rs.next();

pstmt.setInt(1, 0);rs = pstmt.executeQuery();rs.next();

---------------------------Clone group no  546 for hash f02dba74b0fea4ade0019d554b3c56ba--------------------



rewind(position);TableDerived td = XreadSubqueryTableBody(OpTypes.IN);e = new Expression(OpTypes.TABLE_SUBQUERY, td);readThis(Tokens.CLOSEBRACKET);break;

rewind(position);TableDerived td = XreadSubqueryTableBody(OpTypes.IN);e = new Expression(OpTypes.TABLE_SUBQUERY, td);readThis(Tokens.CLOSEBRACKET);break;

---------------------------Clone group no  547 for hash 589613110d93addc8bc2e7ab9a8a7118--------------------



long currentFree  = Runtime.getRuntime().freeMemory();long currentAlloc = Runtime.getRuntime().totalMemory();long used         = currentAlloc - currentFree;if (used < min) {
                    min = used;
                }if (used > max) {
                    max = used;
                }try {
                    sleep(100);
                } catch (InterruptedException E) {}

long currentFree  = Runtime.getRuntime().freeMemory();long currentAlloc = Runtime.getRuntime().totalMemory();long used         = currentAlloc - currentFree;if (used < min) {
                    min = used;
                }if (used > max) {
                    max = used;
                }try {
                    sleep(100);
                } catch (InterruptedException E) {}

---------------------------Clone group no  548 for hash 1d66e037b4c6c960a80c4f41ffa5abf1--------------------



it.release();currentRow  = null;currentData = rangeVar.emptyData;

it.release();currentRow  = null;currentData = rangeVar.emptyData;

---------------------------Clone group no  549 for hash 87793815d021d8359ab853e07f440aca--------------------



if (nodes[0].dataType == null) {
                    nodes[0].dataType = nodes[1].dataType;
                }if (nodes[1].dataType == null) {
                    nodes[1].dataType = nodes[0].dataType;
                }if (nodes[0].dataType == null) {
                    throw Error.error(ErrorCode.X_42567);
                }if (!nodes[0].dataType.isNumberType()
                        || !nodes[1].dataType.isNumberType()) {
                    throw Error.error(ErrorCode.X_42563);
                }

if (nodes[0].dataType == null) {
                    nodes[0].dataType = nodes[1].dataType;
                }if (nodes[1].dataType == null) {
                    nodes[1].dataType = nodes[0].dataType;
                }if (nodes[0].dataType == null) {
                    throw Error.error(ErrorCode.X_42567);
                }if (!nodes[0].dataType.isNumberType()
                        || !nodes[1].dataType.isNumberType()) {
                    throw Error.error(ErrorCode.X_42563);
                }

---------------------------Clone group no  550 for hash 53d51412d06f8652709813f2fad8b1ce--------------------



ps.executeUpdate();String dq1   = \"select CHARACTER_LENGTH(clobfield) from clobtest;\";ResultSet rs = statement.executeQuery(dq1);rs.next();int length = rs.getInt(1);assertTrue(value.length() == length);rs.close();String dq3 = \"delete from clobtest;\";statement.execute(dq3);char[] testChars = new char[11111];for (int i = 0, j = 32; i < testChars.length; i++, j++) {
                if (j > 255) {
                    j = 32;
                }

                testChars[i] = (char) j;
            }ps.setCharacterStream(1, new CharArrayReader(testChars),
                                  testChars.length);ps.executeUpdate();String dq2 = \"select clobfield from clobtest;\";rs = statement.executeQuery(dq2);rs.next();Reader reader   = rs.getCharacterStream(1);char[] newChars = new char[testChars.length];try {
                reader.read(newChars);
            } catch (IOException e) {
                fail(\"test failure\");
            }for (int i = 0; i < testChars.length; i++) {
                if (testChars[i] != newChars[i]) {
                    fail(\"test failure\");
                }
            }

ps.executeUpdate();String dq1   = \"select CHARACTER_LENGTH(clobfield) from clobtest;\";ResultSet rs = statement.executeQuery(dq1);rs.next();int length = rs.getInt(1);assertTrue(value.length() == length);rs.close();String dq3 = \"delete from clobtest;\";statement.execute(dq3);char[] testChars = new char[11111];for (int i = 0, j = 32; i < testChars.length; i++, j++) {
                if (j > 255) {
                    j = 32;
                }

                testChars[i] = (char) j;
            }ps.setCharacterStream(1, new CharArrayReader(testChars),
                                  testChars.length);ps.executeUpdate();String dq2 = \"select clobfield from clobtest;\";rs = statement.executeQuery(dq2);rs.next();Reader reader   = rs.getCharacterStream(1);char[] newChars = new char[testChars.length];try {
                reader.read(newChars);
            } catch (IOException e) {
                fail(\"test failure\");
            }for (int i = 0; i < testChars.length; i++) {
                if (testChars[i] != newChars[i]) {
                    fail(\"test failure\");
                }
            }

---------------------------Clone group no  551 for hash c90f4f5ceb568226a93a9636684a991d--------------------



sb.append('(');sb.append(factor);if (multiplier != null) {
            sb.append(multiplier);
        }sb.append(')');return sb.toString();

sb.append('(');sb.append(factor);if (multiplier != null) {
            sb.append(multiplier);
        }sb.append(')');return sb.toString();

---------------------------Clone group no  552 for hash 2966f502eaeda50264eb1bae2144ec71--------------------



case OpTypes.MATCH_SIMPLE :case OpTypes.MATCH_PARTIAL :case OpTypes.MATCH_FULL :return Boolean.TRUE;

case OpTypes.MATCH_SIMPLE :case OpTypes.MATCH_PARTIAL :case OpTypes.MATCH_FULL :return Boolean.TRUE;

---------------------------Clone group no  553 for hash 93ed7086bb8a17e0c80985093120a86e--------------------



HsqlName[] array = new HsqlName[names.size()];names.toArray(array);return array;

HsqlName[] array = new HsqlName[names.size()];names.toArray(array);return array;

HsqlName[] array = new HsqlName[names.size()];names.toArray(array);return array;

---------------------------Clone group no  554 for hash c16e408fa45d69c7bd1447fba816f006--------------------



sysLobSession.sessionContext.pop();RowSetNavigator navigator = result.getNavigator();int             size      = navigator.getSize();

sysLobSession.sessionContext.pop();RowSetNavigator navigator = result.getNavigator();int             size      = navigator.getSize();

sysLobSession.sessionContext.pop();RowSetNavigator navigator = result.getNavigator();int             size      = navigator.getSize();

---------------------------Clone group no  555 for hash 3cf7c8940b67a52ec6357008a53fe052--------------------



if (token.isMalformed) {
                        return;
                    }token.tokenType = Tokens.X_DELIMITED_IDENTIFIER;token.tokenString = charWriter.toString();token.isDelimiter = true;

if (token.isMalformed) {
                    return;
                }token.tokenType   = Tokens.X_DELIMITED_IDENTIFIER;token.tokenString = charWriter.toString();token.isDelimiter = true;

---------------------------Clone group no  556 for hash 9ffad081dc6f344d7e9cf599eb231175--------------------



pstmt.setInt(1, i);pstmt.setInt(2, i / ntellers);pstmt.executeUpdate();pstmt.clearWarnings();

pstmt.setInt(1, i);pstmt.setInt(2, i / ntellers);pstmt.executeUpdate();pstmt.clearWarnings();

---------------------------Clone group no  557 for hash 4f045b13fff9f32d40f179614599f835--------------------



node                            = row.getNode(key.getPosition());accessorList[key.getPosition()] = node;return node;

node                            = row.getNode(key.getPosition());accessorList[key.getPosition()] = node;return node;

---------------------------Clone group no  558 for hash 7598a9a476f01a103bdf046959e6cccf--------------------



HsqlList unresolved = condition.resolveColumnReferences(session,
                rangeGroup, rangeGroups, null);ExpressionColumn.checkColumnsResolved(unresolved);condition.resolveTypes(session, null);if (condition.isUnresolvedParam()) {
                condition.dataType = Type.SQL_BOOLEAN;
            }if (condition.getDataType() != Type.SQL_BOOLEAN) {
                throw Error.error(ErrorCode.X_42568);
            }

HsqlList unresolved = condition.resolveColumnReferences(session,
                rangeGroup, rangeGroups, null);ExpressionColumn.checkColumnsResolved(unresolved);condition.resolveTypes(session, null);if (condition.isUnresolvedParam()) {
                condition.dataType = Type.SQL_BOOLEAN;
            }if (condition.getDataType() != Type.SQL_BOOLEAN) {
                throw Error.error(ErrorCode.X_42568);
            }

---------------------------Clone group no  559 for hash fdd4392456fbd89509aeb2f9a9940802--------------------



addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);         // not nulladdColumn(t, \"DATA_TYPE\", Type.SQL_SMALLINT);        // not nulladdColumn(t, \"TYPE_NAME\", SQL_IDENTIFIER);           // not null

addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);            // not nulladdColumn(t, \"DATA_TYPE\", Type.SQL_SMALLINT);           // not nulladdColumn(t, \"TYPE_NAME\", SQL_IDENTIFIER);              // not null

addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);         // not nulladdColumn(t, \"DATA_TYPE\", Type.SQL_SMALLINT);        // not nulladdColumn(t, \"TYPE_NAME\", SQL_IDENTIFIER);           // not null

---------------------------Clone group no  560 for hash 8c7554244dabf459f499e8f607738dbe--------------------



addColumn(t, \"OBJECT_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"OBJECT_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"OBJECT_NAME\", SQL_IDENTIFIER);    // not nulladdColumn(t, \"OBJECT_TYPE\", SQL_IDENTIFIER);

addColumn(t, \"OBJECT_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"OBJECT_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"OBJECT_NAME\", SQL_IDENTIFIER);    // not nulladdColumn(t, \"OBJECT_TYPE\", SQL_IDENTIFIER);

addColumn(t, \"OBJECT_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"OBJECT_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"OBJECT_NAME\", SQL_IDENTIFIER);addColumn(t, \"OBJECT_TYPE\", SQL_IDENTIFIER);

---------------------------Clone group no  561 for hash 8bd4ec817f752b138b17e8b16338e276--------------------



if (name == null) {
                        return null;
                    }HsqlName tableName = name.parent;Table table = (Table) schema.tableList.get(tableName.name);

if (name == null) {
                        return null;
                    }HsqlName tableName = name.parent;Table table = (Table) schema.tableList.get(tableName.name);

if (name == null) {
                        return null;
                    }HsqlName tableName = name.parent;Table table = (Table) schema.tableList.get(tableName.name);

---------------------------Clone group no  562 for hash 101c4321f0f58b884ac99e631e539ee9--------------------



// error
        if (s == null) {
            return;
        }// writeBytes(s);
        byte[] bytes = getBytes(s);write(bytes, 0, bytes.length);

if (s == null) {
            return;
        }// writeBytes(s);
        byte[] bytes = getBytes(s);write(bytes, 0, bytes.length);

if (s == null) {
            return;
        }// writeBytes(s);
        byte[] bytes = getBytes(s);write(bytes, 0, bytes.length);

---------------------------Clone group no  563 for hash e09d686288049b8949a7851fd45018e4--------------------



InputStream fis =
                    getClass().getResourceAsStream(resourceFileName);fis    = getClass().getResourceAsStream(resourceFileName);reader = new InputStreamReader(fis, \"ISO-8859-1\");for (int i = 0; i < 100; i++) {
                    reader.read();
                }

InputStream fis =
                    getClass().getResourceAsStream(resourceFileName);fis    = getClass().getResourceAsStream(resourceFileName);reader = new InputStreamReader(fis, \"ISO-8859-1\");for (int i = 0; i < 100; i++) {
                    reader.read();
                }

---------------------------Clone group no  564 for hash f814ed638a25e6067f7011e03528ebae--------------------



break;default :throw Error.runtimeError(ErrorCode.U_S0500,
                                         \"ExpressionLogical\");

break;default :throw Error.runtimeError(ErrorCode.U_S0500,
                                         \"ExpressionLogical\");

break;default :throw Error.runtimeError(ErrorCode.U_S0500,
                                         \"ExpressionLogical\");

break;default :throw Error.runtimeError(ErrorCode.U_S0500,
                                         \"ExpressionLogical\");

break;default :throw Error.runtimeError(ErrorCode.U_S0500,
                                         \"ExpressionLogical\");

---------------------------Clone group no  565 for hash 02685d97920321884790766546a3a317--------------------



if (a == b) {
            return 0;
        }if (a == null) {
            return -1;
        }if (b == null) {
            return 1;
        }Object[] arra   = (Object[]) a;Object[] arrb   = (Object[]) b;int      length = arra.length;if (arrb.length < length) {
            length = arrb.length;
        }

if (a == b) {
            return 0;
        }if (a == null) {
            return -1;
        }if (b == null) {
            return 1;
        }Object[] arra   = (Object[]) a;Object[] arrb   = (Object[]) b;int      length = arra.length;if (arrb.length < length) {
            length = arrb.length;
        }

---------------------------Clone group no  566 for hash 3361ab20d2a683c4d686728ca5e851b0--------------------



Statement statement = compileSQLProcedureStatementOrNull(routine,
            null);if (statement == null) {
            throw unexpectedToken();
        }Token[] tokenisedStatement = getRecordedStatement();String  sql                = Token.getSQL(tokenisedStatement);statement.setSQL(sql);routine.setProcedure(statement);

Statement statement = compileSQLProcedureStatementOrNull(routine,
                null);if (statement == null) {
                throw unexpectedToken();
            }Token[] tokenisedStatement = getRecordedStatement();String  sql                = Token.getSQL(tokenisedStatement);statement.setSQL(sql);routine.setProcedure(statement);

---------------------------Clone group no  567 for hash 35985290bda366a69b1d52c1c3512683--------------------



result |= (updateColumnSet != null && !updateColumnSet.isEmpty());result |= referencesColumnSet != null
                  && !referencesColumnSet.isEmpty();result |= triggerColumnSet != null && !triggerColumnSet.isEmpty();

result |= (updateColumnSet != null && !updateColumnSet.isEmpty());result |= referencesColumnSet != null
                  && !referencesColumnSet.isEmpty();result |= triggerColumnSet != null && !triggerColumnSet.isEmpty();

---------------------------Clone group no  568 for hash c86682724e199a0696e0b9e61aa04a14--------------------



if (nodes[0].dataType == null) {
                    nodes[0].dataType = Type.SQL_TIMESTAMP_NO_FRACTION;
                }if (!nodes[0].dataType.isDateOrTimestampType()) {
                    throw Error.error(ErrorCode.X_42563);
                }dataType = Type.SQL_TIMESTAMP_NO_FRACTION;break;

if (nodes[0].dataType == null) {
                    nodes[0].dataType = Type.SQL_TIMESTAMP_NO_FRACTION;
                }if (!nodes[0].dataType.isDateOrTimestampType()) {
                    throw Error.error(ErrorCode.X_42563);
                }dataType = Type.SQL_TIMESTAMP_NO_FRACTION;break;

---------------------------Clone group no  569 for hash 3143368dae55c511f2af968b68a3fe69--------------------



int       col_count = rs.getMetaData().getColumnCount();for (int i = 1; i <= col_count; i++) {
            System.out.print(rs.getMetaData().getColumnLabel(i) + \"\\t\");
        }System.out.println(\"\");while (rs.next()) {
            for (int i = 1; i <= col_count; i++) {
                System.out.print(rs.getObject(i));
                System.out.print(\"\\t\");
            }

            System.out.println(\"\");
        }

int col_count = rs.getMetaData().getColumnCount();for (int i = 1; i <= col_count; i++) {
            System.out.print(rs.getMetaData().getColumnLabel(i) + \"\\t\");
        }System.out.println(\"\");while (rs.next()) {
            for (int i = 1; i <= col_count; i++) {
                System.out.print(rs.getObject(i));
                System.out.print(\"\\t\");
            }

            System.out.println(\"\");
        }

---------------------------Clone group no  570 for hash 51e8826c3f12da7df077e0d3c23749ff--------------------



long millis = o.getSeconds() * 1000L;millis = HsqlDateTime.convertMillisToCalendar(tempCalDefault, millis);writeLong(millis);

long millis = o.getSeconds() * 1000L;millis = HsqlDateTime.convertMillisToCalendar(tempCalDefault,
                    millis);writeLong(millis);

---------------------------Clone group no  571 for hash 0ab6ecc2fbc9dba26a25275e8e97d2ef--------------------



parameterValues[i - 1] = o;parameterSet[i - 1]    = Boolean.TRUE;return;

parameterValues[i - 1] = o;parameterSet[i - 1]    = Boolean.TRUE;return;

// in the same database
            parameterValues[i - 1] = o;parameterSet[i - 1]    = Boolean.TRUE;return;

---------------------------Clone group no  572 for hash cddc5658ffbbbbbf949c9cfe1428b399--------------------



SchemaObject charset =
                            readSchemaObjectName(SchemaObject.CHARSET);charsets.add(charset);if (token.tokenType == Tokens.COMMA) {
                            read();

                            continue;
                        }break;

SchemaObject charset =
                            readSchemaObjectName(SchemaObject.CHARSET);charsets.add(charset);if (token.tokenType == Tokens.COMMA) {
                            read();

                            continue;
                        }break;

---------------------------Clone group no  573 for hash 0cceda260220e99bf9d6460168caa853--------------------



checkIsSchemaObjectName();HsqlName hsqlName =
                        database.nameManager.newColumnHsqlName(table.getName(),
                            token.tokenString, isDelimitedIdentifier());read();

checkIsSchemaObjectName();HsqlName hsqlName =
            database.nameManager.newColumnHsqlName(table.getName(),
                token.tokenString, isDelimitedIdentifier());read();

---------------------------Clone group no  574 for hash 488f8dd059b9ded53ad18ea98c3b9712--------------------



read();Boolean  mode = processTrueOrFalseObject();Object[] args = new Object[]{ mode };

read();Boolean  mode = processTrueOrFalseObject();Object[] args = new Object[]{ mode };

---------------------------Clone group no  575 for hash 1765fa923e0e4a87595b9ea21e8b9661--------------------



if (pos < 1) {
            throw JDBCUtil.invalidArgument(\"pos: \" + pos);
        }checkClosed();createFile();

if (pos < 1) {
            throw JDBCUtil.invalidArgument(\"pos: \" + pos);
        }checkClosed();createFile();

if (pos < 1) {
            throw JDBCUtil.invalidArgument(\"pos: \" + pos);
        }checkClosed();createFile();

---------------------------Clone group no  576 for hash b415eb83d61745bd301c087e0d9249f6--------------------



ps.addBatch();ps.addBatch();ps.executeBatch();rs = ps.getGeneratedKeys();

ps.addBatch();ps.addBatch();ps.executeBatch();rs = ps.getGeneratedKeys();

ps.addBatch();ps.addBatch();ps.executeBatch();rs = ps.getGeneratedKeys();

ps.addBatch();ps.addBatch();ps.executeBatch();rs = ps.getGeneratedKeys();

---------------------------Clone group no  577 for hash 0c490b3605348405b95a9c7e437d13b5--------------------



break;case Types.SQL_BINARY :case Types.SQL_VARBINARY :

break;case Types.SQL_BINARY :case Types.SQL_VARBINARY :

break;case Types.SQL_BINARY :case Types.SQL_VARBINARY :

break;case Types.SQL_BINARY :case Types.SQL_VARBINARY :

break;case Types.SQL_BINARY :case Types.SQL_VARBINARY :

break;case Types.SQL_BINARY :case Types.SQL_VARBINARY :

---------------------------Clone group no  578 for hash e0db259c16f2f540480b6a9b6c1dbd4f--------------------



read();sequence.setCycle(true);break;

read();sequence.setCycle(true);break;

---------------------------Clone group no  579 for hash 507193f7e1ebf937720e4097dc697814--------------------



catch (SecurityException ex) {
            throw Exceptions.resultInstantiation(ex);
        }catch (InstantiationException ex) {
            throw Exceptions.resultInstantiation(ex);
        }catch (IllegalAccessException ex) {
            throw Exceptions.resultInstantiation(ex);
        }catch (ClassCastException ex) {
            throw Exceptions.resultInstantiation(ex);
        }

catch (SecurityException ex) {
            throw Exceptions.resultInstantiation(ex);
        }catch (InstantiationException ex) {
            throw Exceptions.resultInstantiation(ex);
        }catch (IllegalAccessException ex) {
            throw Exceptions.resultInstantiation(ex);
        }catch (ClassCastException ex) {
            throw Exceptions.resultInstantiation(ex);
        }

catch (SecurityException ex) {
            throw Exceptions.resultInstantiation(ex);
        }catch (InstantiationException ex) {
            throw Exceptions.resultInstantiation(ex);
        }catch (IllegalAccessException ex) {
            throw Exceptions.resultInstantiation(ex);
        }catch (ClassCastException ex) {
            throw Exceptions.resultInstantiation(ex);
        }

---------------------------Clone group no  580 for hash c6caf86b521d830d7b0a286c38a87a7d--------------------



file.deleteOnExit();pw = new PrintWriter(new FileWriter(file));pw.println(\"# Permit Localhost test ACL\\n\");

file.deleteOnExit();pw = new PrintWriter(new FileWriter(file));pw.println(\"# Permit Localhost test ACL\\n\");

---------------------------Clone group no  581 for hash 4c3b2e5e7fdc4c65a67111572ce2b4b4--------------------



long millis;int  nanos       = 0;int  zoneSeconds = 0;

long millis;int  nanos       = 0;int  zoneSeconds = 0;

---------------------------Clone group no  582 for hash 5711ab6d0bad7d26988ef22ce8575aa0--------------------



sb.append(\" arg_left=[\");sb.append(nodes[LEFT].describe(session, blanks + 1));sb.append(']');

sb.append(\" arg_left=[\");sb.append(nodes[LEFT].describe(session, blanks + 1));sb.append(']');

sb.append(\" arg_left=[\");sb.append(nodes[LEFT].describe(session, blanks + 1));sb.append(']');

---------------------------Clone group no  583 for hash 269600742b301e3f016c9c928ac6ef3c--------------------



int    index      = hashIndex.getHashIndex(key.hashCode());int    lookup     = hashIndex.hashTable[index];int    lastLookup = -1;

int    index      = hashIndex.getHashIndex(key.hashCode());int    lookup     = hashIndex.hashTable[index];int    lastLookup = -1;

---------------------------Clone group no  584 for hash 6449b65441b262846c3cfc7eeb058c99--------------------



read();readThis(Tokens.OPENBRACKET);e = XreadRowElementList(true);readThis(Tokens.CLOSEBRACKET);break;default :

read();readThis(Tokens.OPENBRACKET);e = XreadRowElementList(true);readThis(Tokens.CLOSEBRACKET);break;default :

---------------------------Clone group no  585 for hash 9a8c903a1a18cb3450555b6a46195ee9--------------------



String s = readString();if (s == null) {
            return null;
        }s = s.trim();if (s.length() == 0) {
            return null;
        }return ValuePool.getInt(Integer.parseInt(s));

String s = readString();if (s == null) {
            return null;
        }s = s.trim();if (s.length() == 0) {
            return null;
        }return ValuePool.getInt(Integer.parseInt(s));

---------------------------Clone group no  586 for hash a676859443db46d1c095022e9cc33e4b--------------------



case Types.SQL_INTEGER :return SQL_INTEGER;case Types.SQL_SMALLINT :return SQL_SMALLINT;case Types.SQL_BIGINT :return SQL_BIGINT;case Types.TINYINT :return TINYINT;case Types.SQL_FLOAT :

case Types.SQL_INTEGER :return SQL_INTEGER;case Types.SQL_SMALLINT :return SQL_SMALLINT;case Types.SQL_BIGINT :return SQL_BIGINT;case Types.TINYINT :return TINYINT;case Types.SQL_FLOAT :

---------------------------Clone group no  587 for hash aa8240f735bedd10232ab9afc604c7f5--------------------



if (size == 0) {
            return;
        }if (limitstart >= size) {
            clear();

            return;
        }if (limitstart != 0) {
            reset();

            for (int i = 0; i < limitstart; i++) {
                next();
                removeCurrent();
            }
        }

if (size == 0) {
            return;
        }if (limitstart >= size) {
            clear();

            return;
        }if (limitstart != 0) {
            reset();

            for (int i = 0; i < limitstart; i++) {
                next();
                removeCurrent();
            }
        }

---------------------------Clone group no  588 for hash ce921f3527a85d0b4fdf562c3abffdd0--------------------



TriggerDef trigger = (TriggerDef) it.next();if (!session.getGrantee().isFullyAccessibleByRole(
                    trigger.getName())) {
                continue;
            }OrderedHashSet set = trigger.getReferences();

TriggerDef trigger = (TriggerDef) it.next();if (!session.getGrantee().isFullyAccessibleByRole(
                    trigger.getName())) {
                continue;
            }OrderedHashSet set = trigger.getReferences();

TriggerDef trigger = (TriggerDef) it.next();if (!session.getGrantee().isFullyAccessibleByRole(
                    trigger.getName())) {
                continue;
            }OrderedHashSet set = trigger.getReferences();

TriggerDef trigger = (TriggerDef) it.next();if (!session.getGrantee().isFullyAccessibleByRole(
                    trigger.getName())) {
                continue;
            }OrderedHashSet set = trigger.getReferences();

---------------------------Clone group no  589 for hash e7032147e631428455a68f0557a1cea6--------------------



case Tokens.BOTH :leading = trailing = true;break;case Tokens.LEADING :leading = true;break;case Tokens.TRAILING :trailing = true;break;default :throw Error.runtimeError(ErrorCode.U_S0500,
                                                 \"FunctionSQL\");

case Tokens.BOTH :leading = trailing = true;break;case Tokens.LEADING :leading = true;break;case Tokens.TRAILING :trailing = true;break;default :throw Error.runtimeError(ErrorCode.U_S0500,
                                                 \"FunctionSQL\");

---------------------------Clone group no  590 for hash 2edfc6026beee8ac6e6ca45b168cf69c--------------------



if (length == 0) {
            return ResultLob.newLobSetResponse(lobID, 0);
        }if (byteBuffer == null) {
            throw Error.error(ErrorCode.DATA_IS_READONLY);
        }writeLock.lock();

if (length == 0) {
            return ResultLob.newLobSetResponse(lobID, 0);
        }if (byteBuffer == null) {
            throw Error.error(ErrorCode.DATA_IS_READONLY);
        }writeLock.lock();

---------------------------Clone group no  591 for hash bdbd272a99b3c9e7648d8b2e5ddf8a76--------------------



requestedState = YYINITIAL;yybegin(PROMPT_CHANGE_STATE);pushbackTrim();

requestedState = YYINITIAL;yybegin(PROMPT_CHANGE_STATE);pushbackTrim();

requestedState = YYINITIAL;yybegin(PROMPT_CHANGE_STATE);pushbackTrim();

requestedState = YYINITIAL;yybegin(PROMPT_CHANGE_STATE);pushbackTrim();

requestedState = YYINITIAL;yybegin(PROMPT_CHANGE_STATE);pushbackTrim();

---------------------------Clone group no  592 for hash 6f2ce6c4f3b2197fbd5c2821e17e8a46--------------------



read();if (token.tokenType != Tokens.X_VALUE
                        || token.dataType.typeCode != Types.SQL_CHAR) {
                    break;
                }String s = token.tokenString;read();

read();if (token.tokenType != Tokens.X_VALUE
                        || token.dataType.typeCode != Types.SQL_CHAR) {
                    break;
                }String s = token.tokenString;read();

read();if (token.tokenType != Tokens.X_VALUE
                        || token.dataType.typeCode != Types.SQL_CHAR) {
                    break;
                }String s = token.tokenString;read();

---------------------------Clone group no  593 for hash 126549224c477f15c80420160fd03837--------------------



int ch1 = read();int ch2 = read();if ((ch1 | ch2) < 0) {
            throw new EOFException();
        }

int ch1 = read();int ch2 = read();if ((ch1 | ch2) < 0) {
            throw new EOFException();
        }

---------------------------Clone group no  594 for hash 7726f2fb595db0ba6c5d465199c8b613--------------------



char[] readBfr = new char[1024];int i;StringWriter sWriter = new StringWriter();InputStreamReader isr = null;String str;

char[] readBfr = new char[1024];int i;StringWriter sWriter = new StringWriter();InputStreamReader isr = null;String str;

---------------------------Clone group no  595 for hash d2117cef3c9946ab10e48c8c05b8b32e--------------------



addColumn(t, \"GRANTEE\", SQL_IDENTIFIER);addColumn(t, \"ROLE_NAME\", SQL_IDENTIFIER);addColumn(t, \"IS_GRANTABLE\", SQL_IDENTIFIER);

addColumn(t, \"GRANTEE\", SQL_IDENTIFIER);addColumn(t, \"ROLE_NAME\", SQL_IDENTIFIER);addColumn(t, \"IS_GRANTABLE\", SQL_IDENTIFIER);

---------------------------Clone group no  596 for hash 17920bc90dd7478a76c93474556fefb5--------------------



/*
            case FUNCTION_CHAR_NORMALIZE :
                break;
            */
            case FUNC_CURRENT_CATALOG :case FUNC_CURRENT_DEFAULT_TRANSFORM_GROUP :case FUNC_CURRENT_PATH :case FUNC_CURRENT_ROLE :case FUNC_CURRENT_SCHEMA :case FUNC_CURRENT_TRANSFORM_GROUP_FOR_TYPE :case FUNC_CURRENT_USER :case FUNC_SESSION_USER :case FUNC_SYSTEM_USER :case FUNC_USER :

case FUNC_CURRENT_CATALOG :case FUNC_CURRENT_DEFAULT_TRANSFORM_GROUP :case FUNC_CURRENT_PATH :case FUNC_CURRENT_ROLE :case FUNC_CURRENT_SCHEMA :case FUNC_CURRENT_TRANSFORM_GROUP_FOR_TYPE :case FUNC_CURRENT_USER :case FUNC_SESSION_USER :case FUNC_SYSTEM_USER :case FUNC_USER :

---------------------------Clone group no  597 for hash 00a490d2154ef85e92ca4c878411f7c3--------------------



Constraint c =
                new Constraint(constName, set,
                               SchemaObject.ConstraintTypes.PRIMARY_KEY);constraintList.set(0, c);column.setPrimaryKey(true);

Constraint c = new Constraint(
                        constName, set,
                        SchemaObject.ConstraintTypes.PRIMARY_KEY);constraintList.set(0, c);column.setPrimaryKey(true);

---------------------------Clone group no  598 for hash 6997c6cd0fb4db8090e6d36b35d60766--------------------



readThis(Tokens.MESSAGE_TEXT);readThis(Tokens.EQUALS);message = XreadSimpleValueSpecificationOrNull();if (message == null) {
                throw unexpectedToken();
            }resolveOuterReferencesAndTypes(routine, context, message);

readThis(Tokens.MESSAGE_TEXT);readThis(Tokens.EQUALS);message = XreadSimpleValueSpecificationOrNull();if (message == null) {
                    throw unexpectedToken();
                }resolveOuterReferencesAndTypes(routine, context, message);

---------------------------Clone group no  599 for hash eccbbdfb490b701462c78a4ca2697ada--------------------



CurrentTransfer = 0;CurrentAlter    = 0;transfer();

CurrentTransfer = 0;CurrentAlter    = 0;transfer();

---------------------------Clone group no  600 for hash 2013eaed86de10087c27b2f1bb11cedf--------------------



sortDescending[i] = sort.isDescending();sortNullsLast[i]  = sort.isNullsLast();hasNullsLast      |= sortNullsLast[i];

sortDescending[i] = sort.isDescending();sortNullsLast[i]  = sort.isNullsLast();hasNullsLast      |= sortNullsLast[i];

---------------------------Clone group no  601 for hash ccd56c90de5f1773827594034c0fabf2--------------------



if (result.getMainString() == null) {
                        continue;
                    }if (label != null
                            && label.name.equals(result.getMainString())) {
                        continue;
                    }break;

if (result.getMainString() == null) {
                        continue;
                    }if (label != null
                            && label.name.equals(result.getMainString())) {
                        continue;
                    }break;

---------------------------Clone group no  602 for hash 705ed16045e6b4060675ba184443e894--------------------



dataFile.seek(LONG_FREE_POS_POS);fileFreePosition      = dataFile.readLong();fileStartFreePosition = fileFreePosition;

dataFile.seek(LONG_FREE_POS_POS);fileFreePosition      = dataFile.readLong();fileStartFreePosition = fileFreePosition;

---------------------------Clone group no  603 for hash 828b4c4076e6d89efbefe22b61c0d774--------------------



hashIndex.unlinkNode(index, lastLookup, lookup);multiValueTable[lookup] = false;lookup                  = hashIndex.hashTable[index];

hashIndex.unlinkNode(index, lastLookup, lookup);multiValueTable[lookup] = false;lookup = hashIndex.hashTable[index];

hashIndex.unlinkNode(index, lastLookup, lookup);multiValueTable[lookup] = false;lookup = hashIndex.hashTable[index];

---------------------------Clone group no  604 for hash adf6bb1c663c5c41dbebe7b43baebd85--------------------



p.add(\"South\", createLabel(\"\"));p.add(\"East\", createLabel(\"\"));p.add(\"West\", createLabel(\"\"));p.setBackground(SystemColor.control);return p;

p.add(\"South\", createLabel(\"\"));p.add(\"East\", createLabel(\"\"));p.add(\"West\", createLabel(\"\"));p.setBackground(SystemColor.control);return p;

---------------------------Clone group no  605 for hash 394ca6a279a8bf565a5ecb6f21c57e7e--------------------



mark = 0;reset();if (buffer.length < rowsize) {
            buffer = new byte[rowsize];
        }filePos   = filepos;size      = count = rowsize;

mark = 0;reset();if (buffer.length < rowsize) {
            buffer = new byte[rowsize];
        }filePos   = filepos;size      = count = rowsize;

---------------------------Clone group no  606 for hash 81182e24ede2d08742b4006dfdfe778b--------------------



break;default :throw Error.runtimeError(ErrorCode.U_S0500, \"SchemaObjectSet\");

break;default :throw Error.runtimeError(ErrorCode.U_S0500, \"SchemaObjectSet\");

---------------------------Clone group no  607 for hash d719ec4cd5f62ecf701a845359230ed9--------------------



this.archiveFile = archiveFile;File dbPathFile = new File(dbPath);dbDir          = dbPathFile.getAbsoluteFile().getParentFile();instanceName   = dbPathFile.getName();

this.archiveFile = archiveFile;File dbPathFile = new File(dbPath);dbDir        = dbPathFile.getAbsoluteFile().getParentFile();instanceName = dbPathFile.getName();

---------------------------Clone group no  608 for hash 3b9b90afcf2bae06b9870a09f2a03b28--------------------



st1 = conn.createStatement();rs  = st1.executeQuery(\"select sum(bbalance) from branches\");rs.next();bbalancesum = rs.getInt(1);rs.close();rs = st1.executeQuery(\"select sum(tbalance) from tellers\");rs.next();tbalancesum = rs.getInt(1);rs.close();

st1 = conn.createStatement();rs  = st1.executeQuery(\"select sum(bbalance) from branches\");rs.next();bbalancesum = rs.getInt(1);rs.close();rs = st1.executeQuery(\"select sum(tbalance) from tellers\");rs.next();tbalancesum = rs.getInt(1);rs.close();

---------------------------Clone group no  609 for hash 57e31f02183282f55922de394761c4bc--------------------



addColumn(t, \"TABLE_CAT\", SQL_IDENTIFIER);              // 0addColumn(t, \"TABLE_SCHEM\", SQL_IDENTIFIER);            // 1addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);             // not nulladdColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);            // not null

addColumn(t, \"TABLE_CAT\", SQL_IDENTIFIER);addColumn(t, \"TABLE_SCHEM\", SQL_IDENTIFIER);addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);     // not nulladdColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);    // not null

---------------------------Clone group no  610 for hash e8cda1a59aa11ee4a6c9413a371259dc--------------------



HsqlDateTime.setTimeInMillis(cal, millis);cal.set(Calendar.DAY_OF_MONTH, 1);cal.add(Calendar.MONTH, 1);cal.add(Calendar.DAY_OF_MONTH, -1);

HsqlDateTime.setTimeInMillis(cal, millis);cal.set(Calendar.DAY_OF_MONTH, 1);cal.add(Calendar.MONTH, 1);cal.add(Calendar.DAY_OF_MONTH, -1);

---------------------------Clone group no  611 for hash 1349ef55af0aa6bfa08b484d6fe23c99--------------------



this.name      = name;constType      = type;core           = new ConstraintCore();

this.name      = name;constType      = type;core           = new ConstraintCore();

---------------------------Clone group no  612 for hash be8e3c11f84c8bcd4e75aa3b2f35530c--------------------



String s = readString();if (s == null) {
            return null;
        }BinaryData data = scanner.convertToBinary(s);

String s = readString();if (s == null) {
            return null;
        }BinaryData data = scanner.convertToBinary(s);

---------------------------Clone group no  613 for hash 04df20fc9513659ade0e7fd77019da0e--------------------



dataOut.writeByte(ResultConstants.DISCONNECT);      // ModedataOut.writeInt(4);                                //Length Int of first result is always read! Minvalue is 4: It is the number of bytes of the current result (it includes the length of this Int itself)dataOut.writeByte(ResultConstants.NONE);            // No Additional resultsdataOut.close();return;

dataOut.writeByte(ResultConstants.DISCONNECT);    // ModedataOut.writeInt(4);                              //Length Int of first result is always read! Minvalue is 4: It is the number of bytes of the current result (it includes the length of this Int itself)dataOut.writeByte(ResultConstants.NONE);          // No Additional resultsdataOut.close();return;

---------------------------Clone group no  614 for hash 79b12ab38b2a241b3dacd9d9a5c0f07c--------------------



cryptOut = crypto.getOutputStream(fileStreamOut);fileStreamOut = new GZIPOutputStream(cryptOut);isCrypt       = true;

cryptOut = crypto.getOutputStream(fileStreamOut);fileStreamOut = new GZIPOutputStream(cryptOut);isCrypt       = true;

---------------------------Clone group no  615 for hash b16e1e97799ff1acf56dc5783b280022--------------------



if (schemaObject.getName().type != SchemaObject.TABLE) {
                    throw this.unexpectedTokenRequire(Tokens.T_CHECK);
                }read();readThis(Tokens.KEY);

if (schemaObject.getName().type != SchemaObject.TABLE) {
                    throw this.unexpectedTokenRequire(Tokens.T_CHECK);
                }read();readThis(Tokens.KEY);

---------------------------Clone group no  616 for hash 77818d373a7302157cb41c22285c382a--------------------



Iterator it = unresolved.iterator();if (!it.hasNext()) {
                    break;
                }OrderedHashSet newResolved = new OrderedHashSet();SchemaObjectSet.addAllSQL(resolved, unresolved, list, it,
                                          newResolved);unresolved.removeAll(newResolved);if (newResolved.size() == 0) {
                    break;
                }

Iterator it = unresolved.iterator();if (!it.hasNext()) {
                    break;
                }OrderedHashSet newResolved = new OrderedHashSet();SchemaObjectSet.addAllSQL(resolved, unresolved, list, it,
                                          newResolved);unresolved.removeAll(newResolved);if (newResolved.size() == 0) {
                    break;
                }

---------------------------Clone group no  617 for hash 48223d0fbc602b9ac0fb662871fafe5e--------------------



Iterator it = values().iterator();int      i  = 0;while (it.hasNext()) {
            array[i] = it.next();

            i++;
        }

Iterator it = values().iterator();int      i  = 0;while (it.hasNext()) {
            array[i] = it.next();

            i++;
        }

Iterator it = values().iterator();int      i  = 0;while (it.hasNext()) {
            array[i] = it.next();

            i++;
        }

---------------------------Clone group no  618 for hash c765d3a708dfb600f17b91c724347470--------------------



ps.setInt(1, 3);ps.setString(2, \"xy\");assertEquals(1, ps.executeUpdate());ps.setInt(1, 4);assertEquals(1, ps.executeUpdate());ps.close();netConn.commit();

ps.setInt(1, 3);ps.setString(2, \"xy\");assertEquals(1, ps.executeUpdate());ps.setInt(1, 4);assertEquals(1, ps.executeUpdate());ps.close();netConn.commit();

---------------------------Clone group no  619 for hash 6d38d60d0bf6f4ad185883528503afdb--------------------



addColumn(t, \"SEQUENCE_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"SEQUENCE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"SEQUENCE_NAME\", SQL_IDENTIFIER);addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);addColumn(t, \"MAXIMUM_VALUE\", CHARACTER_DATA);addColumn(t, \"MINIMUM_VALUE\", CHARACTER_DATA);addColumn(t, \"INCREMENT\", CHARACTER_DATA);addColumn(t, \"CYCLE_OPTION\", YES_OR_NO);addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);// HSQLDB-specific
            addColumn(t, \"START_WITH\", CHARACTER_DATA);addColumn(t, \"NEXT_VALUE\", CHARACTER_DATA);

addColumn(t, \"SEQUENCE_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"SEQUENCE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"SEQUENCE_NAME\", SQL_IDENTIFIER);addColumn(t, \"DATA_TYPE\", CHARACTER_DATA);addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);addColumn(t, \"MAXIMUM_VALUE\", CHARACTER_DATA);addColumn(t, \"MINIMUM_VALUE\", CHARACTER_DATA);addColumn(t, \"INCREMENT\", CHARACTER_DATA);addColumn(t, \"CYCLE_OPTION\", YES_OR_NO);addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);// HSQLDB-specific
            addColumn(t, \"START_WITH\", CHARACTER_DATA);addColumn(t, \"NEXT_VALUE\", CHARACTER_DATA);

---------------------------Clone group no  620 for hash 14c7e909a701f07aee74b1e72327c397--------------------



this.table = emptyTable;this.size  = 0;reset();

this.table = emptyTable;this.size  = 0;reset();

---------------------------Clone group no  621 for hash 0522b0b6daa88b1f4b971f5f88478835--------------------



//-- setup for following tests
        conn1.setAutoCommit(false);sql = \"insert into t values(?,?,?,?)\";ps  = conn1.prepareStatement(sql);ps.setString(2, \"Mary\");ps.setString(3, \"Peterson-Clancy\");i = 0;for (; i < 10; i++) {
            ps.setInt(1, i);
            ps.setInt(4, i);
            ps.executeUpdate();
        }

//-- setup for following tests
        conn1.setAutoCommit(false);sql = \"insert into t values(?,?,?,?)\";ps  = conn1.prepareStatement(sql);ps.setString(2, \"Mary\");ps.setString(3, \"Peterson-Clancy\");i = 0;for (; i < 10; i++) {
            ps.setInt(1, i);
            ps.setInt(4, i);
            ps.executeUpdate();
        }

---------------------------Clone group no  622 for hash c3340fa35aa366bef838a919b3b42000--------------------



System.out.println(rs.getInt(1));System.out.println(rs.getInt(2));System.out.println(rs.getString(3));

System.out.println(rs.getInt(1));System.out.println(rs.getInt(2));System.out.println(rs.getString(3));

---------------------------Clone group no  623 for hash d0ab7d20db53842cb2399d7c00c435f7--------------------



read();readThis(Tokens.SQL);readThis(Tokens.DATA);

read();readThis(Tokens.SQL);readThis(Tokens.DATA);

---------------------------Clone group no  624 for hash 50e20348f44111a40e684b9aafbdcce6--------------------



outPacket.writeInt(26);               // Datatype ID  [adtid]outPacket.writeShort(4);              // Datatype size  [adtsize]outPacket.writeInt(-1);               // Var size [atttypmod]outPacket.writeShort(0);              // text \"format code\"

outPacket.writeInt(26);               // Datatype ID  [adtid]outPacket.writeShort(4);              // Datatype size  [adtsize]outPacket.writeInt(-1);               // Var size [atttypmod]outPacket.writeShort(0);              // text \"format code\"

---------------------------Clone group no  625 for hash d754c836e93701df8d0fa6f5371cd379--------------------



case OpTypes.SUBTRACT :case OpTypes.MULTIPLY :case OpTypes.DIVIDE :

// fall through
            case OpTypes.SUBTRACT :case OpTypes.MULTIPLY :case OpTypes.DIVIDE :

---------------------------Clone group no  626 for hash 74d7592baa5f2ca5cf57393e4d8839af--------------------



Connection        conn = newConnection();PreparedStatement pstmt;int               updateCount;

Connection        conn = newConnection();PreparedStatement pstmt;int               updateCount;

---------------------------Clone group no  627 for hash a2a0cf7e060374139f781680cd0a2482--------------------



ResultMetaData meta = deleteLobPartCall.getParametersMetaData();Object         params[] = new Object[meta.getColumnCount()];params[DELETE_BLOCKS.LOB_ID]       = ValuePool.getLong(lobID);

ResultMetaData meta     = deleteLobPartCall.getParametersMetaData();Object         params[] = new Object[meta.getColumnCount()];params[DELETE_BLOCKS.LOB_ID]       = ValuePool.getLong(lobID);

---------------------------Clone group no  628 for hash 8af478b7dbc12da8386ffd098f71779e--------------------



token.tokenType   = Tokens.X_MALFORMED_UNICODE_STRING;token.isMalformed = true;return;

token.tokenType   = Tokens.X_MALFORMED_UNICODE_STRING;token.isMalformed = true;return;

token.tokenType   = Tokens.X_MALFORMED_UNICODE_STRING;token.isMalformed = true;return;

token.tokenType   = Tokens.X_MALFORMED_UNICODE_STRING;token.isMalformed = true;return;

---------------------------Clone group no  629 for hash 4b93dbd22bec3b3cdee67180a789a9db--------------------



dataFile = RAFile.newScaledRAFile(database, dataFileName,
                                                  readonly, fileType);dataFile.seek(FLAGS_POS);int flags = dataFile.readInt();is180 = !BitMap.isSet(flags, FLAG_190);

dataFile = RAFile.newScaledRAFile(database, dataFileName,
                                                  readonly, fileType);dataFile.seek(FLAGS_POS);int flags = dataFile.readInt();is180 = !BitMap.isSet(flags, FLAG_190);

---------------------------Clone group no  630 for hash 0fe2ea986e61e6a6f3405b12165d8c7e--------------------



//
        // intermediate holders
        int            columnCount;Iterator       tables;Table          table;Object[]       row;OrderedHashSet columnList;Type           type;// Initialization
        tables = allTables();

//
        // intermediate holders
        int            columnCount;Iterator       tables;Table          table;Object[]       row;OrderedHashSet columnList;Type           type;// Initialization
        tables = allTables();

---------------------------Clone group no  631 for hash 92e53fa54324d0136e97e8708964270f--------------------



end = true;break;default :

end = true;break;default :

---------------------------Clone group no  632 for hash babe0921406516a7f3139da9780317b8--------------------



read();readThis(Tokens.MEMORY);readThis(Tokens.ROWS);Integer  size = readIntegerObject();Object[] args = new Object[]{ size };

read();readThis(Tokens.MEMORY);readThis(Tokens.ROWS);Integer  size = readIntegerObject();Object[] args = new Object[]{ size };

---------------------------Clone group no  633 for hash 37582e5fb9bf299f95288edd7c9ae7cf--------------------



case GrantConstants.DELETE :return isFullDelete;case GrantConstants.SELECT :

case GrantConstants.DELETE :return isFullDelete;case GrantConstants.SELECT :

---------------------------Clone group no  634 for hash 54c0c2246ec99e05f2cb74fade60e6c3--------------------



// common type block
            if (type.isCharacterType()) {
                row[character_maximum_length] =
                    ValuePool.getLong(type.precision);
                row[character_octet_length] = ValuePool.getLong(type.precision
                        * 2);
                row[character_set_catalog] = database.getCatalogName().name;
                row[character_set_schema] =
                    ((CharacterType) type).getCharacterSet().getSchemaName()
                        .name;
                row[character_set_name] =
                    ((CharacterType) type).getCharacterSet().getName().name;
                row[collation_catalog] = database.getCatalogName().name;
                row[collation_schema] =
                    ((CharacterType) type).getCollation().getSchemaName().name;
                row[collation_name] =
                    ((CharacterType) type).getCollation().getName().name;
            } else if (type.isNumberType()) {
                row[numeric_precision] = ValuePool.getLong(
                    ((NumberType) type).getNumericPrecisionInRadix());
                row[declared_numeric_precision] = ValuePool.getLong(
                    ((NumberType) type).getNumericPrecisionInRadix());

                if (type.isExactNumberType()) {
                    row[numeric_scale] = row[declared_numeric_scale] =
                        ValuePool.getLong(type.scale);
                }

                row[numeric_precision_radix] =
                    ValuePool.getLong(type.getPrecisionRadix());
            } else if (type.isBooleanType()) {

                //
            } else if (type.isDateTimeType()) {
                row[datetime_precision] = ValuePool.getLong(type.scale);
            } else if (type.isIntervalType()) {
                row[data_type] = \"INTERVAL\";
                row[interval_type] =
                    ((IntervalType) type).getQualifier(type.typeCode);
                row[interval_precision] = ValuePool.getLong(type.precision);
                row[datetime_precision] = ValuePool.getLong(type.scale);
            } else if (type.isBinaryType()) {
                row[character_maximum_length] =
                    ValuePool.getLong(type.precision);
                row[character_octet_length] =
                    ValuePool.getLong(type.precision);
            } else if (type.isBitType()) {
                row[character_maximum_length] =
                    ValuePool.getLong(type.precision);
                row[character_octet_length] =
                    ValuePool.getLong(type.precision);
            } else if (type.isArrayType()) {
                row[maximum_cardinality] =
                    ValuePool.getLong(type.arrayLimitCardinality());
                row[data_type] = \"ARRAY\";
            }row[dtd_identifier]     = type.getDefinition();row[declared_data_type] = row[data_type];

// common type block
                if (type.isCharacterType()) {
                    row[character_maximum_length] =
                        ValuePool.getLong(type.precision);
                    row[character_octet_length] =
                        ValuePool.getLong(type.precision * 2);
                    row[character_set_catalog] =
                        database.getCatalogName().name;
                    row[character_set_schema] =
                        ((CharacterType) type).getCharacterSet()
                            .getSchemaName().name;
                    row[character_set_name] =
                        ((CharacterType) type).getCharacterSet().getName()
                            .name;
                    row[collation_catalog] = database.getCatalogName().name;
                    row[collation_schema] =
                        ((CharacterType) type).getCollation().getSchemaName()
                            .name;
                    row[collation_name] =
                        ((CharacterType) type).getCollation().getName().name;
                } else if (type.isNumberType()) {
                    row[numeric_precision] = ValuePool.getLong(
                        ((NumberType) type).getNumericPrecisionInRadix());
                    row[declared_numeric_precision] = ValuePool.getLong(
                        ((NumberType) type).getNumericPrecisionInRadix());

                    if (type.isExactNumberType()) {
                        row[numeric_scale] = row[declared_numeric_scale] =
                            ValuePool.getLong(type.scale);
                    }

                    row[numeric_precision_radix] =
                        ValuePool.getLong(type.getPrecisionRadix());
                } else if (type.isBooleanType()) {

                    //
                } else if (type.isDateTimeType()) {
                    row[datetime_precision] = ValuePool.getLong(type.scale);
                } else if (type.isIntervalType()) {
                    row[data_type] = \"INTERVAL\";
                    row[interval_type] =
                        ((IntervalType) type).getQualifier(type.typeCode);
                    row[interval_precision] =
                        ValuePool.getLong(type.precision);
                    row[datetime_precision] = ValuePool.getLong(type.scale);
                } else if (type.isBinaryType()) {
                    row[character_maximum_length] =
                        ValuePool.getLong(type.precision);
                    row[character_octet_length] =
                        ValuePool.getLong(type.precision);
                } else if (type.isBitType()) {
                    row[character_maximum_length] =
                        ValuePool.getLong(type.precision);
                    row[character_octet_length] =
                        ValuePool.getLong(type.precision);
                } else if (type.isArrayType()) {
                    row[maximum_cardinality] =
                        ValuePool.getLong(type.arrayLimitCardinality());
                    row[data_type] = \"ARRAY\";
                }row[dtd_identifier]     = type.getDefinition();row[declared_data_type] = row[data_type];

---------------------------Clone group no  635 for hash 5d635baf2ad2ebce27ae07010d1ea17f--------------------



sb.append(' ');if (!padSpace) {
            sb.append(Tokens.T_NO).append(' ').append(Tokens.T_PAD);
        }return sb.toString();

sb.append(' ');if (!padSpace) {
            sb.append(Tokens.T_NO).append(' ').append(Tokens.T_PAD);
        }return sb.toString();

---------------------------Clone group no  636 for hash 5f53050e0cc543e8e250a3c7b9aca6b8--------------------



sw.zero();sStatement = cConnection.createStatement();java.util.Random randomgen = new java.util.Random();sStatement.execute(ddl1);sStatement.execute(ddl2);sStatement.execute(ddl3);

sw.zero();sStatement = cConnection.createStatement();java.util.Random randomgen = new java.util.Random();//            sStatement.execute(\"SET WRITE_DELAY \" + writeDelay);
            sStatement.execute(ddl1);sStatement.execute(ddl2);sStatement.execute(ddl3);

---------------------------Clone group no  637 for hash 26ff6e5b28c6124efcb2be2f262099de--------------------



case FUNC_BITAND :case FUNC_BITANDNOT :case FUNC_BITNOT :case FUNC_BITOR :case FUNC_BITXOR :

case FUNC_BITAND :case FUNC_BITANDNOT :case FUNC_BITNOT :case FUNC_BITOR :case FUNC_BITXOR :

---------------------------Clone group no  638 for hash 9ceeecc40f2d0f76ff603c37572658af--------------------



execSQL(\"CREATE TABLE t1 (i \" + pref + \"INT, vc VARCHAR)\", expect);execSQL(\"DROP TABLE t1 IF EXISTS\", 0);         // resetexecSQL(\"CREATE TABLE t1 (i INT, vc \" + pref + \"VARCHAR)\", expect);execSQL(\"DROP TABLE t1 IF EXISTS\", 0);         // reset

execSQL(\"CREATE TABLE t1 (i \" + pref + \"INT, vc VARCHAR)\", expect);execSQL(\"DROP TABLE t1 IF EXISTS\", 0);         // resetexecSQL(\"CREATE TABLE t1 (i INT, vc \" + pref + \"VARCHAR)\", expect);execSQL(\"DROP TABLE t1 IF EXISTS\", 0);         // reset

---------------------------Clone group no  639 for hash c49e8081b4ba46ea6250c4f7224ec361--------------------



int eoThirdLine = sqlScriptBuffer.indexOf('\\n');if (eoThirdLine > 0) {
                    eoThirdLine = sqlScriptBuffer.indexOf('\\n',
                                                          eoThirdLine + 1);
                }if (eoThirdLine > 0) {
                    eoThirdLine = sqlScriptBuffer.indexOf('\\n',
                                                          eoThirdLine + 1);
                }if (eoThirdLine < 1) {
                    eoThirdLine = 100;
                }

int eoThirdLine = sqlScriptBuffer.indexOf('\\n');if (eoThirdLine > 0) {
                            eoThirdLine = sqlScriptBuffer.indexOf('\\n',
                                                                  eoThirdLine
                                                                  + 1);
                        }if (eoThirdLine > 0) {
                            eoThirdLine = sqlScriptBuffer.indexOf('\\n',
                                                                  eoThirdLine
                                                                  + 1);
                        }if (eoThirdLine < 1) {
                            eoThirdLine = 100;
                        }

---------------------------Clone group no  640 for hash ff9a3d881ceddb2c580b2abcc3afc01c--------------------



sequence = (NumberSequence) it.next();if (!session.getGrantee().isAccessible(sequence)) {
                continue;
            }row = t.getEmptyRowData();NumberType type = (NumberType) sequence.getDataType();int radix =
                (type.typeCode == Types.SQL_NUMERIC || type.typeCode == Types
                    .SQL_DECIMAL) ? 10
                                  : 2;row[sequence_catalog] = database.getCatalogName().name;row[sequence_schema]  = sequence.getSchemaName().name;row[sequence_name]    = sequence.getName().name;row[data_type]        = sequence.getDataType().getFullNameString();row[numeric_precision] =
                ValuePool.getInt((int) type.getPrecision());row[numeric_precision_radix]    = ValuePool.getInt(radix);row[numeric_scale]              = ValuePool.INTEGER_0;row[maximum_value] = String.valueOf(sequence.getMaxValue());row[minimum_value] = String.valueOf(sequence.getMinValue());row[increment] = String.valueOf(sequence.getIncrement());row[cycle_option]               = sequence.isCycle() ? \"YES\"
                                                                 : \"NO\";row[declared_data_type]         = row[data_type];row[declared_numeric_precision] = row[numeric_precision];row[declared_numeric_scale]     = row[declared_numeric_scale];row[start_with] = String.valueOf(sequence.getStartValue());row[next_value]                 = String.valueOf(sequence.peek());t.insertSys(session, store, row);

sequence = (NumberSequence) it.next();if (!session.getGrantee().isAccessible(sequence)) {
                continue;
            }row = t.getEmptyRowData();NumberType type = (NumberType) sequence.getDataType();int radix =
                (type.typeCode == Types.SQL_NUMERIC || type.typeCode == Types
                    .SQL_DECIMAL) ? 10
                                  : 2;row[sequence_catalog] = database.getCatalogName().name;row[sequence_schema]  = sequence.getSchemaName().name;row[sequence_name]    = sequence.getName().name;row[data_type]        = sequence.getDataType().getFullNameString();row[numeric_precision] =
                ValuePool.getInt((int) type.getPrecision());row[numeric_precision_radix]    = ValuePool.getInt(radix);row[numeric_scale]              = ValuePool.INTEGER_0;row[maximum_value] = String.valueOf(sequence.getMaxValue());row[minimum_value] = String.valueOf(sequence.getMinValue());row[increment] = String.valueOf(sequence.getIncrement());row[cycle_option]               = sequence.isCycle() ? \"YES\"
                                                                 : \"NO\";row[declared_data_type]         = row[data_type];row[declared_numeric_precision] = row[numeric_precision];row[declared_numeric_scale]     = row[declared_numeric_scale];row[start_with] = String.valueOf(sequence.getStartValue());row[next_value]                 = String.valueOf(sequence.peek());t.insertSys(session, store, row);

---------------------------Clone group no  641 for hash 662cd12763f108e9fed38f4d6699ab42--------------------



row                     = t.getEmptyRowData();row[constraint_catalog] = database.getCatalogName().name;row[constraint_schema]  = constraint.getSchemaName().name;row[constraint_name]    = constraint.getName().name;

row                     = t.getEmptyRowData();row[constraint_catalog] = database.getCatalogName().name;row[constraint_schema]  = constraint.getSchemaName().name;row[constraint_name]    = constraint.getName().name;

---------------------------Clone group no  642 for hash 006341ae06496ff44ca3668a14b2e597--------------------



case Types.SQL_REAL :case Types.SQL_FLOAT :case Types.SQL_DOUBLE :return 64;case Types.SQL_NUMERIC :case Types.SQL_DECIMAL :return (int) precision;default :throw Error.runtimeError(ErrorCode.U_S0500, \"NumberType\");

case Types.SQL_REAL :case Types.SQL_FLOAT :case Types.SQL_DOUBLE :return 64;case Types.SQL_NUMERIC :case Types.SQL_DECIMAL :return (int) precision;default :throw Error.runtimeError(ErrorCode.U_S0500, \"NumberType\");

---------------------------Clone group no  643 for hash 9faeda695fa525d18dfa64595db60033--------------------



if (alreadyHandled == e) {
            return;
        }handlePopup(e);alreadyHandled = e;

if (alreadyHandled == e) {
            return;
        }handlePopup(e);alreadyHandled = e;

---------------------------Clone group no  644 for hash c5da5a55c40e506eaf766329743dc4aa--------------------



row.setInMemory(false);objectIterator.remove();cacheBytesLength -= row.getStorageSize();

row.setInMemory(false);objectIterator.remove();cacheBytesLength -= row.getStorageSize();

---------------------------Clone group no  645 for hash 3faba314828123d1f3b7d7b1640ff7ba--------------------



case OpTypes.VALUE :case OpTypes.DYNAMIC_PARAM :case OpTypes.PARAMETER :case OpTypes.VARIABLE :

case OpTypes.VALUE :case OpTypes.DYNAMIC_PARAM :case OpTypes.PARAMETER :case OpTypes.VARIABLE :

case OpTypes.VALUE :case OpTypes.DYNAMIC_PARAM :case OpTypes.PARAMETER :case OpTypes.VARIABLE :

---------------------------Clone group no  646 for hash bbe8ef96b83bc2d98ae2cbbd431ced1b--------------------



pstmt.executeUpdate();pstmt.clearWarnings();if (i % 100 == 0) {
                    Conn.commit();
                }

pstmt.executeUpdate();pstmt.clearWarnings();if (i % 100 == 0) {
                    Conn.commit();
                }

---------------------------Clone group no  647 for hash 77345faac8c8bd7edcdfb8fd29f53394--------------------



readIfThis(Tokens.ROW);readIfThis(Tokens.AS);checkIsSimpleName();

readIfThis(Tokens.ROW);readIfThis(Tokens.AS);checkIsSimpleName();

---------------------------Clone group no  648 for hash 3a2985d4fbf5a305e64ac5baf53b9ca8--------------------



while (rs.next()) {
            rowcount++;
        }msg = sql + \": row count:\";assertEquals(msg, 1, rowcount);

while (rs.next()) {

//            for (int i= 1; i <= colCount; i++) {
//                System.out.print(rs.getString(i) + \", \");
//            }
//
//            System.out.println();
            rowcount++;
        }msg = sql + \": row count:\";assertEquals(msg, 1, rowcount);

---------------------------Clone group no  649 for hash 1803377f18b30163d87128e1612daf5b--------------------



list.add(statement);statements = compileSQLProcedureStatementList(routine, context);for (int i = 0; i < statements.length; i++) {
                list.add(statements[i]);
            }

list.add(statement);statements = compileSQLProcedureStatementList(routine, context);for (int i = 0; i < statements.length; i++) {
                list.add(statements[i]);
            }

---------------------------Clone group no  650 for hash 318c76609e104b24a97ee1138ef74205--------------------



session.transactionTimestamp = session.actionTimestamp;session.isTransaction        = true;liveTransactionTimestamps.addLast(
                    session.transactionTimestamp);transactionCount++;

session.transactionTimestamp = session.actionTimestamp;session.isTransaction        = true;liveTransactionTimestamps.addLast(
                    session.transactionTimestamp);transactionCount++;

session.transactionTimestamp = session.actionTimestamp;session.isTransaction        = true;liveTransactionTimestamps.addLast(
                    session.transactionTimestamp);transactionCount++;

---------------------------Clone group no  651 for hash 85991619c201461b613076d7fa452b6e--------------------



result.lobID       = id;result.blockOffset = offset;result.blockLength = length;return result;

result.lobID       = id;result.blockOffset = offset;result.blockLength = length;return result;

---------------------------Clone group no  652 for hash 81c1d36ae248c59206201e03c8eba8b3--------------------



int M = 16;int i;int j;int v;

int M = 16;int i;int j;int v;

---------------------------Clone group no  653 for hash 95757920fe55b0d2f54eba8c000ae83b--------------------



ps.setTimestamp(1, java.sql.Timestamp.valueOf(\"2008-10-27 0:00:00\"));ps.execute();ps.close();

ps.setTimestamp(1, java.sql.Timestamp.valueOf(\"2008-10-27 0:00:00\"));ps.execute();ps.close();

---------------------------Clone group no  654 for hash 4491afc8c0e573bda657c2bf376f50d0--------------------



Object         params[] = new Object[meta.getColumnCount()];params[ALLOC_BLOCKS.BLOCK_COUNT]  = ValuePool.getInt(count);params[ALLOC_BLOCKS.BLOCK_OFFSET] = ValuePool.getInt(offset);params[ALLOC_BLOCKS.LOB_ID]       = ValuePool.getLong(lobID);

Object         params[] = new Object[meta.getColumnCount()];params[ALLOC_BLOCKS.BLOCK_COUNT]  = ValuePool.getInt(count);params[ALLOC_BLOCKS.BLOCK_OFFSET] = ValuePool.getInt(offset);params[ALLOC_BLOCKS.LOB_ID]       = ValuePool.getLong(lobID);

---------------------------Clone group no  655 for hash 2dc99fb48bf686279cd57d53039e60fe--------------------



ex.setLevel(compileContext.subqueryDepth);if (lastError == null
                                    || lastError.getLevel() < ex.getLevel()) {
                                lastError = ex;
                            }rewind(position);

ex.setLevel(compileContext.subqueryDepth);if (lastError == null
                            || lastError.getLevel() < ex.getLevel()) {
                        lastError = ex;
                    }rewind(position);

ex.setLevel(compileContext.subqueryDepth);if (lastError == null
                        || lastError.getLevel() < ex.getLevel()) {
                    lastError = ex;
                }rewind(position);

ex.setLevel(compileContext.subqueryDepth);if (lastError == null
                                || lastError.getLevel() < ex.getLevel()) {
                            lastError = ex;
                        }rewind(position);

---------------------------Clone group no  656 for hash 6a9a44d9d42757e1088d257fba735836--------------------



case TableBase.INFO_SCHEMA_TABLE :case TableBase.VIEW_TABLE :case TableBase.TEMP_TABLE :

case TableBase.INFO_SCHEMA_TABLE :case TableBase.VIEW_TABLE :case TableBase.TEMP_TABLE :

case TableBase.INFO_SCHEMA_TABLE :case TableBase.VIEW_TABLE :case TableBase.TEMP_TABLE :

case TableBase.INFO_SCHEMA_TABLE :case TableBase.VIEW_TABLE :case TableBase.TEMP_TABLE :

case TableBase.INFO_SCHEMA_TABLE :case TableBase.VIEW_TABLE :case TableBase.TEMP_TABLE :

---------------------------Clone group no  657 for hash 9a7c87ba48fdd30d5020cad382689b5e--------------------



rs = ps.getResultSet();rs.next();assertEquals(\"INFORMATION_SCHEMA\",rs.getString(2));

rs = ps.getResultSet();rs.next();assertEquals(\"INFORMATION_SCHEMA\", rs.getString(2));

---------------------------Clone group no  658 for hash f4a85341f9dc71271432d52cac379f9c--------------------



int shift     = pos & 0x07;int mask      = (source & 0xff) >>> shift;int innermask = 0xff >> shift;int index     = pos / 8;if (count < 8) {
            innermask = innermask >>> (8 - count);
            innermask = innermask << (8 - count);
        }mask      &= innermask;innermask = ~innermask;if (index >= map.length) {
            return;
        }byte b = map[index];

int shift     = pos & 0x07;int mask      = (source & 0xff) >>> shift;int innermask = 0xff >> shift;int index     = pos / 8;if (count < 8) {
            innermask = innermask >>> (8 - count);
            innermask = innermask << (8 - count);
        }mask      &= innermask;innermask = ~innermask;if (index >= map.length) {
            return;
        }byte b = map[index];

---------------------------Clone group no  659 for hash 15a0a4c983593aa48028dccd538b1c75--------------------



if (x == null) {
                return x;
            }if (session == null) {
                return x;
            }Row row = x.getRow(store);if (session.database.txManager.canRead(
                    session, store, row, TransactionManager.ACTION_READ,
                    null)) {
                return x;
            }

if (x == null) {
                return x;
            }if (session == null) {
                return x;
            }Row row = x.getRow(store);if (session.database.txManager.canRead(
                    session, store, row, TransactionManager.ACTION_READ,
                    null)) {
                return x;
            }

---------------------------Clone group no  660 for hash 9eec069d73d72a910bc178fcc4e5a4d3--------------------



sequence = new NumberSequence(null, typeObject);sequence.setAlways(generatedAlways);if (token.tokenType == Tokens.OPENBRACKET) {
                            read();
                            readSequenceOptions(sequence, false, false, true);
                            readThis(Tokens.CLOSEBRACKET);
                        }isIdentity = true;

sequence = new NumberSequence(null, typeObject);sequence.setAlways(generatedAlways);if (token.tokenType == Tokens.OPENBRACKET) {
                read();
                readSequenceOptions(sequence, false, false, true);
                readThis(Tokens.CLOSEBRACKET);
            }isIdentity = true;

---------------------------Clone group no  661 for hash 0fd6ca74ada82704155950e49d8589d5--------------------



case Tokens.TABLE :case Tokens.VALUES :case Tokens.SELECT :rewind(position);

case Tokens.TABLE :case Tokens.VALUES :case Tokens.SELECT :rewind(position);

---------------------------Clone group no  662 for hash 9f9116d83d3b69487eae2b80c8ac9f5d--------------------



if (!set.add(Tokens.SQL)) {
                        throw unexpectedToken();
                    }read();readThis(Tokens.SQL);

if (!set.add(Tokens.SQL)) {
                        throw unexpectedToken();
                    }read();readThis(Tokens.SQL);

if (!set.add(Tokens.SQL)) {
                        throw unexpectedToken();
                    }read();readThis(Tokens.SQL);

---------------------------Clone group no  663 for hash 6141d8713fbe93e3217047205bded281--------------------



ps.setInt(1, 3);ps.setTimestamp(2, aTimestamp);assertEquals(1, ps.executeUpdate());ps.setInt(1, 4);assertEquals(1, ps.executeUpdate());ps.close();netConn.commit();

ps.setInt(1, 3);ps.setTimestamp(2, aTimestamp);assertEquals(1, ps.executeUpdate());ps.setInt(1, 4);assertEquals(1, ps.executeUpdate());ps.close();netConn.commit();

---------------------------Clone group no  664 for hash 4be3f54de9d067db8b0478f8a102c5f9--------------------



stmt.execute(sql);sql   = \"insert into test values(?)\";pstmt = conn.prepareStatement(sql);

stmt.execute(sql);sql   = \"insert into test values(?)\";pstmt = conn.prepareStatement(sql);

---------------------------Clone group no  665 for hash 76bb658d97f3f68308a0b6b06b9ae61f--------------------



int type;if (token.tokenType == Tokens.PLUS) {
                type = OpTypes.ADD;
            } else if (token.tokenType == Tokens.MINUS) {
                type = OpTypes.SUBTRACT;
            } else {
                break;
            }read();Expression a = e;e = XreadDateTimeIntervalTerm();e = new ExpressionArithmetic(type, a, e);

int type;if (token.tokenType == Tokens.PLUS) {
                type = OpTypes.ADD;
            } else if (token.tokenType == Tokens.MINUS) {
                type = OpTypes.SUBTRACT;
            } else {
                break;
            }read();Expression a = e;e = XreadDateTimeIntervalTerm();e = new ExpressionArithmetic(type, a, e);

---------------------------Clone group no  666 for hash 2f87e31d327da43acee825870f652712--------------------



/* Can't user the super constructor, since it does funny things when
         * constructing the SQL Buffer, which we don't need. */
        lines = (String[]) linesArray.toArray();int    closeCmd = lines[0].indexOf(\"*/\");String cmd      = lines[0].substring(0, closeCmd);lines[0] = lines[0].substring(closeCmd + 2).trim();String trimmed = cmd.trim();

/* Can't use the super constructor, since it does funny things when
         * constructing the SQL Buffer, which we don't need. */
        lines = (String[]) linesArray.toArray();int    closeCmd = lines[0].indexOf(\"*/\");String cmd      = lines[0].substring(0, closeCmd);lines[0] = lines[0].substring(closeCmd + 2).trim();String trimmed = cmd.trim();

---------------------------Clone group no  667 for hash e190344840f89c069195862441328e2b--------------------



addColumn(t, \"DATA_TYPE\", SQL_IDENTIFIER);addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);addColumn(t, \"CHARACTER_SET_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);

addColumn(t, \"DATA_TYPE\", SQL_IDENTIFIER);addColumn(t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER);addColumn(t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER);addColumn(t, \"CHARACTER_SET_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);

---------------------------Clone group no  668 for hash 940ceec4e26983acaedfd952dd4edc32--------------------



dataOut.writeLong(currentOffset);dataOut.writeLong(byteArrayOS.size() / 2);dataOut.write(byteArrayOS.getBuffer(), 0, byteArrayOS.size());currentOffset += byteArrayOS.size() / 2;

//
        dataOut.writeLong(currentOffset);dataOut.writeLong(byteArrayOS.size() / 2);dataOut.write(byteArrayOS.getBuffer(), 0, byteArrayOS.size());currentOffset += byteArrayOS.size() / 2;

---------------------------Clone group no  669 for hash 0977d64bb21c212c3d316d600e458bde--------------------



super(type, StatementTypes.X_SQL_CONTROL);references             = new OrderedHashSet();isTransactionStatement = false;

super(type, StatementTypes.X_SQL_CONTROL);references             = new OrderedHashSet();isTransactionStatement = false;

---------------------------Clone group no  670 for hash 9757ef30c8a63d550f78d98c6247c4c6--------------------



StringBuffer sb = new StringBuffer(64);sb.append('\\n');for (int i = 0; i < blanks; i++) {
            sb.append(' ');
        }

StringBuffer sb = new StringBuffer(64);sb.append('\\n');for (int i = 0; i < blanks; i++) {
            sb.append(' ');
        }

StringBuffer sb = new StringBuffer(64);sb.append('\\n');for (int i = 0; i < blanks; i++) {
            sb.append(' ');
        }

StringBuffer sb = new StringBuffer(64);sb.append('\\n');for (int i = 0; i < blanks; i++) {
            sb.append(' ');
        }

StringBuffer sb = new StringBuffer(64);sb.append('\\n');for (int i = 0; i < blanks; i++) {
            sb.append(' ');
        }

StringBuffer sb = new StringBuffer(64);sb.append('\\n');for (int i = 0; i < blanks; i++) {
            sb.append(' ');
        }

StringBuffer sb = new StringBuffer(64);sb.append('\\n');for (int i = 0; i < blanks; i++) {
            sb.append(' ');
        }

StringBuffer sb = new StringBuffer(64);sb.append('\\n');for (int i = 0; i < blanks; i++) {
            sb.append(' ');
        }

StringBuffer sb = new StringBuffer(64);sb.append('\\n');for (int i = 0; i < blanks; i++) {
            sb.append(' ');
        }

---------------------------Clone group no  671 for hash 0a91ee7ef3863448dc27a83c74a678f4--------------------



database.logger.logWarningEvent(JVM_ERROR, t);IOException io = JavaSystem.toIOException(t);throw io;

database.logger.logWarningEvent(JVM_ERROR, t);IOException io = JavaSystem.toIOException(t);throw io;

database.logger.logWarningEvent(JVM_ERROR, t);IOException io = JavaSystem.toIOException(t);throw io;

database.logger.logWarningEvent(JVM_ERROR, t);IOException io = JavaSystem.toIOException(t);throw io;

database.logger.logWarningEvent(JVM_ERROR, t);IOException io = JavaSystem.toIOException(t);throw io;

database.logger.logWarningEvent(JVM_ERROR, t);IOException io = JavaSystem.toIOException(t);throw io;

database.logger.logWarningEvent(JVM_ERROR, t);IOException io = JavaSystem.toIOException(t);throw io;

---------------------------Clone group no  672 for hash e664a585ef78e8cd513bb52e75298c62--------------------



TestUtil.deleteDatabase(\"/hsql/tests/testdatetimesimple\");Connection conn = DriverManager.getConnection(connectionURL, \"SA\", \"\");ResultSet         rs;PreparedStatement ps;

TestUtil.deleteDatabase(\"/hsql/tests/testdatetimesimple\");Connection conn = DriverManager.getConnection(connectionURL, \"SA\", \"\");ResultSet          rs;PreparedStatement  ps;

---------------------------Clone group no  673 for hash 10b3f07472f55542d160efa004ca6023--------------------



updateAccessCounts();resetAccessCount();updateObjectAccessCounts();

updateAccessCounts();resetAccessCount();updateObjectAccessCounts();

---------------------------Clone group no  674 for hash 4fea7238c7477ab8bd4898be1bd9d6f4--------------------



ResultLob result = new ResultLob();result.subType     = LobResultTypes.REQUEST_GET_CHAR_PATTERN_POSITION;result.lobID       = id;result.blockOffset = offset;

ResultLob result = new ResultLob();result.subType     = LobResultTypes.REQUEST_GET_CHAR_PATTERN_POSITION;result.lobID       = id;result.blockOffset = offset;

---------------------------Clone group no  675 for hash f2ee979528973ae4219e1ce7a89fb1f0--------------------



pstmt         = conn.prepareStatement(sql);pstmt.setInt(1, 0);pstmt.setInt(2, 9);rs = pstmt.executeQuery();rs.next();actualCount = rs.getInt(1);assertEquals(\"\\\"\" + sql + \"\\\"\", expectedCount, actualCount);

pstmt         = conn.prepareStatement(sql);pstmt.setInt(1, 0);pstmt.setInt(2, 9);rs = pstmt.executeQuery();rs.next();actualCount = rs.getInt(1);assertEquals(\"\\\"\" + sql + \"\\\"\", expectedCount, actualCount);

---------------------------Clone group no  676 for hash ef0e4dd387c71696e11b8d3c00e335cc--------------------



//
        // intermediate holders
        int            columnCount;Iterator       tables;Table          table;Object[]       row;

// intermediate holders
        int      columnCount;Iterator tables;Table    table;Object[] row;

// intermediate holders
        int      columnCount;Iterator tables;Table    table;Object[] row;

//
        // intermediate holders
        int            columnCount;Iterator       tables;Table          table;Object[]       row;

//
        // intermediate holders
        int            columnCount;Iterator       tables;Table          table;Object[]       row;

// intermediate holders
        int         columnCount;Iterator    tables;Table       table;Object[]    row;

---------------------------Clone group no  677 for hash 9bc26763f65755065d55f8eaf70c0730--------------------



case Tokens.ROUTINE :case Tokens.PROCEDURE :case Tokens.FUNCTION :read();break;default :throw unexpectedToken();

case Tokens.ROUTINE :case Tokens.PROCEDURE :case Tokens.FUNCTION :read();break;default :throw unexpectedToken();

---------------------------Clone group no  678 for hash 4fad65d48ab7379bbdfc10a4adc56873--------------------



Constraint c =
                    new Constraint(constName, set,
                                   SchemaObject.ConstraintTypes.UNIQUE);constraintList.add(c);break;

Constraint c =
                        new Constraint(constName, set,
                                       SchemaObject.ConstraintTypes.UNIQUE);constraintList.add(c);break;

---------------------------Clone group no  679 for hash 68f6c3d9b1ae4a5f98c5b31770cb0913--------------------



sb.append(Tokens.T_GRANT).append(' ');sb.append(Tokens.T_USAGE);sb.append(' ').append(Tokens.T_ON).append(' ');

sb.append(Tokens.T_GRANT).append(' ');sb.append(Tokens.T_USAGE);sb.append(' ').append(Tokens.T_ON).append(' ');

sb.append(Tokens.T_GRANT).append(' ');sb.append(Tokens.T_USAGE);sb.append(' ').append(Tokens.T_ON).append(' ');

---------------------------Clone group no  680 for hash e3335bdbf1a5e4c814fa983e9653e662--------------------



name.schema = session.getSchemaHsqlName(name.schema.name);if (name.schema == null) {
                throw Error.error(ErrorCode.X_42505);
            }if (isSchemaDefinition && schemaName != name.schema) {
                throw Error.error(ErrorCode.X_42505);
            }

name.schema = session.getSchemaHsqlName(name.schema.name);if (name.schema == null) {
                throw Error.error(ErrorCode.X_42505);
            }if (isSchemaDefinition && schemaName != name.schema) {
                throw Error.error(ErrorCode.X_42505);
            }

---------------------------Clone group no  681 for hash d5c04d1cd12755badc0f283fba149380--------------------



lastrow   = index.lastRow(session, store, 0).getNextRow();lastdata  = lastrow.getData();Boolean comparefirst = compareValues(session, data, firstdata);Boolean comparelast  = compareValues(session, data, lastdata);

lastrow  = index.lastRow(session, store, 0).getNextRow();lastdata = lastrow.getData();Boolean comparefirst = compareValues(session, data, firstdata);Boolean comparelast  = compareValues(session, data, lastdata);

---------------------------Clone group no  682 for hash 92843ca8726d8786fe4395528c96abe6--------------------



s += INT_STORE_SIZE;s += ((BinaryData) o).length(null);break;

s += INT_STORE_SIZE;s += ((BinaryData) o).length(null);break;

---------------------------Clone group no  683 for hash 0a2152d31953165f9ec3a582988b8918--------------------



break;default :throw Error.error(ErrorCode.X_42562);

break;default :throw Error.error(ErrorCode.X_42562);

---------------------------Clone group no  684 for hash 1a7ccdbe60447062b98b0ece40ff688f--------------------



readNow = (readBlocks > archive.getReadBufferBlocks())
                          ? archive.getReadBufferBlocks()
                          : readBlocks;archive.readBlocks(readNow);readBlocks -= readNow;

readNow = (readBlocks > archive.getReadBufferBlocks())
                          ? archive.getReadBufferBlocks()
                          : readBlocks;archive.readBlocks(readNow);readBlocks -= readNow;

---------------------------Clone group no  685 for hash 081acf137908e64766f5797392ca360a--------------------



case SchemaObject.ReferentialAction.CASCADE :case SchemaObject.ReferentialAction.SET_DEFAULT :case SchemaObject.ReferentialAction.SET_NULL :return true;

case SchemaObject.ReferentialAction.CASCADE :case SchemaObject.ReferentialAction.SET_DEFAULT :case SchemaObject.ReferentialAction.SET_NULL :return true;

---------------------------Clone group no  686 for hash e573e2511a8d2302efd569dcfecc698a--------------------



Connection        conn = newConnection();Statement         stmt = conn.createStatement();PreparedStatement pstmt;ResultSet         rs;

Connection        conn = newConnection();Statement         stmt = conn.createStatement();PreparedStatement pstmt;ResultSet         rs;

---------------------------Clone group no  687 for hash 2b51eda7cedf830fd9eefc67c6904345--------------------



case ResultConstants.BATCHEXECRESPONSE :case ResultConstants.BATCHEXECUTE :case ResultConstants.BATCHEXECDIRECT :case ResultConstants.SETSESSIONATTR :

case ResultConstants.BATCHEXECRESPONSE :case ResultConstants.BATCHEXECUTE :case ResultConstants.BATCHEXECDIRECT :case ResultConstants.SETSESSIONATTR :

---------------------------Clone group no  688 for hash b211d84e19a6c2f19f0de8611255c769--------------------



case ResultConstants.DATAHEAD :case ResultConstants.DATA :case ResultConstants.GENERATED :

case ResultConstants.DATAHEAD :case ResultConstants.DATA :case ResultConstants.GENERATED :

---------------------------Clone group no  689 for hash 74a191541386da119a3add58ed788188--------------------



reset(s);resetState();byteOutputStream.reset(byteBuffer);

reset(s);resetState();byteOutputStream.reset(byteBuffer);

---------------------------Clone group no  690 for hash f7418e2012f6ef79cfaadab19b964bad--------------------



super.setBounds(x, y, w, h);iSbHeight = sbHoriz.getPreferredSize().height;iSbWidth  = sbVert.getPreferredSize().width;iHeight   = h - iSbHeight;iWidth    = w - iSbWidth;sbHoriz.setBounds(0, iHeight, iWidth, iSbHeight);sbVert.setBounds(iWidth, 0, iSbWidth, iHeight);adjustScroll();iImage = null;repaint();

// fredt@users 20011210 - patch 450412 by elise@users
        super.setBounds(x, y, w, h);iSbHeight = sbHoriz.getPreferredSize().height;iSbWidth  = sbVert.getPreferredSize().width;iHeight   = h - iSbHeight;iWidth    = w - iSbWidth;sbHoriz.setBounds(0, iHeight, iWidth, iSbHeight);sbVert.setBounds(iWidth, 0, iSbWidth, iHeight);adjustScroll();iImage = null;repaint();

---------------------------Clone group no  691 for hash d984a499f981069f854eca779141e741--------------------



addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);         // not nulladdColumn(t, \"DATA_TYPE\", Type.SQL_SMALLINT);        // not nulladdColumn(t, \"TYPE_NAME\", SQL_IDENTIFIER);           // not nulladdColumn(t, \"COLUMN_SIZE\", Type.SQL_INTEGER);addColumn(t, \"BUFFER_LENGTH\", Type.SQL_INTEGER);

addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);            // not nulladdColumn(t, \"DATA_TYPE\", Type.SQL_SMALLINT);           // not nulladdColumn(t, \"TYPE_NAME\", SQL_IDENTIFIER);              // not nulladdColumn(t, \"COLUMN_SIZE\", Type.SQL_INTEGER);          // 6addColumn(t, \"BUFFER_LENGTH\", Type.SQL_INTEGER);        // 7

---------------------------Clone group no  692 for hash 67f73da4f3e487c7f651a13542ee0e63--------------------



break;default :throw Error.runtimeError(ErrorCode.U_S0500, \"FunctionCustom\");

break;default :throw Error.runtimeError(ErrorCode.U_S0500, \"FunctionCustom\");

---------------------------Clone group no  693 for hash 13bebca8c4794a9edea6d02106f81e63--------------------



mainCount++;break;case SchemaObject.ConstraintTypes.CHECK :if (constraintList[i].isNotNull()) {
                        break;
                    }

mainCount++;break;case SchemaObject.ConstraintTypes.CHECK :if (constraintList[i].isNotNull()) {
                        break;
                    }

---------------------------Clone group no  694 for hash fa36a418d8aa88636fe7e4416985ddea--------------------



sb.setLength(0);sb.append(\"SET DATABASE \").append(Tokens.T_SQL).append(' ');sb.append(Tokens.T_NULLS).append(' ');

sb.setLength(0);sb.append(\"SET DATABASE \").append(Tokens.T_SQL).append(' ');sb.append(Tokens.T_NULLS).append(' ');

---------------------------Clone group no  695 for hash 3da394b1457c64f89eeab7e93b125fb9--------------------



break;case ResultConstants.ERROR :throw new RecoverableOdbcFailure(rOut);default :

break;case ResultConstants.ERROR :throw new RecoverableOdbcFailure(rOut);default :

break;case ResultConstants.ERROR :throw new RecoverableOdbcFailure(rOut);default :

---------------------------Clone group no  696 for hash 7c2c6ceda6f40752296f1ea1ecd04ac4--------------------



hasChanged = true;if (count != i) {
            moveRows(i, i + 1, count - i);
        }keys[i]   = key;values[i] = value;count++;

hasChanged = true;if (count != i) {
            moveRows(i, i + 1, count - i);
        }keys[i]   = key;values[i] = value;count++;

---------------------------Clone group no  697 for hash 76ee5e95fa0689dc2609319fa24739c8--------------------



parameterValues[i] = null;parameterSet[i]    = Boolean.TRUE;return;

parameterValues[i] = null;parameterSet[i]    = Boolean.TRUE;return;

parameterValues[i] = null;parameterSet[i]    = Boolean.TRUE;return;

parameterValues[i] = null;parameterSet[i]    = Boolean.TRUE;return;

---------------------------Clone group no  698 for hash 746561dbeccfaf50b14ba70cac47eba6--------------------



if (x == null) {
            return null;
        }RowAVL row = x.getRow(store);x = row.getNode(position);

if (x == null) {
            return null;
        }RowAVL row = x.getRow(store);x = row.getNode(position);

---------------------------Clone group no  699 for hash c019e6dda3173efd6f8b6954fc20a175--------------------



// column number mappings
        final int trigger_catalog = 0;final int trigger_schema  = 1;final int trigger_name    = 2;

// column number mappings
        final int trigger_catalog  = 0;final int trigger_schema   = 1;final int trigger_name     = 2;

// column number mappings
        final int trigger_catalog  = 0;final int trigger_schema   = 1;final int trigger_name     = 2;

// column number mappings
        final int trigger_catalog = 0;final int trigger_schema  = 1;final int trigger_name    = 2;

// column number mappings
        final int trigger_catalog            = 0;final int trigger_schema             = 1;final int trigger_name               = 2;

// column number mappings
        final int trigger_catalog      = 0;final int trigger_schema       = 1;final int trigger_name         = 2;

---------------------------Clone group no  700 for hash 170050163beafec91cf0249600d69fc6--------------------



case EMPTYSTRING_BEHAVIOR:varValue = \"\";break;case NOOP_BEHAVIOR:break;default:throw new RuntimeException(
                            \"Undefined value for behavior: \" + behavior);

case EMPTYSTRING_BEHAVIOR:varValue = \"\";break;case NOOP_BEHAVIOR:break;default:throw new RuntimeException(
                            \"Undefined value for behavior: \" + behavior);

---------------------------Clone group no  701 for hash 81379084b64f5b4b7e23515bc18104fe--------------------



isUpdatable  = false;isInsertable = false;return;

isUpdatable  = false;isInsertable = false;return;

---------------------------Clone group no  702 for hash ce7ab766365e4431cfed9eeff90e8e30--------------------



row[constraint_name]    = constraint.getName().name;try {
                    row[check_clause] = constraint.getCheckSQL();
                } catch (Exception e) {}t.insertSys(session, store, row);

row[constraint_name]    = constraint.getName().name;try {
                    row[check_clause] = constraint.getCheckSQL();
                } catch (Exception e) {}t.insertSys(session, store, row);

---------------------------Clone group no  703 for hash 819e908e7aa0d646f8074a8b9933449f--------------------



group = StatementTypes.X_SQL_SCHEMA_MANIPULATION;order = 10;break;

group = StatementTypes.X_SQL_SCHEMA_MANIPULATION;order = 10;break;

---------------------------Clone group no  704 for hash 79bd6e2f127fc6237b22ba9f6d4ca544--------------------



boolean minus = false;if (token.tokenType == Tokens.MINUS) {
            minus = true;

            read();
        }checkIsValue();

boolean minus = false;if (token.tokenType == Tokens.MINUS) {
            minus = true;

            read();
        }checkIsValue();

---------------------------Clone group no  705 for hash 555e19728661d47f010c23404eaac9f6--------------------



checkColumn(columnIndex);Type   sourceType = resultMetaData.columnTypes[columnIndex - 1];Object o          = getColumnInType(columnIndex, sourceType);if (o == null) {
            return null;
        }

checkColumn(columnIndex);Type   sourceType = resultMetaData.columnTypes[columnIndex - 1];Object o          = getColumnInType(columnIndex, sourceType);if (o == null) {
            return null;
        }

checkColumn(columnIndex);Type   sourceType = resultMetaData.columnTypes[columnIndex - 1];Object o          = getColumnInType(columnIndex, sourceType);if (o == null) {
            return null;
        }

checkColumn(columnIndex);Type   sourceType = resultMetaData.columnTypes[columnIndex - 1];Object o          = getColumnInType(columnIndex, sourceType);if (o == null) {
            return null;
        }

checkColumn(columnIndex);Type   sourceType = resultMetaData.columnTypes[columnIndex - 1];Object o          = getColumnInType(columnIndex, sourceType);if (o == null) {
                return null;
            }

checkColumn(columnIndex);Type   sourceType = resultMetaData.columnTypes[columnIndex - 1];Object o          = getColumnInType(columnIndex, sourceType);if (o == null) {
                return null;
            }

---------------------------Clone group no  706 for hash 663609e0ebdd9aa817179056131d3c90--------------------



ps.setInt(1, 3);ps.setBytes(2, expectedBytes);assertEquals(1, ps.executeUpdate());ps.setInt(1, 4);assertEquals(1, ps.executeUpdate());ps.close();netConn.commit();

ps.setInt(1, 3);ps.setBytes(2, expectedBytes);assertEquals(1, ps.executeUpdate());ps.setInt(1, 4);assertEquals(1, ps.executeUpdate());ps.close();netConn.commit();

---------------------------Clone group no  707 for hash 1ce6508bbd3556c178d2d970e1acbcd0--------------------



fkCount++;break;case SchemaObject.ConstraintTypes.MAIN :

fkCount++;break;case SchemaObject.ConstraintTypes.MAIN :

---------------------------Clone group no  708 for hash 26b7e2e7389c05eeccae6e1195164f12--------------------



break;case LobResultTypes.RESPONSE_GET_BYTE_PATTERN_POSITION :case LobResultTypes.RESPONSE_GET_CHAR_PATTERN_POSITION :

break;case LobResultTypes.RESPONSE_GET_BYTE_PATTERN_POSITION :case LobResultTypes.RESPONSE_GET_CHAR_PATTERN_POSITION :

---------------------------Clone group no  709 for hash 25185ca2679fd85a0f0b8dc4bd12b754--------------------



Object[] currentData = getNext();boolean newGroup =
                compareData == null
                || fullIndex.compareRowNonUnique(
                    session, currentData, compareData,
                    fullIndex.getColumnCount()) != 0;if (newGroup) {
                compareData = currentData;
                it          = other.findFirstRow(currentData);
            }otherRow  = it.getNextRow();otherData = otherRow == null ? null
                                         : otherRow.getData();

Object[] currentData = getNext();boolean newGroup =
                compareData == null
                || fullIndex.compareRowNonUnique(
                    session, currentData, compareData,
                    fullIndex.getColumnCount()) != 0;if (newGroup) {
                compareData = currentData;
                it          = other.findFirstRow(currentData);
            }otherRow  = it.getNextRow();otherData = otherRow == null ? null
                                         : otherRow.getData();

---------------------------Clone group no  710 for hash beb0749d6dff3d2d3fce079cc0a3c42e--------------------



case FUNC_EXTRACT :case FUNC_TRIM_CHAR :case FUNC_OVERLAY_CHAR :

case FUNC_EXTRACT :case FUNC_TRIM_CHAR :case FUNC_OVERLAY_CHAR :

case FUNC_EXTRACT :case FUNC_TRIM_CHAR :case FUNC_OVERLAY_CHAR :

---------------------------Clone group no  711 for hash 43f90e50112c0ecbef9d055041e392ea--------------------



sb.append(' ');sb.append(Tokens.T_TO);sb.append(' ');sb.append(Tokens.SQL_INTERVAL_FIELD_NAMES[endPartIndex]);

sb.append(' ');sb.append(Tokens.T_TO);sb.append(' ');sb.append(Tokens.SQL_INTERVAL_FIELD_NAMES[endPartIndex]);

---------------------------Clone group no  712 for hash dcb531981d75c383b3cdec72023f6a31--------------------



newType = other;break;default :

newType = other;break;default :

---------------------------Clone group no  713 for hash e5435cff9a2081553a8d29a9efdbd1a4--------------------



break;default :end = true;break;

break;default :end = true;break;

---------------------------Clone group no  714 for hash a2e632d2f5e37b9382bcbb62d409d601--------------------



case FUNC_BITAND :case FUNC_BITANDNOT :case FUNC_BITOR :

case FUNC_BITAND :case FUNC_BITANDNOT :case FUNC_BITOR :

---------------------------Clone group no  715 for hash 20ab350a2fc6468160f01c936ade9d70--------------------



case FUNC_COS :case FUNC_COT :case FUNC_DEGREES :

case FUNC_COS :case FUNC_COT :case FUNC_DEGREES :

---------------------------Clone group no  716 for hash 0a0c0a82879ed71b9082eb539e81b6f7--------------------



break;default :throw Error.runtimeError(ErrorCode.U_S0500, \"DateTimeType\");

break;default :throw Error.runtimeError(ErrorCode.U_S0500,
                                             \"DateTimeType\");

---------------------------Clone group no  717 for hash 8d46153a015a11f6c091ba07052e49c2--------------------



if (data[0] == null || data[1] == null) {
                    return null;
                }Object value;value = Type.SQL_BIGINT.convertToType(session, data[1],
                                                      nodes[1].dataType);long offset = ((Number) value).longValue() - 1;long length = 0;

if (data[0] == null || data[1] == null) {
                    return null;
                }Object value;value = Type.SQL_BIGINT.convertToType(session, data[1],
                                                      nodes[1].dataType);long offset = ((Number) value).longValue() - 1;long length = 0;

---------------------------Clone group no  718 for hash 957df4b06cbc8038552e714b630746ad--------------------



System.out.println(\"Start: \" + start.toString());System.out.print(\"Initializing dataset...\");createDatabase(url, user, password);double seconds = (System.currentTimeMillis() - start.getTime())
                                 / 1000D;System.out.println(\"done. in \" + seconds + \" seconds\\n\");System.out.println(\"Complete: \"
                                   + (new java.util.Date()).toString());

System.out.println(\"Start: \" + start.toString());System.out.print(\"Initializing dataset...\");createDatabase(url, user, password);double seconds = (System.currentTimeMillis() - start.getTime())
                                 / 1000D;System.out.println(\"done. in \" + seconds + \" seconds\\n\");System.out.println(\"Complete: \"
                                   + (new java.util.Date()).toString());

---------------------------Clone group no  719 for hash aa82e5691360ca86163c6880896f64c4--------------------



int       accountsnb = 0;Statement Stmt       = Conn.createStatement();String    Query;

int       accountsnb = 0;Statement Stmt       = Conn.createStatement();String    Query;

---------------------------Clone group no  720 for hash 84f2b231cc4ee61305b842d44acc0356--------------------



scanNext(errorCode);if (token.dataType == null
                        || token.dataType.typeCode != Types.SQL_INTEGER) {
                    throw Error.error(errorCode);
                }scale = ((Number) token.tokenValue).intValue();scanNext(errorCode);

scanNext(errorCode);if (token.dataType == null
                    || token.dataType.typeCode != Types.SQL_INTEGER) {
                throw Error.error(errorCode);
            }scale = ((Number) token.tokenValue).intValue();scanNext(errorCode);

---------------------------Clone group no  721 for hash ed67ec342f9f7f09730243870453cb98--------------------



endTransactionTPL(session);//
            session.isTransaction = false;countDownLatches(session);

endTransactionTPL(session);session.isTransaction = false;countDownLatches(session);

---------------------------Clone group no  722 for hash 8d9f5fc5bc198677cb1d127b01375a57--------------------



if (accessCount > ACCESS_MAX) {
                    resetAccessCount();
                }accessTable[lookup] = accessCount++;return testValue;

if (accessCount > ACCESS_MAX) {
            resetAccessCount();
        }accessTable[lookup] = accessCount++;return testValue;

---------------------------Clone group no  723 for hash 9e42dbddc846d0ee5d1a44dfde9e072f--------------------



sStatement  = null;cConnection = null;Class.forName(\"org.hsqldb.jdbc.JDBCDriver\");

sStatement  = null;cConnection = null;Class.forName(\"org.hsqldb.jdbc.JDBCDriver\");

---------------------------Clone group no  724 for hash b143e2e4e13860d97305e812a1450ee4--------------------



case OpTypes.IN :case OpTypes.MATCH_SIMPLE :case OpTypes.MATCH_PARTIAL :case OpTypes.MATCH_FULL :case OpTypes.MATCH_UNIQUE_SIMPLE :case OpTypes.MATCH_UNIQUE_PARTIAL :case OpTypes.MATCH_UNIQUE_FULL :

case OpTypes.IN :case OpTypes.MATCH_SIMPLE :case OpTypes.MATCH_PARTIAL :case OpTypes.MATCH_FULL :case OpTypes.MATCH_UNIQUE_SIMPLE :case OpTypes.MATCH_UNIQUE_PARTIAL :case OpTypes.MATCH_UNIQUE_FULL :

---------------------------Clone group no  725 for hash 9722fe5667b87e4cbc4c2cb1f77ada82--------------------



list.add(sb.toString());sb.setLength(0);sb.append(\"SET FILES \").append(Tokens.T_LOG).append(' ');

list.add(sb.toString());sb.setLength(0);sb.append(\"SET FILES \").append(Tokens.T_LOG).append(' ');

---------------------------Clone group no  726 for hash c571ecbe1a7746b1bf8c8d876345ebf7--------------------



positionBufferMove((int) transferLength);length -= transferLength;offset += transferLength;if (length == 0) {
                    break;
                }

positionBufferMove((int) transferLength);length -= transferLength;offset += transferLength;if (length == 0) {
                    break;
                }

---------------------------Clone group no  727 for hash 08a40dcd8421d4a0d31698950b81247e--------------------



Table    rangeTable = rangeVariables[i].rangeTable;HsqlName name       = rangeTable.getName();if (rangeTable.isDataReadOnly() || rangeTable.isTemp()) {
                continue;
            }if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) {
                continue;
            }set.add(name);

Table    rangeTable = rangeVariables[i].rangeTable;HsqlName name       = rangeTable.getName();if (rangeTable.isDataReadOnly() || rangeTable.isTemp()) {
                continue;
            }if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) {
                continue;
            }set.add(name);

---------------------------Clone group no  728 for hash ac69d76a8898901a264d2fc56022d7ae--------------------



hashIndex.unlinkNode(index, lastLookup, lookup);if (accessTable != null) {
                    accessTable[lookup] = 0;
                }if (minimizeOnEmpty && hashIndex.elementCount == 0) {
                    rehash(initialCapacity);
                }

hashIndex.unlinkNode(index, lastLookup, lookup);if (accessTable != null) {
                    accessTable[lookup] = 0;
                }if (minimizeOnEmpty && hashIndex.elementCount == 0) {
                    rehash(initialCapacity);
                }

---------------------------Clone group no  729 for hash 8829257c0cbbe8af9de4fe1297527456--------------------



if (data[0] == null || data[1] == null) {
                    return null;
                }Object st = Type.SQL_VARCHAR.trim(session, data[1], ' ', true,
                                                  true);st = Type.SQL_VARCHAR.upper(session, st);st = Type.SQL_VARCHAR.convertToDefaultType(session, st);int token    = Tokens.get((String) st);int typeCode = IntervalType.getFieldNameTypeForToken(token);

if (data[0] == null || data[1] == null) {
                    return null;
                }Object st = Type.SQL_VARCHAR.trim(session, data[1], ' ', true,
                                                  true);st = Type.SQL_VARCHAR.upper(session, st);st = Type.SQL_VARCHAR.convertToDefaultType(session, st);int token    = Tokens.get((String) st);int typeCode = IntervalType.getFieldNameTypeForToken(token);

---------------------------Clone group no  730 for hash b12988db301b23a04cfa634496768cc7--------------------



resolveTypesPartOne(session);resolveTypesPartTwo(session);resolveTypesPartThree(session);

resolveTypesPartOne(session);resolveTypesPartTwo(session);resolveTypesPartThree(session);

---------------------------Clone group no  731 for hash 0b411dded68531ca803fdc7533f9c80f--------------------



row[table_catalog]    = database.getCatalogName().name;row[table_schema]     = refName.parent.schema.name;row[table_name]       = refName.parent.name;row[column_name]      = refName.name;try {
                    t.insertSys(session, store, row);
                } catch (HsqlException e) {}

row[table_catalog]   = database.getCatalogName().name;row[table_schema]    = refName.parent.schema.name;row[table_name]      = refName.parent.name;row[column_name]     = refName.name;try {
                    t.insertSys(session, store, row);
                } catch (HsqlException e) {}

---------------------------Clone group no  732 for hash 975d151eff58d8386c3df82d6f0ff056--------------------



OrderedHashSet subQueries = null;if (expression != null) {
            subQueries = expression.collectAllSubqueries(subQueries);
        }if (subQueries == null || subQueries.size() == 0) {
            return TableDerived.emptyArray;
        }TableDerived[] subQueryArray = new TableDerived[subQueries.size()];subQueries.toArray(subQueryArray);for (int i = 0; i < subqueries.length; i++) {
            subQueryArray[i].prepareTable();
        }return subQueryArray;

OrderedHashSet subQueries = null;if (expression != null) {
            subQueries = expression.collectAllSubqueries(subQueries);
        }if (subQueries == null || subQueries.size() == 0) {
            return TableDerived.emptyArray;
        }TableDerived[] subQueryArray = new TableDerived[subQueries.size()];subQueries.toArray(subQueryArray);for (int i = 0; i < subqueries.length; i++) {
            subQueryArray[i].prepareTable();
        }return subQueryArray;

---------------------------Clone group no  733 for hash 5e1e7fcd08e7d179ca2b84aabc7a76be--------------------



nodes        = new Expression[TERNARY];nodes[LEFT]  = left;nodes[RIGHT] = right;

nodes               = new Expression[TERNARY];nodes[LEFT]         = left;nodes[RIGHT]        = right;

---------------------------Clone group no  734 for hash bba3875f3fbc72c32c9d6c15d24cb91c--------------------



sb.append(' ').append(Tokens.T_INCREMENT).append(' ');sb.append(Tokens.T_BY).append(' ');sb.append(getIncrement());

sb.append(' ').append(Tokens.T_INCREMENT).append(' ');sb.append(Tokens.T_BY).append(' ');sb.append(getIncrement());

---------------------------Clone group no  735 for hash 4d008283ae93c6b3680af1cd994b68db--------------------



// table ID  [relid]:
                            outPacket.writeInt(OdbcUtil.getTableOidForColumn(i,
                                    md));// column id  [attid]
                            outPacket.writeShort(OdbcUtil.getIdForColumn(i,
                                    md));outPacket.writeInt(pgTypes[i].getOid());// Datatype size  [adtsize]
                            outPacket.writeShort(pgTypes[i].getTypeWidth());outPacket.writeInt(pgTypes[i].getLPConstraint());// Var size [atttypmod]
                            // This is the size constraint integer
                            // like VARCHAR(12) or DECIMAL(4).
                            // -1 if none specified for this column.
                            outPacket.writeShort(0);

// table ID  [relid]:
                        outPacket.writeInt(OdbcUtil.getTableOidForColumn(i,
                                md));// column id  [attid]
                        outPacket.writeShort(OdbcUtil.getIdForColumn(i, md));outPacket.writeInt(pgTypes[i].getOid());// Datatype size  [adtsize]
                        outPacket.writeShort(pgTypes[i].getTypeWidth());outPacket.writeInt(pgTypes[i].getLPConstraint());// Var size [atttypmod]
                        // This is the size constraint integer
                        // like VARCHAR(12) or DECIMAL(4).
                        // -1 if none specified for this column.
                        outPacket.writeShort(0);

---------------------------Clone group no  736 for hash b0dfc05a6c94ca2936aa29982f851500--------------------



break;case OpTypes.MATCH_SIMPLE :case OpTypes.MATCH_PARTIAL :case OpTypes.MATCH_FULL :case OpTypes.MATCH_UNIQUE_SIMPLE :case OpTypes.MATCH_UNIQUE_PARTIAL :case OpTypes.MATCH_UNIQUE_FULL :

break;case OpTypes.MATCH_SIMPLE :case OpTypes.MATCH_PARTIAL :case OpTypes.MATCH_FULL :case OpTypes.MATCH_UNIQUE_SIMPLE :case OpTypes.MATCH_UNIQUE_PARTIAL :case OpTypes.MATCH_UNIQUE_FULL :

---------------------------Clone group no  737 for hash eaa6058c377bd37ca3c14585233ed9ad--------------------



OutputStreamWriter osr = isEncoding(encoding)
                    ? new OutputStreamWriter(os, encoding)
                    : new OutputStreamWriter(os);close  = true;writer = new BufferedWriter(osr);

OutputStreamWriter osr = isEncoding(encoding)
                    ? new OutputStreamWriter(os, encoding)
                    : new OutputStreamWriter(os);close  = true;writer = new BufferedWriter(osr);

---------------------------Clone group no  738 for hash 54abaaab6c7cc5091ae80890e86d7179--------------------



DataInputStream dis = new DataInputStream(new ByteArrayInputStream(ba));String s = dis.readUTF();//String s = DataInputStream.readUTF(dis);
        // TODO:  Test the previous two to see if one works better for
        // high-order characters.
        dis.close();return s;

DataInputStream dis = new DataInputStream(new ByteArrayInputStream(ba));String s = dis.readUTF();//String s = DataInputStream.readUTF(dis);
        // TODO:  Test the previous two to see if one works better for
        // high-order characters.
        dis.close();return s;

---------------------------Clone group no  739 for hash 47098791aaba8b55ce11f20af88b64e4--------------------



Timestamp ts = new Timestamp(millis);ts.setNanos(t.getNanos());return ts;

Timestamp ts = new Timestamp(millis);ts.setNanos(t.getNanos());return ts;

---------------------------Clone group no  740 for hash f48e9f58060c6fb41f028a05fa3b3ad6--------------------



case Types.SQL_ALL_TYPES :break;case Types.SQL_CHAR :case Types.SQL_VARCHAR :

case Types.SQL_ALL_TYPES :break;case Types.SQL_CHAR :case Types.SQL_VARCHAR :

case Types.SQL_ALL_TYPES :break;case Types.SQL_CHAR :case Types.SQL_VARCHAR :

---------------------------Clone group no  741 for hash 6be95ddcded9d2e107fee8db30336e2f--------------------



int[]    changedColumns = navigator.getCurrentChangedColumns();Table    currentTable   = ((Table) row.getTable());if (currentTable instanceof TableDerived) {
                currentTable = ((TableDerived) currentTable).view;
            }

int[]    changedColumns = navigator.getCurrentChangedColumns();Table    currentTable   = ((Table) row.getTable());if (currentTable instanceof TableDerived) {
                currentTable = ((TableDerived) currentTable).view;
            }

---------------------------Clone group no  742 for hash ce0ce9decb805ea66b6d7ee84496280a--------------------



if (existing == null) {
                existing = add.duplicate();

                fullRightsMap.put(key, existing);
            } else {
                existing.add(add);
            }if (add.grantableRights == null) {
                continue;
            }if (existing.grantableRights == null) {
                existing.grantableRights = add.grantableRights.duplicate();
            } else {
                existing.grantableRights.add(add.grantableRights);
            }

if (existing == null) {
                    existing = add.duplicate();

                    fullRightsMap.put(key, existing);
                } else {
                    existing.add(add);
                }if (add.grantableRights == null) {
                    continue;
                }if (existing.grantableRights == null) {
                    existing.grantableRights = add.grantableRights.duplicate();
                } else {
                    existing.grantableRights.add(add.grantableRights);
                }

---------------------------Clone group no  743 for hash 2261a4d5823cf65fddf32ff9b7d44eef--------------------



CachedObject object;if (pos < 0) {
            return null;
        }readLock.lock();try {
            object = cache.get(pos);

            if (object != null) {
                if (keep) {
                    object.keepInMemory(true);
                }

                return object;
            }
        } finally {
            readLock.unlock();
        }

CachedObject object;if (pos < 0) {
            return null;
        }readLock.lock();try {
            object = cache.get(pos);

            if (object != null) {
                if (keep) {
                    object.keepInMemory(true);
                }

                return object;
            }
        } finally {
            readLock.unlock();
        }

---------------------------Clone group no  744 for hash 61521515eaff6f5016cbb4bd54833780--------------------



case FUNC_TIMEZONE :case FUNC_SESSION_TIMEZONE :case FUNC_DATABASE_TIMEZONE :

case FUNC_TIMEZONE :case FUNC_SESSION_TIMEZONE :case FUNC_DATABASE_TIMEZONE :

---------------------------Clone group no  745 for hash 5f999cc9a00c21966d2e985cd038b092--------------------



rs = pstmt.executeQuery();rs.next();count = rs.getInt(1);

rs = pstmt.executeQuery();rs.next();count = rs.getInt(1);

---------------------------Clone group no  746 for hash c889417c5489bffab5e342da579ac059--------------------



if (length > -1) {
            return length;
        }ResultLob resultOut = ResultLob.newLobGetLengthRequest(id);Result    resultIn  = session.execute(resultOut);if (resultIn.isError()) {
            throw resultIn.getException();
        }length = ((ResultLob) resultIn).getBlockLength();return length;

if (length > -1) {
            return length;
        }ResultLob resultOut = ResultLob.newLobGetLengthRequest(id);Result    resultIn  = session.execute(resultOut);if (resultIn.isError()) {
            throw resultIn.getException();
        }length = ((ResultLob) resultIn).getBlockLength();return length;

---------------------------Clone group no  747 for hash 023cb580f95e800e08154c0f620ba50e--------------------



StringBuffer sb = new StringBuffer();if (lines.length == 1 && lines[0].trim().length() < 1) {
            return null;
        }for (int i = 0; i < lines.length; i++) {
            if (i > 0) {
                sb.append(LS);
            }

            sb.append(\"+ \" + lines[i]);
        }TestUtil.expandStamps(sb);return sb.toString().trim();

StringBuffer sb = new StringBuffer();if (lines.length == 1 && lines[0].trim().length() < 1) {
            return null;
        }for (int i = 0; i < lines.length; i++) {
            if (i > 0) {
                sb.append(LS);
            }

            sb.append(\"+ \" + lines[i]);
        }TestUtil.expandStamps(sb);return sb.toString().trim();

---------------------------Clone group no  748 for hash 36c5ce6c871a96bfed5d8af696954489--------------------



NodeAVLDisk node = this;RowAVLDisk  row  = this.row;if (!row.isInMemory()) {
            row  = (RowAVLDisk) store.get(this.row, false);
            node = (NodeAVLDisk) row.getNode(iId);
        }

NodeAVLDisk node = this;RowAVLDisk  row  = this.row;if (!row.isInMemory()) {
            row  = (RowAVLDisk) store.get(this.row, false);
            node = (NodeAVLDisk) row.getNode(iId);
        }

NodeAVLDisk node = this;RowAVLDisk  row  = this.row;if (!row.isInMemory()) {
            row  = (RowAVLDisk) store.get(this.row, false);
            node = (NodeAVLDisk) row.getNode(iId);
        }

NodeAVLDisk node = this;RowAVLDisk  row  = this.row;if (!row.isInMemory()) {
            row  = (RowAVLDisk) store.get(this.row, false);
            node = (NodeAVLDisk) row.getNode(iId);
        }

NodeAVLDisk node = this;RowAVLDisk  row  = this.row;if (!row.isInMemory()) {
            row  = (RowAVLDisk) store.get(this.row, false);
            node = (NodeAVLDisk) row.getNode(iId);
        }

NodeAVLDisk node = this;RowAVLDisk  row  = this.row;if (!row.isInMemory()) {
            row  = (RowAVLDisk) store.get(this.row, false);
            node = (NodeAVLDisk) row.getNode(iId);
        }

---------------------------Clone group no  749 for hash ff8f60fb5455ab379aec27ca1d94571e--------------------



Object[] data = getLobHeader(lobID);if (data == null) {
                return Result.newErrorResult(Error.error(ErrorCode.X_0F502));
            }long length = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();

Object[] data = getLobHeader(lobID);if (data == null) {
                return Result.newErrorResult(Error.error(ErrorCode.X_0F502));
            }long length = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();

Object[] data = getLobHeader(lobID);if (data == null) {
                return Result.newErrorResult(Error.error(ErrorCode.X_0F502));
            }long length     = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();

---------------------------Clone group no  750 for hash 3deec5025292a6a2b671b07389fee99a--------------------



Result result;try {
            result = getResult(session);
        } catch (Throwable t) {
            result = Result.newErrorResult(t, null);
        }if (result.isError()) {
            result.getException().setStatementType(group, type);
        }return result;

Result result;try {
            result = getResult(session);
        } catch (Throwable t) {
            result = Result.newErrorResult(t, null);
        }if (result.isError()) {
            result.getException().setStatementType(group, type);
        }return result;

---------------------------Clone group no  751 for hash 4dd14b4726534ed4c8522ff1d84daa2a--------------------



dataOut.writeLong(blockOffset);dataOut.writeLong(blockLength);dataOut.write(byteBlock);break;

dataOut.writeLong(blockOffset);dataOut.writeLong(blockLength);dataOut.write(byteBlock);break;

---------------------------Clone group no  752 for hash 4b60374ef06170073a001131f818af9b--------------------



t = Type.SQL_INTERVAL_SECOND_MAX_FRACTION;o = new IntervalSecondData(seconds, nanos, t);return dataType.add(session, source, o, t);

t = Type.SQL_INTERVAL_SECOND_MAX_FRACTION;o = new IntervalSecondData(seconds, nanos, t);return dataType.add(session, source, o, t);

---------------------------Clone group no  753 for hash aa02da2471ec2d4c18e42774364e21f6--------------------



tableCatalog = table.getCatalogName().name;tableSchema  = table.getSchemaName().name;tableName    = table.getName().name;

tableCatalog = table.getCatalogName().name;tableSchema  = table.getSchemaName().name;tableName    = table.getName().name;

tableCatalog = table.getCatalogName().name;tableSchema  = table.getSchemaName().name;tableName    = table.getName().name;

tableCatalog   = table.getCatalogName().name;tableSchema    = table.getSchemaName().name;tableName      = table.getName().name;

---------------------------Clone group no  754 for hash 925e19ba5adfec25764bce5f8858e8cc--------------------



objectType    = SchemaObject.GRANTEE;canCascade    = true;break;

objectType    = SchemaObject.GRANTEE;canCascade    = true;break;

---------------------------Clone group no  755 for hash 32283385e2f2a61e37211527017eb404--------------------



StringBuffer sb = new StringBuffer();sb.append(Tokens.T_ROW);sb.append('(');

StringBuffer sb    = new StringBuffer();sb.append(Tokens.T_ROW);sb.append('(');

---------------------------Clone group no  756 for hash 6a39d4cd5b0de40a4ae76ad772b2da6c--------------------



if (verbose) {
                    System.out.println(\"Transaction failed: \"
                                       + E.getMessage());
                    E.printStackTrace();
                }incrementFailedTransactionCount();try {
                    Conn.rollback();
                } catch (SQLException E1) {}

if (verbose) {
                    System.out.println(\"Transaction failed: \"
                                       + E.getMessage());
                    E.printStackTrace();
                }incrementFailedTransactionCount();try {
                    Conn.rollback();
                } catch (SQLException E1) {}

---------------------------Clone group no  757 for hash aec56ef87aeb7fa751910f2281b52c6a--------------------



RowActionBase action         = this;RowActionBase head           = null;RowActionBase tail           = null;

RowActionBase action     = this;RowActionBase head       = null;RowActionBase tail       = null;

---------------------------Clone group no  758 for hash 0fb2f62bd5f1a99fc29cc3ba64928d47--------------------



if (!nodes[0].dataType.isCharacterType()
                        && !nodes[0].dataType.isBinaryType()) {
                    throw Error.error(ErrorCode.X_42563);
                }dataType = Type.SQL_BIGINT;break;

if (!nodes[0].dataType.isCharacterType()
                        && !nodes[0].dataType.isBinaryType()) {
                    throw Error.error(ErrorCode.X_42563);
                }dataType = Type.SQL_BIGINT;break;

---------------------------Clone group no  759 for hash bddf2ee3402996ac0ce99f7a3561e756--------------------



int oldSize = size();super.addOrRemove(key, 0, null, null, true);return oldSize != size();

int oldSize = size();super.addOrRemove(key, 0, null, null, true);return oldSize != size();

---------------------------Clone group no  760 for hash 23f4eaf3bf9a558bcd5f443b172bcee3--------------------



String s = e.getMessage();s    += \" / Error Code: \" + e.getErrorCode();s    += \" / State: \" + e.getSQLState();g[0] = s;

String s = e.getMessage();s    += \" / Error Code: \" + e.getErrorCode();s    += \" / State: \" + e.getSQLState();g[0] = s;

---------------------------Clone group no  761 for hash ce884270e3c5cf855c7cd7b2e471a9db--------------------



db     = database;tracer = t;quote  = q;

db     = database;tracer = t;quote  = q;

---------------------------Clone group no  762 for hash d44c29ce557771e64f3f4c6134cd21d6--------------------



ps = connection.prepareStatement(dql0);ResultSet rs = ps.executeQuery();rs.next();Blob blob1 = rs.getBlob(2);rs.next();Blob   blob2 = rs.getBlob(2);byte[] data1 = blob1.getBytes(1, 10);byte[] data2 = blob2.getBytes(1, 10);assertTrue(data1[4] == 5 && data2[4] == 50);

ps = connection.prepareStatement(dql0);ResultSet rs = ps.executeQuery();rs.next();Blob blob1 = rs.getBlob(2);rs.next();Blob   blob2 = rs.getBlob(2);byte[] data1 = blob1.getBytes(1, 10);byte[] data2 = blob2.getBytes(1, 10);assertTrue(data1[4] == 5 && data2[4] == 50);

---------------------------Clone group no  763 for hash f3242eadb724583d84f2e7ee0bee7264--------------------



sp.name       = null;sp.connection = null;throw JDBCUtil.sqlException(ErrorCode.X_3B001);

sp.name       = null;sp.connection = null;throw JDBCUtil.sqlException(ErrorCode.X_3B001);

---------------------------Clone group no  764 for hash a535f06c38d7978c0106bff043d700dd--------------------



Row             row          = navigator.getCurrentRow();Object[]        data         = navigator.getCurrentChangedData();Table           currentTable = ((Table) row.getTable());int[] changedColumns = navigator.getCurrentChangedColumns();PersistentStore store        = currentTable.getRowStore(session);if (data == null) {
                continue;
            }Row newRow = currentTable.insertSingleRow(session, store, data,
                changedColumns);

Row             row          = navigator.getCurrentRow();Object[]        data = navigator.getCurrentChangedData();Table           currentTable = ((Table) row.getTable());int[] changedColumns = navigator.getCurrentChangedColumns();PersistentStore store = currentTable.getRowStore(session);if (data == null) {
                    continue;
                }Row newRow = currentTable.insertSingleRow(session, store,
                    data, changedColumns);

---------------------------Clone group no  765 for hash 10c294680784545d2a9e488ae0574624--------------------



checkClosed();if (n <= 0) {
            return 0;
        }if (currentPosition + n > availableLength) {
            n = availableLength - currentPosition;
        }currentPosition += n;return n;

checkClosed();if (n <= 0) {
            return 0;
        }if (currentPosition + n > availableLength) {
            n = availableLength - currentPosition;
        }currentPosition += n;return n;

---------------------------Clone group no  766 for hash 8b9e89c556a9078a24aa9fd8f12400d7--------------------



readRoutineBody(routine);routine.resolve(session);return routine;

readRoutineBody(routine);routine.resolve(session);return routine;

---------------------------Clone group no  767 for hash aaba66f65248a29e6b387449f8a7864c--------------------



DatabaseManager m = new DatabaseManager();m.main();Connection c = null;

DatabaseManager m = new DatabaseManager();m.main();Connection c = null;

---------------------------Clone group no  768 for hash c679c0692a603f288b1887fda16e7756--------------------



token.tokenType   = Tokens.X_MALFORMED_BIT_STRING;token.isMalformed = true;return;

token.tokenType   = Tokens.X_MALFORMED_BIT_STRING;token.isMalformed = true;return;

token.tokenType   = Tokens.X_MALFORMED_BIT_STRING;token.isMalformed = true;return;

---------------------------Clone group no  769 for hash d400b85d15d5a253172d79546e511a9a--------------------



ResultSet rs = execute(\"call database_version()\");rs.next();String v = rs.getString(1);rs.close();

ResultSet rs = execute(\"call database_version()\");rs.next();String v = rs.getString(1);rs.close();

---------------------------Clone group no  770 for hash 30f199224bca69994e0c3c94f7456234--------------------



session.actionTimestamp      = getNextGlobalChangeTimestamp();session.transactionTimestamp = session.actionTimestamp;session.isTransaction        = true;transactionCount++;

session.actionTimestamp      = getNextGlobalChangeTimestamp();session.transactionTimestamp = session.actionTimestamp;session.isTransaction        = true;transactionCount++;

---------------------------Clone group no  771 for hash c4d9b579580679cb159e127f7fdb0f8e--------------------



Row      row            = navigator.getCurrentRow();Object[] changedData    = navigator.getCurrentChangedData();int[]    changedColumns = navigator.getCurrentChangedColumns();Table    currentTable   = ((Table) row.getTable());

Row      row            = navigator.getCurrentRow();Object[] changedData    = navigator.getCurrentChangedData();int[]    changedColumns = navigator.getCurrentChangedColumns();Table    currentTable   = ((Table) row.getTable());

Row      row            = navigator.getCurrentRow();Object[] changedData    = navigator.getCurrentChangedData();int[]    changedColumns = navigator.getCurrentChangedColumns();Table    currentTable   = ((Table) row.getTable());

---------------------------Clone group no  772 for hash 337e0f9be2fc8413498ea7fa5f4a10dd--------------------



testA.run(result);testB.run(result);testC.run(result);

testA.run(result);testB.run(result);testC.run(result);

---------------------------Clone group no  773 for hash 6a3e53dace61ae7d90a351b9e659b907--------------------



stmnt.execute(\"drop table CDTYPE if exists\");// test for the value MAX(column) in an empty table
                stmnt.execute(
                    \"CREATE TABLE cdType (ID INTEGER NOT NULL, name VARCHAR(50), PRIMARY KEY(ID))\");rs = stmnt.executeQuery(\"SELECT MAX(ID) FROM cdType\");if (rs.next()) {
                    int max = rs.getInt(1);

                    System.out.println(\"Max value for ID: \" + max);
                } else {
                    System.out.println(\"Max value for ID not returned\");
                }stmnt.executeUpdate(
                    \"INSERT INTO cdType VALUES (10,'Test String');\");stmnt.execute(\"CALL IDENTITY();\");

stmnt.execute(\"drop table CDTYPE if exists\");// test for the value MAX(column) in an empty table
                stmnt.execute(
                    \"CREATE TABLE cdType (ID INTEGER NOT NULL, name VARCHAR(50), PRIMARY KEY(ID))\");rs = stmnt.executeQuery(\"SELECT MAX(ID) FROM cdType\");if (rs.next()) {
                    int max = rs.getInt(1);

                    System.out.println(\"Max value for ID: \" + max);
                } else {
                    System.out.println(\"Max value for ID not returned\");
                }stmnt.executeUpdate(
                    \"INSERT INTO cdType VALUES (10,'Test String');\");stmnt.execute(\"CALL IDENTITY();\");

---------------------------Clone group no  774 for hash 705c18ab3f4f908b601bec0f4ff77a0d--------------------



pstmt         = conn.prepareStatement(sql);pstmt.setInt(1, 0);rs = pstmt.executeQuery();rs.next();actualCount = rs.getInt(1);assertEquals(\"\\\"\" + sql + \"\\\"\", expectedCount, actualCount);

pstmt = conn.prepareStatement(sql);pstmt.setInt(1, 0);rs = pstmt.executeQuery();rs.next();actualCount = rs.getInt(1);assertEquals(\"\\\"\" + sql + \"\\\"\", expectedCount, actualCount);

---------------------------Clone group no  775 for hash db40d12ebcc4c67fb30c4cc0ae7dcaa9--------------------



diagnosticsVariables =
            new Object[ExpressionColumn.diagnosticsVariableTokens.length];rangeIterators        = new RangeIterator[8];savepoints            = new HashMappedList(4);savepointTimestamps   = new LongDeque();

diagnosticsVariables =
            new Object[ExpressionColumn.diagnosticsVariableTokens.length];rangeIterators      = new RangeIterator[8];savepoints          = new HashMappedList(4);savepointTimestamps = new LongDeque();

---------------------------Clone group no  776 for hash e85b0daab0b61d4d26683f9f3356fea7--------------------



break;case LobResultTypes.RESPONSE_SET :case LobResultTypes.RESPONSE_CREATE_BYTES :case LobResultTypes.RESPONSE_CREATE_CHARS :case LobResultTypes.RESPONSE_TRUNCATE :

break;case LobResultTypes.RESPONSE_SET :case LobResultTypes.RESPONSE_CREATE_BYTES :case LobResultTypes.RESPONSE_CREATE_CHARS :case LobResultTypes.RESPONSE_TRUNCATE :

---------------------------Clone group no  777 for hash af97f45eaa0ea6ac1abad1974499ecb3--------------------



break;default :wasNormal = true;complete  = wasCR;wasCR     = false;

break;default :wasNormal = true;complete  = wasCR;wasCR     = false;

---------------------------Clone group no  778 for hash 298dbd7f19a2a8a980f38e15ed3f0475--------------------



ResultSetMetaData rsmd    = rs.getMetaData();String            result0 = \"\";for (; rs.next(); ) {
                    for (int i = 0; i < rsmd.getColumnCount(); i++) {
                        result0 += rs.getString(i + 1) + \":\";
                    }

                    result0 += \"\\n\";
                }rs.close();System.out.println(result0);

ResultSetMetaData rsmd    = rs.getMetaData();String            result0 = \"\";for (; rs.next(); ) {
                    for (int i = 0; i < rsmd.getColumnCount(); i++) {
                        result0 += rs.getString(i + 1) + \":\";
                    }

                    result0 += \"\\n\";
                }rs.close();System.out.println(result0);

---------------------------Clone group no  779 for hash 9446a00561ab26bd10a7e60090c84b47--------------------



addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);

addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);

addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);

addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);

addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);

addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);

---------------------------Clone group no  780 for hash 673dd34017722df83e175b78e3fd909d--------------------



if (precision == 0) {
            return getNameString();
        }StringBuffer sb = new StringBuffer(16);sb.append(getNameString());sb.append('(');sb.append(precision);sb.append(')');return sb.toString();

if (precision == 0) {
            return getNameString();
        }StringBuffer sb = new StringBuffer(16);sb.append(getNameString());sb.append('(');sb.append(precision);sb.append(')');return sb.toString();

if (precision == 0) {
            return getNameString();
        }StringBuffer sb = new StringBuffer(16);sb.append(getNameString());sb.append('(');sb.append(precision);sb.append(')');return sb.toString();

---------------------------Clone group no  781 for hash 5494a7608b80f13fc65e224dafb33cf9--------------------



yybegin(RAW);rawLeadinPrompt();if (rawPrompt != null) prompt(rawPrompt);

yybegin(RAW);rawLeadinPrompt();if (rawPrompt != null) prompt(rawPrompt);

---------------------------Clone group no  782 for hash 2bf44a75ddc0cd28ec299a0f210f5d4f--------------------



break;case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :case Types.SQL_TIMESTAMP :

break;case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :case Types.SQL_TIMESTAMP :

---------------------------Clone group no  783 for hash 1ad2771e45f13f4c241614bf3a593c06--------------------



row = c.getRow(store);session.database.txManager.setTransactionInfo(store, row);if (session.database.txManager.canRead(
                        session, store, row, TransactionManager.ACTION_DUP,
                        null)) {
                    return true;
                }continue;

row = c.getRow(store);session.database.txManager.setTransactionInfo(store, row);if (session.database.txManager.canRead(
                        session, store, row, TransactionManager.ACTION_DUP,
                        null)) {
                    return true;
                }continue;

---------------------------Clone group no  784 for hash 6fd28d587de951ef296f911e0756ad96--------------------



// intermediate holders
        Iterator  tables;Table     table;Object[]  row;final int table_catalog = 0;final int table_schema  = 1;final int table_name    = 2;

Iterator  tables;Table     table;Object[]  row;final int table_catalog              = 0;final int table_schema               = 1;final int table_name                 = 2;

// intermediate holders
        Iterator  tables;Table     table;Object[]  row;final int table_catalog                = 0;final int table_schema                 = 1;final int table_name                   = 2;

---------------------------Clone group no  785 for hash aec686c5f2867f7b7d195bd5af2cd31d--------------------



addColumn(t, \"SPECIFIC_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"SPECIFIC_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"SPECIFIC_NAME\", SQL_IDENTIFIER);addColumn(t, \"ROUTINE_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"ROUTINE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"ROUTINE_NAME\", SQL_IDENTIFIER);addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);

addColumn(t, \"SPECIFIC_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"SPECIFIC_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"SPECIFIC_NAME\", SQL_IDENTIFIER);addColumn(t, \"ROUTINE_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"ROUTINE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"ROUTINE_NAME\", SQL_IDENTIFIER);addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);

---------------------------Clone group no  786 for hash 32f80f641468cb7ff5cd2f55cb1363ea--------------------



sb.append(database.sqlSyntaxOra ? Tokens.T_TRUE
                                            : Tokens.T_FALSE);list.add(sb.toString());sb.setLength(0);

sb.append(database.sqlSyntaxOra ? Tokens.T_TRUE
                                            : Tokens.T_FALSE);list.add(sb.toString());sb.setLength(0);

---------------------------Clone group no  787 for hash 6fb6eeed42f63b755222c9372cdfd640--------------------



sb.append(Tokens.T_SET).append(' ');sb.append(Tokens.T_PASSWORD).append(' ').append(Tokens.T_DIGEST);sb.append(' ').append('\\'').append(password).append('\\'');return sb.toString();

sb.append(Tokens.T_SET).append(' ');sb.append(Tokens.T_PASSWORD).append(' ').append(Tokens.T_DIGEST);sb.append(' ').append('\\'').append(password).append('\\'');return sb.toString();

---------------------------Clone group no  788 for hash cec28a8a63ed4f6a43d5f8299bf8e1f0--------------------



setupChecks();setDatabseObjects(session, compileContext);checkAccessRights(session);

setupChecks();setDatabseObjects(session, compileContext);checkAccessRights(session);

---------------------------Clone group no  789 for hash 732b77448107ae9c49e6661a01175f75--------------------



if (nodes[0].dataType == null) {
                    throw Error.error(ErrorCode.X_42567);
                }if (!nodes[0].dataType.isArrayType()) {
                    throw Error.error(ErrorCode.X_42563);
                }dataType = Type.SQL_INTEGER;break;

if (nodes[0].dataType == null) {
                    throw Error.error(ErrorCode.X_42567);
                }if (!nodes[0].dataType.isArrayType()) {
                    throw Error.error(ErrorCode.X_42563);
                }dataType = Type.SQL_INTEGER;break;

---------------------------Clone group no  790 for hash 1ff90bdca526f4ddbcf3cd3e19ccf532--------------------



if (session.isProcessingLog()) {
            return;
        }if (SqlInvariants.isSystemSchemaName(schema.name)) {
            throw Error.error(ErrorCode.X_42503);
        }if (session.parser.isSchemaDefinition) {
            if (schema == session.getCurrentSchemaHsqlName()) {
                return;
            }

            Error.error(ErrorCode.X_42505, schema.name);
        }session.getGrantee().checkSchemaUpdateOrGrantRights(schema.name);session.checkDDLWrite();

if (session.isProcessingLog()) {
            return;
        }if (SqlInvariants.isSystemSchemaName(schema.name)) {
            throw Error.error(ErrorCode.X_42503);
        }if (session.parser.isSchemaDefinition) {
            if (schema == session.getCurrentSchemaHsqlName()) {
                return;
            }

            Error.error(ErrorCode.X_42505, schema.name);
        }session.getGrantee().checkSchemaUpdateOrGrantRights(schema.name);session.checkDDLWrite();

---------------------------Clone group no  791 for hash f3fa4a4f966e57689c0f087e808a3ec9--------------------



checkClosed();checkNotForwardOnly();if (isOnInsertRow || isRowUpdated) {
            throw JDBCUtil.sqlExceptionSQL(ErrorCode.X_24513);
        }

checkClosed();checkNotForwardOnly();if (isOnInsertRow || isRowUpdated) {
            throw JDBCUtil.sqlExceptionSQL(ErrorCode.X_24513);
        }

checkClosed();checkNotForwardOnly();if (isOnInsertRow || isRowUpdated) {
            throw JDBCUtil.sqlExceptionSQL(ErrorCode.X_24513);
        }

checkClosed();checkNotForwardOnly();if (isOnInsertRow || isRowUpdated) {
            throw JDBCUtil.sqlExceptionSQL(ErrorCode.X_24513);
        }

checkClosed();checkNotForwardOnly();if (isOnInsertRow || isRowUpdated) {
            throw JDBCUtil.sqlExceptionSQL(ErrorCode.X_24513);
        }

checkClosed();checkNotForwardOnly();if (isOnInsertRow || isRowUpdated) {
            throw JDBCUtil.sqlExceptionSQL(ErrorCode.X_24513);
        }

checkClosed();checkNotForwardOnly();if (isOnInsertRow || isRowUpdated) {
            throw JDBCUtil.sqlExceptionSQL(ErrorCode.X_24513);
        }

---------------------------Clone group no  792 for hash c5ef1ddb7f8896fc77bc526a1d66d870--------------------



rowOut.writeInt(updateCount);rowOut.writeInt(fetchSize);rowOut.writeLong(statementID);

rowOut.writeInt(updateCount);rowOut.writeInt(fetchSize);rowOut.writeLong(statementID);

rowOut.writeInt(updateCount);rowOut.writeInt(fetchSize);rowOut.writeLong(statementID);

---------------------------Clone group no  793 for hash 947852152ff4a36ba698715bb059fad5--------------------



addColumn(t, \"CONSTRAINT_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"CONSTRAINT_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"CONSTRAINT_NAME\", SQL_IDENTIFIER);    // not null

addColumn(t, \"CONSTRAINT_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"CONSTRAINT_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"CONSTRAINT_NAME\", SQL_IDENTIFIER);    // not null

addColumn(t, \"CONSTRAINT_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"CONSTRAINT_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"CONSTRAINT_NAME\", SQL_IDENTIFIER);    // not null

addColumn(t, \"CONSTRAINT_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"CONSTRAINT_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"CONSTRAINT_NAME\", SQL_IDENTIFIER);    // not null

addColumn(t, \"CONSTRAINT_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"CONSTRAINT_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"CONSTRAINT_NAME\", SQL_IDENTIFIER);    // not null

addColumn(t, \"CONSTRAINT_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"CONSTRAINT_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"CONSTRAINT_NAME\", SQL_IDENTIFIER);    // not null

addColumn(t, \"CONSTRAINT_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"CONSTRAINT_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"CONSTRAINT_NAME\", SQL_IDENTIFIER);                   // not null

addColumn(t, \"CONSTRAINT_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"CONSTRAINT_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"CONSTRAINT_NAME\", SQL_IDENTIFIER);              // not null

addColumn(t, \"CONSTRAINT_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"CONSTRAINT_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"CONSTRAINT_NAME\", SQL_IDENTIFIER);    // not null

---------------------------Clone group no  794 for hash e786d738141c8a704f50cc142586b6c5--------------------



//
        Iterator it;Object[] row;it = database.schemaManager.databaseObjectIterator(
            SchemaObject.TRIGGER);

//
        Iterator it;Object[] row;it = database.schemaManager.databaseObjectIterator(
            SchemaObject.TRIGGER);

//
        Iterator it;Object[] row;it = database.schemaManager.databaseObjectIterator(
            SchemaObject.TRIGGER);

//
        Iterator it;Object[] row;it = database.schemaManager.databaseObjectIterator(
            SchemaObject.TRIGGER);

//
        Iterator it;Object[] row;it = database.schemaManager.databaseObjectIterator(
            SchemaObject.TRIGGER);

//
        Iterator it;Object[] row;it = database.schemaManager.databaseObjectIterator(
            SchemaObject.TRIGGER);

---------------------------Clone group no  795 for hash 694ab1c5197a292da2db7d6e51814086--------------------



cs                    = session.parser.compileCreate();cs.isSchemaDefinition = true;cs.setSchemaHsqlName(schemaDefinitionName);if (session.parser.token.tokenType
                                != Tokens.X_ENDPARSE) {
                            throw session.parser.unexpectedToken();
                        }

cs                    = session.parser.compileCreate();cs.isSchemaDefinition = true;cs.setSchemaHsqlName(schemaDefinitionName);if (session.parser.token.tokenType
                                != Tokens.X_ENDPARSE) {
                            throw session.parser.unexpectedToken();
                        }

---------------------------Clone group no  796 for hash 61d02308cbcee271ee8c8b8cc832217b--------------------



StopWatch        sw        = new StopWatch();int              smallrows = 0xfff;java.util.Random randomgen = new java.util.Random();int              i         = 0;boolean          slow      = false;

StopWatch        sw        = new StopWatch();int              smallrows = 0xfff;java.util.Random randomgen = new java.util.Random();int              i         = 0;boolean          slow      = false;

---------------------------Clone group no  797 for hash 3acb3c894e89ec9fae5f74010c192c84--------------------



if (key == null) {
            throw new NoSuchElementException();
        }int hash   = key.hashCode();int lookup = getLookup(key, hash);if (lookup != -1) {
            return longValueTable[lookup];
        }

if (key == null) {
            throw new NoSuchElementException();
        }int hash   = key.hashCode();int lookup = getLookup(key, hash);if (lookup != -1) {
            return longValueTable[lookup];
        }

---------------------------Clone group no  798 for hash b7f5380cad9a71abe13e438f4256ec8d--------------------



int colIndex = e.getLeftNode().getColumnIndex();colIndexSetEqual.add(colIndex);break;

int colIndex = e.getLeftNode().getColumnIndex();colIndexSetEqual.add(colIndex);break;

---------------------------Clone group no  799 for hash 8ac92d6402c0f77a070b4b036b881569--------------------



Class c = Class.forName(\"sun.security.action.GetPropertyAction\");Constructor constructor = c.getConstructor(new Class[]{
                String.class });java.security.PrivilegedAction a =
                (java.security.PrivilegedAction) constructor.newInstance(
                    new Object[]{ \"user.home\" });homedir = (String) java.security.AccessController.doPrivileged(a);

Class c =
                    Class.forName(\"sun.security.action.GetPropertyAction\");Constructor constructor = c.getConstructor(new Class[]{
                    String.class });java.security.PrivilegedAction a =
                    (java.security.PrivilegedAction) constructor.newInstance(
                        new Object[]{ \"user.home\" });homedir =
                    (String) java.security.AccessController.doPrivileged(a);

---------------------------Clone group no  800 for hash 2294914522bf6f532560ca7d74191bd6--------------------



addColumn(t, \"TRIGGER_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"TRIGGER_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"TRIGGER_NAME\", SQL_IDENTIFIER);    // not null

addColumn(t, \"TRIGGER_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"TRIGGER_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"TRIGGER_NAME\", SQL_IDENTIFIER);     // not null

addColumn(t, \"TRIGGER_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"TRIGGER_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"TRIGGER_NAME\", SQL_IDENTIFIER);     // not null

addColumn(t, \"TRIGGER_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"TRIGGER_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"TRIGGER_NAME\", SQL_IDENTIFIER);    // not null

addColumn(t, \"TRIGGER_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"TRIGGER_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"TRIGGER_NAME\", SQL_IDENTIFIER);

addColumn(t, \"TRIGGER_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"TRIGGER_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"TRIGGER_NAME\", SQL_IDENTIFIER);            // not null

---------------------------Clone group no  801 for hash 18fbc2479a14bd895a64c560a225505c--------------------



int       precision = -1;int       scale     = -1;int       startToken;int       endToken;

int precision = -1;int scale     = -1;int startToken;int endToken;

---------------------------Clone group no  802 for hash dfd8e38bb8d00d45459af38fb6e63957--------------------



Object[] rowData = new Object[2];rowData[0] = Integer.valueOf(i + 1);rowData[1] = data[i];navigator.add(rowData);

Object[] rowData = new Object[2];rowData[0] = Integer.valueOf(i + 1);rowData[1] = data[i];navigator.add(rowData);

---------------------------Clone group no  803 for hash 49139b9482b99df9f99e8733eaac3102--------------------



reader = dataClob.getCharacterStream();ps.setString(1, \"test-id-1\" + i);ps.setLong(2, 23456789123456L + i);ps.setCharacterStream(3, reader, dataClob.length());ps.setString(4, \"test-scope-1\" + i);ps.executeUpdate();connection.commit();

reader = dataClob.getCharacterStream();ps.setString(1, \"test-id-1\" + i);ps.setLong(2, 23456789123456L + i);ps.setCharacterStream(3, reader, dataClob.length());ps.setString(4, \"test-scope-1\" + i);ps.executeUpdate();connection.commit();

---------------------------Clone group no  804 for hash bfa9d49f168a1abb4fc878cc9351af95--------------------



sortAndSlice    = SortAndSlice.noSort;isBaseMergeable = true;isMergeable     = true;

sortAndSlice        = SortAndSlice.noSort;isBaseMergeable     = true;isMergeable         = true;

---------------------------Clone group no  805 for hash 0c04192746c89403203a63e33d4dec29--------------------



StringTokenizer Tokenizer;if (WTextRead == null) {
            try {
                WTextRead = new BufferedReader(new FileReader(sFileName));
            } catch (IOException e) {
                throw new DataAccessPointException(e.getMessage());
            }
        }String        currentLine  = \"\";

StringTokenizer   Tokenizer;if (WTextRead == null) {
            try {
                WTextRead = new BufferedReader(new FileReader(sFileName));
            } catch (IOException e) {
                throw new DataAccessPointException(e.getMessage());
            }
        }String currentLine = \"\";

---------------------------Clone group no  806 for hash 910ce664729b8c6af4a2cef0925adc2e--------------------



Object[]    compareData = null;RowIterator it;Row         otherRow  = null;Object[]    otherData = null;sortFull(session);other.sortFull(session);it = fullIndex.emptyIterator();

Object[]    compareData = null;RowIterator it;Row         otherRow  = null;Object[]    otherData = null;sortFull(session);other.sortFull(session);it = fullIndex.emptyIterator();

---------------------------Clone group no  807 for hash f2f391c44e2d8565e9141eeeaa6a31de--------------------



break;case ResultConstants.TX_COMMIT :case ResultConstants.TX_ROLLBACK :case ResultConstants.TX_COMMIT_AND_CHAIN :case ResultConstants.TX_ROLLBACK_AND_CHAIN :break;default :throw Error.runtimeError(ErrorCode.U_S0500, \"Result\");

break;case ResultConstants.TX_COMMIT :case ResultConstants.TX_ROLLBACK :case ResultConstants.TX_COMMIT_AND_CHAIN :case ResultConstants.TX_ROLLBACK_AND_CHAIN :break;default :throw Error.runtimeError(ErrorCode.U_S0500, \"Result\");

---------------------------Clone group no  808 for hash ea57b1d07e21b6eb9548fabb67c2672e--------------------



OrderedHashSet set = new OrderedHashSet();while (rights.hasNext()) {
                set.add(rights.next());
            }return set;

OrderedHashSet set = new OrderedHashSet();while (rights.hasNext()) {
                set.add(rights.next());
            }return set;

---------------------------Clone group no  809 for hash 27d39cc8a8d021ea6ad6beb0504b11c1--------------------



break;case Types.SQL_INTERVAL_YEAR :case Types.SQL_INTERVAL_YEAR_TO_MONTH :case Types.SQL_INTERVAL_MONTH :

break;case Types.SQL_INTERVAL_YEAR :case Types.SQL_INTERVAL_YEAR_TO_MONTH :case Types.SQL_INTERVAL_MONTH :

break;case Types.SQL_INTERVAL_YEAR :case Types.SQL_INTERVAL_YEAR_TO_MONTH :case Types.SQL_INTERVAL_MONTH :

---------------------------Clone group no  810 for hash 5c664c0569c9c65da3fd591cd37dadd8--------------------



addColumn(t, \"NAME\", CHARACTER_DATA);addColumn(t, \"IS_SUPPORTED\", YES_OR_NO);addColumn(t, \"IS_VERIFIED_BY\", CHARACTER_DATA);addColumn(t, \"COMMENTS\", CHARACTER_DATA);

addColumn(t, \"NAME\", CHARACTER_DATA);addColumn(t, \"IS_SUPPORTED\", YES_OR_NO);addColumn(t, \"IS_VERIFIED_BY\", CHARACTER_DATA);addColumn(t, \"COMMENTS\", CHARACTER_DATA);

---------------------------Clone group no  811 for hash 43d07072b187bd1445dd507ec5449e51--------------------



Statement st1 = null;ResultSet rs  = null;int       bbalancesum;int       tbalancesum;int       abalancesum;

Statement st1 = null;ResultSet rs  = null;int       bbalancesum;int       tbalancesum;int       abalancesum;

---------------------------Clone group no  812 for hash 35adde4e59a5a0a298a5774cd811d7dc--------------------



rs = sStatement.getResultSet();rs.next();System.out.println(\"Row Count: \" + rs.getInt(1));System.out.println(\"Time to count: \" + sw.elapsedTime());

rs = sStatement.getResultSet();rs.next();System.out.println(\"Row Count: \" + rs.getInt(1));System.out.println(\"Time to count: \" + sw.elapsedTime());

---------------------------Clone group no  813 for hash 9f0586f2fdf0150e3943ef895f30f182--------------------



case Types.SQL_INTERVAL_DAY :case Types.SQL_INTERVAL_DAY_TO_HOUR :case Types.SQL_INTERVAL_DAY_TO_MINUTE :case Types.SQL_INTERVAL_DAY_TO_SECOND :case Types.SQL_INTERVAL_HOUR :case Types.SQL_INTERVAL_HOUR_TO_MINUTE :case Types.SQL_INTERVAL_HOUR_TO_SECOND :case Types.SQL_INTERVAL_MINUTE :case Types.SQL_INTERVAL_MINUTE_TO_SECOND :case Types.SQL_INTERVAL_SECOND :

case Types.SQL_INTERVAL_DAY :case Types.SQL_INTERVAL_DAY_TO_HOUR :case Types.SQL_INTERVAL_DAY_TO_MINUTE :case Types.SQL_INTERVAL_DAY_TO_SECOND :case Types.SQL_INTERVAL_HOUR :case Types.SQL_INTERVAL_HOUR_TO_MINUTE :case Types.SQL_INTERVAL_HOUR_TO_SECOND :case Types.SQL_INTERVAL_MINUTE :case Types.SQL_INTERVAL_MINUTE_TO_SECOND :case Types.SQL_INTERVAL_SECOND :

case Types.SQL_INTERVAL_DAY :case Types.SQL_INTERVAL_DAY_TO_HOUR :case Types.SQL_INTERVAL_DAY_TO_MINUTE :case Types.SQL_INTERVAL_DAY_TO_SECOND :case Types.SQL_INTERVAL_HOUR :case Types.SQL_INTERVAL_HOUR_TO_MINUTE :case Types.SQL_INTERVAL_HOUR_TO_SECOND :case Types.SQL_INTERVAL_MINUTE :case Types.SQL_INTERVAL_MINUTE_TO_SECOND :case Types.SQL_INTERVAL_SECOND :

case Types.SQL_INTERVAL_DAY :case Types.SQL_INTERVAL_DAY_TO_HOUR :case Types.SQL_INTERVAL_DAY_TO_MINUTE :case Types.SQL_INTERVAL_DAY_TO_SECOND :case Types.SQL_INTERVAL_HOUR :case Types.SQL_INTERVAL_HOUR_TO_MINUTE :case Types.SQL_INTERVAL_HOUR_TO_SECOND :case Types.SQL_INTERVAL_MINUTE :case Types.SQL_INTERVAL_MINUTE_TO_SECOND :case Types.SQL_INTERVAL_SECOND :

case Types.SQL_INTERVAL_DAY :case Types.SQL_INTERVAL_DAY_TO_HOUR :case Types.SQL_INTERVAL_DAY_TO_MINUTE :case Types.SQL_INTERVAL_DAY_TO_SECOND :case Types.SQL_INTERVAL_HOUR :case Types.SQL_INTERVAL_HOUR_TO_MINUTE :case Types.SQL_INTERVAL_HOUR_TO_SECOND :case Types.SQL_INTERVAL_MINUTE :case Types.SQL_INTERVAL_MINUTE_TO_SECOND :case Types.SQL_INTERVAL_SECOND :

case Types.SQL_INTERVAL_DAY :case Types.SQL_INTERVAL_DAY_TO_HOUR :case Types.SQL_INTERVAL_DAY_TO_MINUTE :case Types.SQL_INTERVAL_DAY_TO_SECOND :case Types.SQL_INTERVAL_HOUR :case Types.SQL_INTERVAL_HOUR_TO_MINUTE :case Types.SQL_INTERVAL_HOUR_TO_SECOND :case Types.SQL_INTERVAL_MINUTE :case Types.SQL_INTERVAL_MINUTE_TO_SECOND :case Types.SQL_INTERVAL_SECOND :

case Types.SQL_INTERVAL_DAY :case Types.SQL_INTERVAL_DAY_TO_HOUR :case Types.SQL_INTERVAL_DAY_TO_MINUTE :case Types.SQL_INTERVAL_DAY_TO_SECOND :case Types.SQL_INTERVAL_HOUR :case Types.SQL_INTERVAL_HOUR_TO_MINUTE :case Types.SQL_INTERVAL_HOUR_TO_SECOND :case Types.SQL_INTERVAL_MINUTE :case Types.SQL_INTERVAL_MINUTE_TO_SECOND :case Types.SQL_INTERVAL_SECOND :

case Types.SQL_INTERVAL_DAY :case Types.SQL_INTERVAL_DAY_TO_HOUR :case Types.SQL_INTERVAL_DAY_TO_MINUTE :case Types.SQL_INTERVAL_DAY_TO_SECOND :case Types.SQL_INTERVAL_HOUR :case Types.SQL_INTERVAL_HOUR_TO_MINUTE :case Types.SQL_INTERVAL_HOUR_TO_SECOND :case Types.SQL_INTERVAL_MINUTE :case Types.SQL_INTERVAL_MINUTE_TO_SECOND :case Types.SQL_INTERVAL_SECOND :

case Types.SQL_INTERVAL_DAY :case Types.SQL_INTERVAL_DAY_TO_HOUR :case Types.SQL_INTERVAL_DAY_TO_MINUTE :case Types.SQL_INTERVAL_DAY_TO_SECOND :case Types.SQL_INTERVAL_HOUR :case Types.SQL_INTERVAL_HOUR_TO_MINUTE :case Types.SQL_INTERVAL_HOUR_TO_SECOND :case Types.SQL_INTERVAL_MINUTE :case Types.SQL_INTERVAL_MINUTE_TO_SECOND :case Types.SQL_INTERVAL_SECOND :

case Types.SQL_INTERVAL_DAY :case Types.SQL_INTERVAL_DAY_TO_HOUR :case Types.SQL_INTERVAL_DAY_TO_MINUTE :case Types.SQL_INTERVAL_DAY_TO_SECOND :case Types.SQL_INTERVAL_HOUR :case Types.SQL_INTERVAL_HOUR_TO_MINUTE :case Types.SQL_INTERVAL_HOUR_TO_SECOND :case Types.SQL_INTERVAL_MINUTE :case Types.SQL_INTERVAL_MINUTE_TO_SECOND :case Types.SQL_INTERVAL_SECOND :

case Types.SQL_INTERVAL_DAY :case Types.SQL_INTERVAL_DAY_TO_HOUR :case Types.SQL_INTERVAL_DAY_TO_MINUTE :case Types.SQL_INTERVAL_DAY_TO_SECOND :case Types.SQL_INTERVAL_HOUR :case Types.SQL_INTERVAL_HOUR_TO_MINUTE :case Types.SQL_INTERVAL_HOUR_TO_SECOND :case Types.SQL_INTERVAL_MINUTE :case Types.SQL_INTERVAL_MINUTE_TO_SECOND :case Types.SQL_INTERVAL_SECOND :

---------------------------Clone group no  814 for hash 2ab33a4bd803dc528b2e58abef961835--------------------



int c = ((int) b[i]) & 0xff;s[j++] = (char) HEXBYTES[c >> 4 & 0xf];s[j++] = (char) HEXBYTES[c & 0xf];

int c = ((int) b[i]) & 0xff;s[j++] = (char) HEXBYTES[c >> 4 & 0xf];s[j++] = (char) HEXBYTES[c & 0xf];

---------------------------Clone group no  815 for hash efcdd7b71c83a4036c261bd56f8b0470--------------------



group = StatementTypes.X_SQL_SCHEMA_DEFINITION;order = 1;break;

group = StatementTypes.X_SQL_SCHEMA_DEFINITION;order = 1;break;

group = StatementTypes.X_SQL_SCHEMA_DEFINITION;order = 1;break;

group = StatementTypes.X_SQL_SCHEMA_DEFINITION;order = 1;break;

group = StatementTypes.X_SQL_SCHEMA_DEFINITION;order = 1;break;

group = StatementTypes.X_SQL_SCHEMA_DEFINITION;order = 1;break;

group = StatementTypes.X_SQL_SCHEMA_DEFINITION;order = 1;break;

group = StatementTypes.X_SQL_SCHEMA_DEFINITION;order = 1;break;

group = StatementTypes.X_SQL_SCHEMA_DEFINITION;order = 1;break;

group = StatementTypes.X_SQL_SCHEMA_DEFINITION;order = 1;break;

---------------------------Clone group no  816 for hash 2938f13a3d51a4be7a35a4518b50a363--------------------



break;default :throw Error.runtimeError(ErrorCode.U_S0500, \"Table\");

break;default :throw Error.runtimeError(ErrorCode.U_S0500, \"Table\");

break;default :throw Error.runtimeError(ErrorCode.U_S0500, \"Table\");

---------------------------Clone group no  817 for hash fe8ad849fbe58d4cc3917ad766151843--------------------



if (currentPos < 0 || currentPos >= size) {
            return null;
        }if (currentPos == currentOffset + table.length) {
            getBlock(currentOffset + table.length);
        }return table[currentPos - currentOffset];

if (currentPos < 0 || currentPos >= size) {
            return null;
        }if (currentPos == currentOffset + table.length) {
            getBlock(currentOffset + table.length);
        }return table[currentPos - currentOffset];

---------------------------Clone group no  818 for hash 0468a2e5f447e4e63ae0243b1cf4482c--------------------



Vector      vClient  = new Vector();Thread      Client   = null;Enumeration e        = null;Connection  guardian = null;

Vector      vClient  = new Vector();Thread      Client   = null;Enumeration e        = null;Connection  guardian = null;

Vector      vClient  = new Vector();Thread      Client   = null;Enumeration e        = null;Connection  guardian = null;

Vector      vClient  = new Vector();Thread      Client   = null;Enumeration e        = null;Connection  guardian = null;

---------------------------Clone group no  819 for hash bcea0979a0dd128cf418633753196372--------------------



case FUNC_SESSION_ID :case FUNC_ACTION_ID :case FUNC_TRANSACTION_ID :case FUNC_TRANSACTION_SIZE :

case FUNC_SESSION_ID :case FUNC_ACTION_ID :case FUNC_TRANSACTION_ID :case FUNC_TRANSACTION_SIZE :

---------------------------Clone group no  820 for hash 8ef2c1aedccda804fd273d12a02120c3--------------------



Session session = database.sessionManager.getSysSession();for (int i = 0; i < set.size(); i++) {
                HsqlName name = (HsqlName) set.get(i);

                switch (name.type) {

                    case SchemaObject.VIEW :
                    case SchemaObject.CONSTRAINT :
                    case SchemaObject.ASSERTION :
                    case SchemaObject.ROUTINE :
                    case SchemaObject.PROCEDURE :
                    case SchemaObject.FUNCTION :
                    case SchemaObject.SPECIFIC_ROUTINE :
                        SchemaObject object = getSchemaObject(name);

                        object.compile(session, null);
                        break;
                }
            }if (Error.TRACE) {
                HsqlArrayList list = getAllTables(false);

                for (int i = 0; i < list.size(); i++) {
                    Table t = (Table) list.get(i);

                    t.verifyConstraintsIntegrity();
                }
            }

Session session = database.sessionManager.getSysSession();for (int i = 0; i < set.size(); i++) {
                HsqlName name = (HsqlName) set.get(i);

                switch (name.type) {

                    case SchemaObject.VIEW :
                    case SchemaObject.CONSTRAINT :
                    case SchemaObject.ASSERTION :
                    case SchemaObject.ROUTINE :
                    case SchemaObject.PROCEDURE :
                    case SchemaObject.FUNCTION :
                    case SchemaObject.SPECIFIC_ROUTINE :
                        SchemaObject object = getSchemaObject(name);

                        object.compile(session, null);
                        break;
                }
            }if (Error.TRACE) {
                HsqlArrayList list = getAllTables(false);

                for (int i = 0; i < list.size(); i++) {
                    Table t = (Table) list.get(i);

                    t.verifyConstraintsIntegrity();
                }
            }

---------------------------Clone group no  821 for hash e6020fd3e0f0ac0795a511df144fd0e3--------------------



if (routine.getType() == SchemaObject.FUNCTION
                            || !set.add(Tokens.SAVEPOINT)) {
                        throw unexpectedToken();
                    }read();readThis(Tokens.SAVEPOINT);readThis(Tokens.LEVEL);

if (routine.getType() == SchemaObject.FUNCTION
                            || !set.add(Tokens.SAVEPOINT)) {
                        throw unexpectedToken();
                    }read();readThis(Tokens.SAVEPOINT);readThis(Tokens.LEVEL);

---------------------------Clone group no  822 for hash d45abeaf716b528b94635caca7f93e58--------------------



sessionMap.put(sessionIdCount, s);sessionIdCount++;return s;

sessionMap.put(sessionIdCount, s);sessionIdCount++;return s;

---------------------------Clone group no  823 for hash 3e2f8fda92362d6bf68786c7909c61c2--------------------



if (read == -1) {
                            return Result.newErrorResult(new EOFException());
                        }localLength -= read;count       += read;

if (read == -1) {
                        return Result.newErrorResult(new EOFException());
                    }localLength -= read;count       += read;

---------------------------Clone group no  824 for hash 0fa0f51a736352e52b605a0a877af33c--------------------



read();readThis(Tokens.TIME);readThis(Tokens.ZONE);

read();readThis(Tokens.TIME);readThis(Tokens.ZONE);

---------------------------Clone group no  825 for hash 8858554341c0caa1983adda883b0853f--------------------



//
                row[specific_catalog] = database.getCatalogName().name;row[specific_schema]  = routine.getSchemaName().name;row[specific_name]    = routine.getSpecificName().name;row[routine_catalog]  = database.getCatalogName().name;row[routine_schema]   = routine.getSchemaName().name;row[routine_name]     = routine.getName().name;

row[specific_catalog] = database.getCatalogName().name;row[specific_schema]  = routine.getSchemaName().name;row[specific_name]    = routine.getSpecificName().name;row[routine_catalog]  = database.getCatalogName().name;row[routine_schema]   = routine.getSchemaName().name;row[routine_name]     = routine.getName().name;

row[specific_catalog] = database.getCatalogName().name;row[specific_schema]  = routine.getSchemaName().name;row[specific_name]    = routine.getSpecificName().name;row[routine_catalog]  = database.getCatalogName().name;row[routine_schema]   = routine.getSchemaName().name;row[routine_name]     = routine.getName().name;

//
            row[specific_catalog] = database.getCatalogName().name;row[specific_schema]  = routine.getSchemaName().name;row[specific_name]    = routine.getSpecificName().name;row[routine_catalog]  = database.getCatalogName().name;row[routine_schema]   = routine.getSchemaName().name;row[routine_name]     = routine.getName().name;

---------------------------Clone group no  826 for hash f3691418b4c6aeffc00989d456d16cd6--------------------



int position = getPosition();read();if (token.tokenType == Tokens.NOT) {
                read();
                readThis(Tokens.EXISTS);

                ifNot = true;
            } else {
                rewind(position);
            }

int position = getPosition();read();if (token.tokenType == Tokens.NOT) {
                read();
                readThis(Tokens.EXISTS);

                ifNot = true;
            } else {
                rewind(position);
            }

---------------------------Clone group no  827 for hash 9d5d1ed49b464172e2aa5ea78e93ed74--------------------



// the tests use different indexes
            // use primary index
            sStatement.execute(\"SELECT count(*) from TEST\");rs = sStatement.getResultSet();rs.next();

sStatement.execute(\"SELECT count(*) from TEST\");rs = sStatement.getResultSet();rs.next();

---------------------------Clone group no  828 for hash 0188528a43986e86504f1f8f499a627c--------------------



row[constraint_catalog] = constraintCatalog;row[constraint_schema]  = constraintSchema;row[constraint_name]    = constraintName;try {
                                t.insertSys(session, store, row);
                            } catch (HsqlException e) {}

row[constraint_catalog] = constraintCatalog;row[constraint_schema]  = constraintSchema;row[constraint_name]    = constraintName;try {
                                t.insertSys(session, store, row);
                            } catch (HsqlException e) {}

---------------------------Clone group no  829 for hash ddcdfaeb879e0648baf6ba5036e574c3--------------------



Connection conn = newConnection();Statement  st   = conn.createStatement();st.execute(\"declare varone int default 0;\");

Connection conn = newConnection();Statement  st   = conn.createStatement();st.execute(\"declare varone int default 0;\");

---------------------------Clone group no  830 for hash 0de0eeee2b114b9c17923cf27079190b--------------------



RowSetNavigator navigator    = resultIn.getNavigator();int[]           updateCounts = new int[navigator.getSize()];for (int i = 0; i < updateCounts.length; i++) {
            Object[] data = (Object[]) navigator.getNext();

            updateCounts[i] = ((Integer) data[0]).intValue();
        }if (updateCounts.length != batchCount) {
            if (errorResult == null) {
                throw new BatchUpdateException(updateCounts);
            } else {
                errorResult.getMainString();

                throw new BatchUpdateException(errorResult.getMainString(),
                        errorResult.getSubString(),
                        errorResult.getErrorCode(), updateCounts);
            }
        }return updateCounts;

RowSetNavigator navigator    = resultIn.getNavigator();int[]           updateCounts = new int[navigator.getSize()];for (int i = 0; i < updateCounts.length; i++) {
            Object[] data = (Object[]) navigator.getNext();

            updateCounts[i] = ((Integer) data[0]).intValue();
        }if (updateCounts.length != batchCount) {
            if (errorResult == null) {
                throw new BatchUpdateException(updateCounts);
            } else {
                errorResult.getMainString();

                throw new BatchUpdateException(errorResult.getMainString(),
                        errorResult.getSubString(),
                        errorResult.getErrorCode(), updateCounts);
            }
        }return updateCounts;

---------------------------Clone group no  831 for hash 6d81e4693e6e6488b9e1291515de009e--------------------



stbuff        = stbuff.substring(nextPos);columnDef.len += nextPos;nextPos       = 0;

stbuff               = stbuff.substring(nextPos);columnDef.len        += nextPos;nextPos              = 0;

---------------------------Clone group no  832 for hash b165af34e474e6a8e9dfc81115b09193--------------------



case Types.SQL_INTEGER :case Types.SQL_SMALLINT :case Types.TINYINT :

case Types.SQL_INTEGER :case Types.SQL_SMALLINT :case Types.TINYINT :

---------------------------Clone group no  833 for hash d873f10ba5123eeb57c8574e09fa47c8--------------------



case Types.SQL_BINARY :case Types.SQL_VARBINARY :case Types.SQL_BLOB :

case Types.SQL_BINARY :case Types.SQL_VARBINARY :case Types.SQL_BLOB :

case Types.SQL_BINARY :case Types.SQL_VARBINARY :case Types.SQL_BLOB :

case Types.SQL_BINARY :case Types.SQL_VARBINARY :case Types.SQL_BLOB :

case Types.SQL_BINARY :case Types.SQL_VARBINARY :case Types.SQL_BLOB :

case Types.SQL_BINARY :case Types.SQL_VARBINARY :case Types.SQL_BLOB :

---------------------------Clone group no  834 for hash 0815435f3dde26e0000529ffd71cfa8f--------------------



final String INSERT_TIME =
            \"insert into time_test(time_test) values (?)\";// See OracleTests class why we need to select tablename.*
        final String SELECT_TIME =
            \"select time_test.* from time_test where time_test = ?\";final String DELETE_TIME =
            \"delete from time_test where time_test = ?\";

final String INSERT_TIME =
            \"insert into time_test(time_test) values (?)\";// See OracleTests class why we need to select tablename.*
        final String SELECT_TIME =
            \"select time_test.* from time_test where time_test = ?\";final String DELETE_TIME =
            \"delete from time_test where time_test = ?\";

---------------------------Clone group no  835 for hash ad2249dace067a3fdfe038e6a39bbb4c--------------------



int columnIndex = findColumn(columnLabel);startUpdate(columnIndex);preparedStatement.setClob(columnIndex, reader, length);

int columnIndex = findColumn(columnLabel);startUpdate(columnIndex);preparedStatement.setClob(columnIndex, reader, length);

---------------------------Clone group no  836 for hash 685992bf3eac1dcdd9f25b467cc93096--------------------



if (t == null) {
            return null;
        }long millis = t.getSeconds() * 1000;if (cal != null) {
            millis = HsqlDateTime.convertMillisToCalendar(cal, millis);
        }return new Date(millis);

if (t == null) {
            return null;
        }long millis = t.getSeconds() * 1000;if (cal != null) {
            millis = HsqlDateTime.convertMillisToCalendar(cal, millis);
        }return new Date(millis);

---------------------------Clone group no  837 for hash 242d59b5730376e75dea52678e2e267f--------------------



rs.next();assertEquals(\"INFORMATION_SCHEMA\", rs.getString(2));rs.close();

rs.next();assertEquals(\"INFORMATION_SCHEMA\", rs.getString(2));rs.close();

rs.next();assertEquals(\"INFORMATION_SCHEMA\", rs.getString(2));rs.close();

rs.next();assertEquals(\"INFORMATION_SCHEMA\", rs.getString(2));rs.close();

---------------------------Clone group no  838 for hash da85b699ec19a7f3ffe8374bdbb8d5c9--------------------



if (!table.isTemp()) {
                throw unexpectedToken();
            }read();readThis(Tokens.COMMIT);if (token.tokenType == Tokens.DELETE) {}
            else if (token.tokenType == Tokens.PRESERVE) {
                table.persistenceScope = TableBase.SCOPE_SESSION;
            }read();readThis(Tokens.ROWS);

if (!table.isTemp()) {
                throw unexpectedToken();
            }read();readThis(Tokens.COMMIT);if (token.tokenType == Tokens.DELETE) {}
            else if (token.tokenType == Tokens.PRESERVE) {
                table.persistenceScope = TableBase.SCOPE_SESSION;
            }read();readThis(Tokens.ROWS);

---------------------------Clone group no  839 for hash 4a1e33debc38cbb71344c56e1b7331f3--------------------



row = t.getEmptyRowData();//
                row[trigger_catalog] = database.getCatalogName().name;row[trigger_schema]  = trigger.getSchemaName().name;row[trigger_name]    = trigger.getName().name;

row                   = t.getEmptyRowData();row[trigger_catalog]  = database.getCatalogName().name;row[trigger_schema]   = trigger.getSchemaName().name;row[trigger_name]     = trigger.getName().name;

row                   = t.getEmptyRowData();row[trigger_catalog]  = database.getCatalogName().name;row[trigger_schema]   = trigger.getSchemaName().name;row[trigger_name]     = trigger.getName().name;

row                  = t.getEmptyRowData();row[trigger_catalog] = database.getCatalogName().name;row[trigger_schema]  = trigger.getSchemaName().name;row[trigger_name]    = trigger.getName().name;

row                       = t.getEmptyRowData();row[trigger_catalog]      = database.getCatalogName().name;row[trigger_schema]       = trigger.getSchemaName().name;row[trigger_name]         = trigger.getName().name;

row                       = t.getEmptyRowData();row[trigger_catalog]      = database.getCatalogName().name;row[trigger_schema]       = trigger.getSchemaName().name;row[trigger_name]         = trigger.getName().name;

---------------------------Clone group no  840 for hash bc919f98a472fd6084a96a2bdb35c5e0--------------------



read();if (token.tokenType == Tokens.BY) {
                        read();
                        readThis(Tokens.DEFAULT);
                    } else {
                        readThis(Tokens.ALWAYS);

                        generatedAlways = true;
                    }readThis(Tokens.AS);

read();if (token.tokenType == Tokens.BY) {
                read();
                readThis(Tokens.DEFAULT);
            } else {
                readThis(Tokens.ALWAYS);

                generatedAlways = true;
            }readThis(Tokens.AS);

---------------------------Clone group no  841 for hash 7335506394175c0231362f44adcfb315--------------------



read();readThis(Tokens.EXISTS);ifNot = true;

read();readThis(Tokens.EXISTS);ifNot = true;

---------------------------Clone group no  842 for hash 133c1fa50398b4364640f7f4272013be--------------------



case Tokens.YEAR :case Tokens.MONTH :case Tokens.DAY :case Tokens.HOUR :case Tokens.MINUTE :case Tokens.SECOND :

case Tokens.YEAR :case Tokens.MONTH :case Tokens.DAY :case Tokens.HOUR :case Tokens.MINUTE :case Tokens.SECOND :

---------------------------Clone group no  843 for hash 7ee3920f5cbc5f80b5302400fdcaff28--------------------



case Types.SQL_BINARY :case Types.SQL_VARBINARY :case Types.SQL_BLOB :b = (BlobData) a;break;

case Types.SQL_BINARY :case Types.SQL_VARBINARY :case Types.SQL_BLOB :b = (BlobData) a;break;

---------------------------Clone group no  844 for hash aefe4d6e4740672456a7dcb22d52e1b4--------------------



row              = t.getEmptyRowData();row[catalog]     = database.getCatalogName().name;row[schema]      = table.getSchemaName().name;row[name]        = table.getName().name;

row          = t.getEmptyRowData();row[catalog] = database.getCatalogName().name;row[schema]  = table.getSchemaName().name;row[name]    = table.getName().name;

---------------------------Clone group no  845 for hash bf2e9f856114faba85dd972a857d7bee--------------------



String s = readString();if (s == null) {
            return null;
        }s = s.trim();if (s.length() == 0) {
            return null;
        }long id = Long.parseLong(s);

String s = readString();if (s == null) {
            return null;
        }s = s.trim();if (s.length() == 0) {
            return null;
        }long id = Long.parseLong(s);

---------------------------Clone group no  846 for hash 858238975322b229ddd30bd75999dd2c--------------------



rowData      = null;currentTable = null;return;

rowData      = null;currentTable = null;return;

---------------------------Clone group no  847 for hash e1b37fbda1aba353a93f634fc840b0e5--------------------



Result result;try {
            if (subqueries.length > 0) {
                materializeSubQueries(session);
            }

            result = getResult(session);
        } catch (Throwable t) {
            result = Result.newErrorResult(t, null);
        }if (result.isError()) {
            result.getException().setStatementType(group, type);
        }return result;

Result result;try {
            if (subqueries.length > 0) {
                materializeSubQueries(session);
            }

            result = getResult(session);
        } catch (Throwable t) {
            result = Result.newErrorResult(t, null);
        }if (result.isError()) {
            result.getException().setStatementType(group, type);
        }return result;

---------------------------Clone group no  848 for hash 191ff8119def8c793f8f9cf406b65ba1--------------------



Long           lobID    = getNewLobID();ResultMetaData meta     = createLob.getParametersMetaData();Object         params[] = new Object[meta.getColumnCount()];params[LOB_IDS.LOB_ID]          = lobID;params[LOB_IDS.LOB_LENGTH]      = ValuePool.getLong(length);params[LOB_IDS.LOB_USAGE_COUNT] = ValuePool.INTEGER_0;

Long           lobID    = getNewLobID();ResultMetaData meta     = createLob.getParametersMetaData();Object         params[] = new Object[meta.getColumnCount()];params[LOB_IDS.LOB_ID]          = lobID;params[LOB_IDS.LOB_LENGTH]      = ValuePool.getLong(length);params[LOB_IDS.LOB_USAGE_COUNT] = ValuePool.INTEGER_0;

---------------------------Clone group no  849 for hash f61313d1e956b4aa6f883a55f11600ce--------------------



StringBuffer sb = new StringBuffer(128);sb.append(Tokens.T_SET).append(' ').append(Tokens.T_TABLE).append(' ');sb.append(getName().getSchemaQualifiedStatementName());

StringBuffer sb = new StringBuffer(128);sb.append(Tokens.T_SET).append(' ').append(Tokens.T_TABLE).append(' ');sb.append(getName().getSchemaQualifiedStatementName());

---------------------------Clone group no  850 for hash 898b973672baceea2c711fe4cf433314--------------------



ClobData clob =
                            session.createClob(((String) a).length());clob.setString(session, 0, (String) a);return clob;

ClobData clob = session.createClob(((String) a).length());clob.setString(session, 0, (String) a);return clob;

---------------------------Clone group no  851 for hash f2d71f6411f18a6d9d56bdda54b2d581--------------------



read();break;default :throw unexpectedToken();

read();break;default :throw unexpectedToken();

read();break;default :throw unexpectedToken();

read();break;default :throw unexpectedToken();

---------------------------Clone group no  852 for hash 745bf6a37fe726a2532b04a4fde6b6b0--------------------



long t3 = System.currentTimeMillis();System.out.println(\"inserted \" + i + \", 100 in \" + (t3 - t2));t2 = t3;

long t3 = System.currentTimeMillis();System.out.println(\"inserted \" + i + \", 100 in \" + (t3 - t2));t2 = t3;

---------------------------Clone group no  853 for hash cd95ce1c5d2ba4f729bb3c4b98cd5b0b--------------------



if (token.isMalformed) {
                return;
            }if (scanSeparator() && charAt(currentPosition) == '\\'') {
                continue;
            }break;

if (token.isMalformed) {
                return;
            }if (scanSeparator() && charAt(currentPosition) == '\\'') {
                continue;
            }break;

if (token.isMalformed) {
                return;
            }if (scanSeparator() && charAt(currentPosition) == '\\'') {
                continue;
            }break;

---------------------------Clone group no  854 for hash f86bf8d272232a596194fc9682c87b56--------------------



sb.append(Tokens.T_CONSTRAINT).append(' ');sb.append(getName().statementName);sb.append(' ');

sb.append(Tokens.T_CONSTRAINT).append(' ');sb.append(getName().statementName);sb.append(' ');

---------------------------Clone group no  855 for hash 4dc1a3acc08b131bd610914f8f64c569--------------------



writer.println(sb.toString());sb.setLength(0);writer.flush();

writer.println(sb.toString());sb.setLength(0);writer.flush();

writer.println(sb.toString());sb.setLength(0);writer.flush();

---------------------------Clone group no  856 for hash 7a3a570a701cb5c20cfb6b2a5afb745f--------------------



Result rs  = sys.executeDirectStatement(sql);t.insertSys(session, store, rs);return t;

Result rs  = sys.executeDirectStatement(sql);t.insertSys(session, store, rs);return t;

Result rs  = sys.executeDirectStatement(sql);t.insertSys(session, store, rs);return t;

Result rs  = sys.executeDirectStatement(sql);t.insertSys(session, store, rs);return t;

Result rs  = sys.executeDirectStatement(sql);t.insertSys(session, store, rs);return t;

---------------------------Clone group no  857 for hash 7a1b9e99a386e2d2b000597bb5f2405c--------------------



it.reset();currentIndex--;continue;

it.reset();currentIndex--;continue;

---------------------------Clone group no  858 for hash 285b7c86ccb8eff9ddd02389d451baa9--------------------



newnode.nNext  = backnode.nNext;backnode.nNext = newnode;return newnode;

newnode.nNext  = backnode.nNext;backnode.nNext = newnode;return newnode;

---------------------------Clone group no  859 for hash a49d140cbf7c109e195ad6db31ad4bc9--------------------



currentRow = it.getNextRow();if (currentRow == null) {
                    break;
                }currentData = currentRow.getData();

currentRow = it.getNextRow();if (currentRow == null) {
                    break;
                }currentData = currentRow.getData();

---------------------------Clone group no  860 for hash 37a6177e2805f4b97934d1566af2b720--------------------



token.tokenString = Tokens.T_NOT_EQUALS;token.tokenType   = Tokens.NOT_EQUALS;currentPosition   += 2;token.isDelimiter = true;return;

token.tokenString = Tokens.T_NOT_EQUALS;token.tokenType   = Tokens.NOT_EQUALS;currentPosition   += 2;token.isDelimiter = true;return;

---------------------------Clone group no  861 for hash c2d4a884299f023b0a1e086b36b998c2--------------------



break;case Types.SQL_INTERVAL_DAY :case Types.SQL_INTERVAL_DAY_TO_HOUR :case Types.SQL_INTERVAL_DAY_TO_MINUTE :case Types.SQL_INTERVAL_DAY_TO_SECOND :

break;case Types.SQL_INTERVAL_DAY :case Types.SQL_INTERVAL_DAY_TO_HOUR :case Types.SQL_INTERVAL_DAY_TO_MINUTE :case Types.SQL_INTERVAL_DAY_TO_SECOND :

break;case Types.SQL_INTERVAL_DAY :case Types.SQL_INTERVAL_DAY_TO_HOUR :case Types.SQL_INTERVAL_DAY_TO_MINUTE :case Types.SQL_INTERVAL_DAY_TO_SECOND :

break;case Types.SQL_INTERVAL_DAY :case Types.SQL_INTERVAL_DAY_TO_HOUR :case Types.SQL_INTERVAL_DAY_TO_MINUTE :case Types.SQL_INTERVAL_DAY_TO_SECOND :

---------------------------Clone group no  862 for hash 395aaaad99afa5af39855bca8c5c8842--------------------



escapeCount++;newArray[j++] = array[i];wasEscape     = false;continue;

escapeCount++;newArray[j++] = array[i];wasEscape     = false;continue;

---------------------------Clone group no  863 for hash f7bd11a8fd3ae5085213531904e378a3--------------------



break;case SchemaObject.INDEX :set = schema.indexLookup;break;case SchemaObject.CONSTRAINT :

break;case SchemaObject.INDEX :set = schema.indexLookup;break;case SchemaObject.CONSTRAINT :

---------------------------Clone group no  864 for hash e24f0fb4ca826affc3bdb93da7e1ebc8--------------------



preparedTestOne(runs);// drop the test table and shut down database
        println(drop_table_sql);stmnt.execute(drop_table_sql);println(\"---------------------------------------\");println(\"shutting down database\");stmnt.execute(shutdown_sql);println(\"---------------------------------------\");// get the connection and statement
        conn  = DriverManager.getConnection(url, \"SA\", \"\");stmnt = conn.createStatement();println(\"\");println(\"***************************************\");

preparedTestOne(runs);// drop the test table and shut down database
        println(drop_table_sql);stmnt.execute(drop_table_sql);println(\"---------------------------------------\");println(\"shutting down database\");stmnt.execute(shutdown_sql);println(\"---------------------------------------\");// get the connection and statement
        conn  = DriverManager.getConnection(url, \"SA\", \"\");stmnt = conn.createStatement();println(\"\");println(\"***************************************\");

---------------------------Clone group no  865 for hash 37a9902712632e5ce5352cf769845bab--------------------



for (int i = 0; i < headerArray.length; i++) {
                            condlPrint(\"<TH>\"
                                    + SqlFile.escapeHtml(headerArray[i])
                                    + \"</TH>\", true);
                            condlPrint(((i > 0) ? \"  \" : \"\")
                                    + ((i < headerArray.length - 1
                                        || rightJust[i])
                                       ? StringUtil.toPaddedString(
                                         headerArray[i], maxWidth[i],
                                         ' ', !rightJust[i])
                                       : headerArray[i])
                                    , false);
                        }condlPrintln(LS + PRE_TR + \"</TR>\", true);condlPrintln(\"\", false);

for (int i = 0; i < headerArray.length; i++) {
                condlPrint(\"<TH>\"
                        + SqlFile.escapeHtml(headerArray[i]) + \"</TH>\", true);
                condlPrint(((i > 0) ? \"  \" : \"\")
                        + ((i < headerArray.length - 1 || rightJust[i])
                           ? StringUtil.toPaddedString(
                             headerArray[i], maxWidth[i], ' ', !rightJust[i])
                           : headerArray[i])
                        , false);
            }condlPrintln(LS + PRE_TR + \"</TR>\", true);condlPrintln(\"\", false);

---------------------------Clone group no  866 for hash 400c9a823eccd22c7eb4834841e55c73--------------------



NodeAVL x = getAccessor(store);NodeAVL l = x;while (l != null) {
                x = l;
                l = x.getLeft(store);
            }

NodeAVL x = getAccessor(store);NodeAVL l = x;while (l != null) {
                x = l;
                l = x.getLeft(store);
            }

---------------------------Clone group no  867 for hash a7d7ad24d3585a029820729d34571478--------------------



int columnIndex = findColumn(columnLabel);startUpdate(columnIndex);preparedStatement.setClob(columnIndex, reader);

int columnIndex = findColumn(columnLabel);startUpdate(columnIndex);preparedStatement.setClob(columnIndex, reader);

---------------------------Clone group no  868 for hash f94dac05f76807834dffe8dffb52a17b--------------------



System.getProperties().put(\"sun.java2d.noddraw\", \"true\");// (ulrivo): read all arguments from the command line
        String  currentArg;String  lowerArg;String  urlid        = null;String  rcFile       = null;boolean autoConnect  = false;boolean urlidConnect = false;bMustExit = true;

System.getProperties().put(\"sun.java2d.noddraw\", \"true\");// (ulrivo): read all arguments from the command line
        String  currentArg;String  lowerArg;String  urlid        = null;String  rcFile       = null;boolean autoConnect  = false;boolean urlidConnect = false;bMustExit = true;

---------------------------Clone group no  869 for hash 952850bee844a0ed0162cd5d5c3ae6fc--------------------



if (table == null) {
            throw JDBCUtil.nullArgument(\"table\");
        }/*
        if (wantsIsNull(columnNamePattern)) {
            return executeSelect(\"SYSTEM_COLUMNPRIVILEGES\", \"0=1\");
        }
*/
        catalog = translateCatalog(catalog);schema  = translateSchema(schema);

if (table == null) {
            throw JDBCUtil.nullArgument(\"table\");
        }catalog = translateCatalog(catalog);schema  = translateSchema(schema);

if (table == null) {
            throw JDBCUtil.nullArgument(\"table\");
        }catalog = translateCatalog(catalog);schema  = translateSchema(schema);

if (table == null) {
            throw JDBCUtil.nullArgument(\"table\");
        }catalog = translateCatalog(catalog);schema  = translateSchema(schema);

if (table == null) {
            throw JDBCUtil.nullArgument(\"table\");
        }catalog = translateCatalog(catalog);schema  = translateSchema(schema);

if (table == null) {
            throw JDBCUtil.nullArgument(\"table\");
        }catalog = translateCatalog(catalog);schema  = translateSchema(schema);

---------------------------Clone group no  870 for hash 050ac3a7148dee58a561f58865abfac4--------------------



row                = t.getEmptyRowData();pName              = (String) l.get(i);row[icat]          = cat;row[ischem]        = schem;

row             = t.getEmptyRowData();pName           = (String) l.get(i);row[icat]       = cat;row[ischem]     = schem;

---------------------------Clone group no  871 for hash a1e036f3dd5ebab8f6b7b2238df9035e--------------------



String ddl0 = \"DROP TABLE CLOBTEST IF EXISTS\";String ddl1 =
                \"CREATE TABLE CLOBTEST(ID IDENTITY, CLOBFIELD CLOB(100000))\";statement.execute(ddl0);statement.execute(ddl1);

String ddl0 = \"DROP TABLE CLOBTEST IF EXISTS\";String ddl1 =
                \"CREATE TABLE CLOBTEST(ID IDENTITY, CLOBFIELD CLOB(100000))\";statement.execute(ddl0);statement.execute(ddl1);

String ddl0 = \"DROP TABLE CLOBTEST IF EXISTS\";String ddl1 =
                \"CREATE TABLE CLOBTEST(ID IDENTITY, CLOBFIELD CLOB(100000))\";statement.execute(ddl0);statement.execute(ddl1);

---------------------------Clone group no  872 for hash e39a2ae9125d79d4dfd269e0d07852a6--------------------



ColumnSchema column =
                            table.getColumn(c.notNullColumnIndex);column.setNullable(false);table.setColumnTypeVars(c.notNullColumnIndex);

ColumnSchema column = table.getColumn(c.notNullColumnIndex);column.setNullable(false);table.setColumnTypeVars(c.notNullColumnIndex);

---------------------------Clone group no  873 for hash 57e8dd69c85ab0917f519046527adbb2--------------------



st = netConn.createStatement();rs = st.executeQuery(\"SELECT * FROM alltypes WHERE id in (1, 2)\");assertTrue(\"Got no rows with id in (1, 2)\", rs.next());assertTrue(\"Got only one row with id in (1, 2)\", rs.next());

st = netConn.createStatement();rs = st.executeQuery(\"SELECT * FROM alltypes WHERE id in (1, 2)\");assertTrue(\"Got no rows with id in (1, 2)\", rs.next());assertTrue(\"Got only one row with id in (1, 2)\", rs.next());

---------------------------Clone group no  874 for hash 3e8bdcd9d9b69c8a40fdd90bf337a616--------------------



//
        // intermediate holders
        Iterator tables;Table    table;Object[] row;// Initialization
        tables =
            database.schemaManager.databaseObjectIterator(SchemaObject.TABLE);

//
        Iterator tables;Table    table;Object[] row;tables =
            database.schemaManager.databaseObjectIterator(SchemaObject.TABLE);

//
        Iterator tables;Table    table;Object[] row;// Initialization
        tables =
            database.schemaManager.databaseObjectIterator(SchemaObject.TABLE);

---------------------------Clone group no  875 for hash 427b976e7b687c99714cb91ddece0d54--------------------



case Types.SQL_VARBINARY :case Types.SQL_VARCHAR :case Types.SQL_NVARCHAR :

case Types.SQL_VARBINARY :case Types.SQL_VARCHAR :case Types.SQL_NVARCHAR :

---------------------------Clone group no  876 for hash 9a5237d714de8041cea926821c5a546d--------------------



readThis(Tokens.OPENBRACKET);TableDerived td =
                    XreadSubqueryTableBody(OpTypes.TABLE_SUBQUERY);readThis(Tokens.CLOSEBRACKET);

readThis(Tokens.OPENBRACKET);TableDerived td = XreadSubqueryTableBody(OpTypes.TABLE_SUBQUERY);readThis(Tokens.CLOSEBRACKET);

readThis(Tokens.OPENBRACKET);TableDerived td = XreadSubqueryTableBody(OpTypes.TABLE_SUBQUERY);readThis(Tokens.CLOSEBRACKET);

---------------------------Clone group no  877 for hash e480b23ae15f30b21779e1ce9aa41b07--------------------



aOffset++;bOffset++;if (aOffset == aAddresses[aIndex][LOBS.BLOCK_COUNT]) {
                aOffset = 0;

                aIndex++;
            }if (bOffset == bAddresses[bIndex][LOBS.BLOCK_COUNT]) {
                bOffset = 0;

                bIndex++;
            }if (aIndex == aAddresses.length) {
                break;
            }if (bIndex == bAddresses.length) {
                break;
            }

aOffset++;bOffset++;if (aOffset == aAddresses[aIndex][LOBS.BLOCK_COUNT]) {
                aOffset = 0;

                aIndex++;
            }if (bOffset == bAddresses[bIndex][LOBS.BLOCK_COUNT]) {
                bOffset = 0;

                bIndex++;
            }if (aIndex == aAddresses.length) {
                break;
            }if (bIndex == bAddresses.length) {
                break;
            }

---------------------------Clone group no  878 for hash 23c0313dec3c97cac84703d5c503b068--------------------



case SchemaObject.COLLATION :case SchemaObject.PROCEDURE :case SchemaObject.FUNCTION :case SchemaObject.SPECIFIC_ROUTINE :case SchemaObject.ASSERTION :

case SchemaObject.COLLATION :case SchemaObject.PROCEDURE :case SchemaObject.FUNCTION :case SchemaObject.SPECIFIC_ROUTINE :case SchemaObject.ASSERTION :

---------------------------Clone group no  879 for hash 7c51eecadd058d0b5d3b36c533ddf2a1--------------------



TimestampData ts     = (TimestampData) dateTime;Calendar      cal    = session.getCalendarGMT();long          millis = (ts.getSeconds() + ts.getZone()) * 1000;

TimestampData ts     = (TimestampData) dateTime;Calendar      cal    = session.getCalendarGMT();long          millis = (ts.getSeconds() + ts.getZone()) * 1000;

---------------------------Clone group no  880 for hash ff28234481f0acbc0ce5920fb030851c--------------------



guardian  = connect(url, user, password);checkSums(guardian);connectClose(guardian);

guardian = connect(url, user, password);checkSums(guardian);connectClose(guardian);

---------------------------Clone group no  881 for hash af7104452ce2cce8ee4d12f20726ae91--------------------



case StatementTypes.LOOP :case StatementTypes.WHILE :case StatementTypes.REPEAT :

case StatementTypes.LOOP :case StatementTypes.WHILE :case StatementTypes.REPEAT :

---------------------------Clone group no  882 for hash 4612c24ca103afeb70549ee7026c81af--------------------



escapeCount++;newArray[j++] = array[i];wasEscape     = false;continue;

escapeCount++;newArray[j++] = array[i];wasEscape     = false;continue;

---------------------------Clone group no  883 for hash d89148579d94ef00832aadfc6dc19d7f--------------------



final int table_catalog    = 0;final int table_schema     = 1;final int table_name       = 2;final int column_name      = 3;

// column number mappings
        final int table_catalog      = 0;final int table_schema       = 1;final int table_name         = 2;final int column_name        = 3;

---------------------------Clone group no  884 for hash 746982f9f20250728bc38dd6f69c91fd--------------------



OrderedHashSet tableSet          = new OrderedHashSet();OrderedHashSet constraintNameSet = new OrderedHashSet();OrderedHashSet indexNameSet      = new OrderedHashSet();

OrderedHashSet tableSet          = new OrderedHashSet();OrderedHashSet constraintNameSet = new OrderedHashSet();OrderedHashSet indexNameSet      = new OrderedHashSet();

---------------------------Clone group no  885 for hash 6f70088af30cd1545d99a2be3f99a916--------------------



row[data_type] = \"INTERVAL\";row[interval_type] =
                        ((IntervalType) type).getQualifier(type.typeCode);row[interval_precision] =
                        ValuePool.getLong(type.precision);row[datetime_precision] = ValuePool.getLong(type.scale);

row[data_type] = \"INTERVAL\";row[interval_type] =
                    ((IntervalType) type).getQualifier(type.typeCode);row[interval_precision] = ValuePool.getLong(type.precision);row[datetime_precision] = ValuePool.getLong(type.scale);

row[data_type] = \"INTERVAL\";row[interval_type] =
                ((IntervalType) type).getQualifier(type.typeCode);row[interval_precision] = ValuePool.getLong(type.precision);row[datetime_precision] = ValuePool.getLong(type.scale);

row[data_type] = \"INTERVAL\";row[interval_type] =
                            ((IntervalType) type).getQualifier(type.typeCode);row[interval_precision] =
                            ValuePool.getLong(type.precision);row[datetime_precision] =
                            ValuePool.getLong(type.scale);

row[data_type] = \"INTERVAL\";row[interval_type] =
                        ((IntervalType) type).getQualifier(type.typeCode);row[interval_precision] =
                        ValuePool.getLong(type.precision);row[datetime_precision] = ValuePool.getLong(type.scale);

row[data_type] = \"INTERVAL\";row[interval_type] =
                    ((IntervalType) type).getQualifier(type.typeCode);row[interval_precision] = ValuePool.getLong(type.precision);row[datetime_precision] = ValuePool.getLong(type.scale);

---------------------------Clone group no  886 for hash f2a1926f517aa7bd2cb71645b9f26e91--------------------



readThis(Tokens.TYPE);int type = TableBase.MEMORY_TABLE;switch (token.tokenType) {

                    case Tokens.MEMORY :
                        break;

                    case Tokens.CACHED :
                        type = TableBase.CACHED_TABLE;
                        break;

                    default :
                        throw unexpectedToken();
                }read();Object[] args = new Object[]{ ValuePool.getInt(type) };return new StatementCommand(
                    StatementTypes.SET_DATABASE_DEFAULT_TABLE_TYPE, args);

readThis(Tokens.TYPE);int type = TableBase.MEMORY_TABLE;switch (token.tokenType) {

                    case Tokens.MEMORY :
                        break;

                    case Tokens.CACHED :
                        type = TableBase.CACHED_TABLE;
                        break;

                    default :
                        throw unexpectedToken();
                }read();Object[] args = new Object[]{ ValuePool.getInt(type) };return new StatementCommand(
                    StatementTypes.SET_DATABASE_DEFAULT_TABLE_TYPE, args);

---------------------------Clone group no  887 for hash d7f213531213828268fea531c7b7d81d--------------------



rowNum++;Object[] rowData = navigator.getCurrent();// Row.getData().  Don't know why *Data.getCurrent()
                            //                 method returns Object instead of O[].
                            //  TODO:  Remove the assertion here:
                            if (rowData == null) {
                                throw new RecoverableOdbcFailure(\"Null row?\");
                            }

rowNum++;Object[] rowData = navigator.getCurrent();if (rowData == null) {
                            throw new RecoverableOdbcFailure(\"Null row?\");
                        }

---------------------------Clone group no  888 for hash a73cd40a36a257cfe0ad39d242a656ad--------------------



isTransactionStatement    = false;setDatabseObjects(session, compileContext);checkAccessRights(session);

isTransactionStatement = false;setDatabseObjects(session, compileContext);checkAccessRights(session);

isTransactionStatement = false;setDatabseObjects(session, compileContext);checkAccessRights(session);

---------------------------Clone group no  889 for hash 8a7068778ef501a6e2882c7c84ed5113--------------------



Object[] row = new Object[indexLimit];row[indexName]         = name;row[indexType]         = ValuePool.getInt(type);row[indexClass]        = \"Integer\";row[indexDefaultValue] = ValuePool.getInt(defaultValue);

Object[] row = new Object[indexLimit];row[indexName]         = name;row[indexType]         = ValuePool.getInt(type);row[indexClass]        = \"Integer\";row[indexDefaultValue] = ValuePool.getInt(defaultValue);

---------------------------Clone group no  890 for hash 9d276e039d62d9d740019eae2b423918--------------------



ref.add(new StringRefAddr(\"database\", getDatabase()));ref.add(new StringRefAddr(\"user\", getUser()));ref.add(new StringRefAddr(\"password\", password));ref.add(new StringRefAddr(\"loginTimeout\",
                                  Integer.toString(loginTimeout)));return ref;

ref.add(new StringRefAddr(\"database\", getDatabase()));ref.add(new StringRefAddr(\"user\", getUser()));ref.add(new StringRefAddr(\"password\", password));ref.add(new StringRefAddr(\"loginTimeout\",
                                  Integer.toString(loginTimeout)));return ref;

ref.add(new StringRefAddr(\"database\", getDatabase()));ref.add(new StringRefAddr(\"user\", getUser()));ref.add(new StringRefAddr(\"password\", password));ref.add(new StringRefAddr(\"loginTimeout\",
                                  Integer.toString(loginTimeout)));return ref;

---------------------------Clone group no  891 for hash 352ed3fb74a724058d2c1370e42345a7--------------------



if (accessCount > ACCESS_MAX) {
                    resetAccessCount();
                }accessTable[lookup] = accessCount++;return testValue;

if (accessCount > ACCESS_MAX) {
            resetAccessCount();
        }accessTable[lookup] = accessCount++;return testValue;

---------------------------Clone group no  892 for hash c8c8734787194b260bde30bd3d1f8db5--------------------



case Types.TINYINT :case Types.SQL_SMALLINT :case Types.SQL_INTEGER :case Types.SQL_BIGINT :case Types.SQL_REAL :case Types.SQL_FLOAT :case Types.SQL_DOUBLE :case Types.SQL_NUMERIC :case Types.SQL_DECIMAL :

case Types.TINYINT :case Types.SQL_SMALLINT :case Types.SQL_INTEGER :case Types.SQL_BIGINT :case Types.SQL_REAL :case Types.SQL_FLOAT :case Types.SQL_DOUBLE :case Types.SQL_NUMERIC :case Types.SQL_DECIMAL :

case Types.TINYINT :case Types.SQL_SMALLINT :case Types.SQL_INTEGER :case Types.SQL_BIGINT :case Types.SQL_REAL :case Types.SQL_FLOAT :case Types.SQL_DOUBLE :case Types.SQL_NUMERIC :case Types.SQL_DECIMAL :

case Types.TINYINT :case Types.SQL_SMALLINT :case Types.SQL_INTEGER :case Types.SQL_BIGINT :case Types.SQL_REAL :case Types.SQL_FLOAT :case Types.SQL_DOUBLE :case Types.SQL_NUMERIC :case Types.SQL_DECIMAL :

case Types.TINYINT :case Types.SQL_SMALLINT :case Types.SQL_INTEGER :case Types.SQL_BIGINT :case Types.SQL_REAL :case Types.SQL_FLOAT :case Types.SQL_DOUBLE :case Types.SQL_NUMERIC :case Types.SQL_DECIMAL :

---------------------------Clone group no  893 for hash 5b58a5cec5f9d853a2aea6a84897c8ae--------------------



this.name          = name;constType          = type;mainColSet         = mainCols;

this.name  = name;constType  = type;mainColSet = mainCols;

---------------------------Clone group no  894 for hash 031353876d3ee14c8b96f603d47eddbf--------------------



PreparedStatement ps = connection.prepareStatement(dml0);connection.setAutoCommit(false);//
            JDBCClob dataClob =
                new JDBCClob(\"the quick brown fox jumps on the lazy dog\");Reader    reader = null;StopWatch sw     = new StopWatch();sw.start();

PreparedStatement ps = connection.prepareStatement(dml0);connection.setAutoCommit(false);//
            JDBCClob dataClob =
                new JDBCClob(\"the quick brown fox jumps on the lazy dog\");Reader    reader = null;StopWatch sw     = new StopWatch();sw.start();

---------------------------Clone group no  895 for hash 150cbfd7a59adad545b5ef2537a333e8--------------------



sb.append('\\n');sb.append(']');return sb.toString();

sb.append('\\n');sb.append(']');return sb.toString();

---------------------------Clone group no  896 for hash 1118f14a679e0a412aab097c28b53433--------------------



case Types.SQL_REAL :case Types.SQL_FLOAT :case Types.SQL_DOUBLE :

case Types.SQL_REAL :case Types.SQL_FLOAT :case Types.SQL_DOUBLE :

case Types.SQL_REAL :case Types.SQL_FLOAT :case Types.SQL_DOUBLE :

case Types.SQL_REAL :case Types.SQL_FLOAT :case Types.SQL_DOUBLE :

case Types.SQL_REAL :case Types.SQL_FLOAT :case Types.SQL_DOUBLE :

case Types.SQL_REAL :case Types.SQL_FLOAT :case Types.SQL_DOUBLE :

case Types.SQL_REAL :case Types.SQL_FLOAT :case Types.SQL_DOUBLE :

case Types.SQL_REAL :case Types.SQL_FLOAT :case Types.SQL_DOUBLE :

case Types.SQL_REAL :case Types.SQL_FLOAT :case Types.SQL_DOUBLE :

case Types.SQL_REAL :case Types.SQL_FLOAT :case Types.SQL_DOUBLE :

// fall through
            case Types.SQL_REAL :case Types.SQL_FLOAT :case Types.SQL_DOUBLE :

case Types.SQL_REAL :case Types.SQL_FLOAT :case Types.SQL_DOUBLE :

case Types.SQL_REAL :case Types.SQL_FLOAT :case Types.SQL_DOUBLE :

case Types.SQL_REAL :case Types.SQL_FLOAT :case Types.SQL_DOUBLE :

case Types.SQL_REAL :case Types.SQL_FLOAT :case Types.SQL_DOUBLE :

case Types.SQL_REAL :case Types.SQL_FLOAT :case Types.SQL_DOUBLE :

case Types.SQL_REAL :case Types.SQL_FLOAT :case Types.SQL_DOUBLE :

case Types.SQL_REAL :case Types.SQL_FLOAT :case Types.SQL_DOUBLE :

case Types.SQL_REAL :case Types.SQL_FLOAT :case Types.SQL_DOUBLE :

case Types.SQL_REAL :case Types.SQL_FLOAT :case Types.SQL_DOUBLE :

case Types.SQL_REAL :case Types.SQL_FLOAT :case Types.SQL_DOUBLE :

case Types.SQL_REAL :case Types.SQL_FLOAT :case Types.SQL_DOUBLE :

case Types.SQL_REAL :case Types.SQL_FLOAT :case Types.SQL_DOUBLE :

case Types.SQL_REAL :case Types.SQL_FLOAT :case Types.SQL_DOUBLE :

case Types.SQL_REAL :case Types.SQL_FLOAT :case Types.SQL_DOUBLE :

case Types.SQL_REAL :case Types.SQL_FLOAT :case Types.SQL_DOUBLE :

case Types.SQL_REAL :case Types.SQL_FLOAT :case Types.SQL_DOUBLE :

case Types.SQL_REAL :case Types.SQL_FLOAT :case Types.SQL_DOUBLE :

case Types.SQL_REAL :case Types.SQL_FLOAT :case Types.SQL_DOUBLE :

case Types.SQL_REAL :case Types.SQL_FLOAT :case Types.SQL_DOUBLE :

case Types.SQL_REAL :case Types.SQL_FLOAT :case Types.SQL_DOUBLE :

case Types.SQL_REAL :case Types.SQL_FLOAT :case Types.SQL_DOUBLE :

case Types.SQL_REAL :case Types.SQL_FLOAT :case Types.SQL_DOUBLE :

case Types.SQL_REAL :case Types.SQL_FLOAT :case Types.SQL_DOUBLE :

case Types.SQL_REAL :case Types.SQL_FLOAT :case Types.SQL_DOUBLE :

case Types.SQL_REAL :case Types.SQL_FLOAT :case Types.SQL_DOUBLE :

case Types.SQL_REAL :case Types.SQL_FLOAT :case Types.SQL_DOUBLE :

---------------------------Clone group no  897 for hash 1511cb4d36b8c70c095a6281c6960826--------------------



Panel p = new Panel();p.setBackground(SystemColor.control);p.setLayout(new BorderLayout());p.add(\"Center\", center);

Panel p = new Panel();p.setBackground(SystemColor.control);p.setLayout(new BorderLayout());p.add(\"Center\", center);

---------------------------Clone group no  898 for hash 479d963e033fdabff75568a48cd55635--------------------



case SchemaObject.COLUMN :case SchemaObject.CONSTRAINT :case SchemaObject.INDEX :

case SchemaObject.COLUMN :case SchemaObject.CONSTRAINT :case SchemaObject.INDEX :

case SchemaObject.COLUMN :case SchemaObject.CONSTRAINT :case SchemaObject.INDEX :

---------------------------Clone group no  899 for hash 359f0c42155b7b7d571955503b36e9af--------------------



temp = x;x    = x.getParent(store);depth--;

temp = x;x    = x.getParent(store);depth--;

---------------------------Clone group no  900 for hash ed31fdfc19e0e6515afab49e6d484e70--------------------



isTransactionStatement = false;isLogged               = false;break;

isTransactionStatement = false;isLogged               = false;break;

isTransactionStatement = false;isLogged               = false;break;

isTransactionStatement = false;isLogged               = false;break;

---------------------------Clone group no  901 for hash 0a57f56a72a264857ee0f2600c02c323--------------------



int    i = all.indexOf(';');String sql;if (i != -1) {
                sql = all.substring(0, i);
                all = all.substring(i + 1);
            } else {
                sql = all;
                all = \"\";
            }if (sql.startsWith(\"--#\")) {
                max = Integer.parseInt(sql.substring(3));

                continue;
            } else if (sql.startsWith(\"--\")) {
                continue;
            }g[2] = sql;long l = 0;

int    i = all.indexOf(';');String sql;if (i != -1) {
                sql = all.substring(0, i);
                all = all.substring(i + 1);
            } else {
                sql = all;
                all = \"\";
            }if (sql.startsWith(\"--#\")) {
                max = Integer.parseInt(sql.substring(3));

                continue;
            } else if (sql.startsWith(\"--\")) {
                continue;
            }g[2] = sql;long l = 0;

---------------------------Clone group no  902 for hash d1ac60852957e59f07bc60ed5da95538--------------------



RangeGroup[]  rangeGroups         = new RangeGroup[1];rangeGroups[0] = context == null ? routine
                                         : context;compileContext.setOuterRanges(rangeGroups);

RangeGroup[] rangeGroups = new RangeGroup[1];rangeGroups[0] = context == null ? routine
                                         : context;compileContext.setOuterRanges(rangeGroups);

RangeGroup[] rangeGroups = new RangeGroup[1];rangeGroups[0] = context == null ? routine
                                         : context;compileContext.setOuterRanges(rangeGroups);

---------------------------Clone group no  903 for hash accf5508c45941cdab342237b19f2e15--------------------



row[numeric_precision] = ValuePool.getLong(
                        ((NumberType) type).getNumericPrecisionInRadix());row[declared_numeric_precision] = ValuePool.getLong(
                        ((NumberType) type).getNumericPrecisionInRadix());if (type.isExactNumberType()) {
                        row[numeric_scale] = row[declared_numeric_scale] =
                            ValuePool.getLong(type.scale);
                    }row[numeric_precision_radix] =
                        ValuePool.getLong(type.getPrecisionRadix());

row[numeric_precision] = ValuePool.getLong(
                    ((NumberType) type).getNumericPrecisionInRadix());row[declared_numeric_precision] = ValuePool.getLong(
                    ((NumberType) type).getNumericPrecisionInRadix());if (type.isExactNumberType()) {
                    row[numeric_scale] = row[declared_numeric_scale] =
                        ValuePool.getLong(type.scale);
                }row[numeric_precision_radix] =
                    ValuePool.getLong(type.getPrecisionRadix());

row[numeric_precision] = ValuePool.getLong(
                ((NumberType) type).getNumericPrecisionInRadix());row[declared_numeric_precision] = ValuePool.getLong(
                ((NumberType) type).getNumericPrecisionInRadix());if (type.isExactNumberType()) {
                row[numeric_scale] = row[declared_numeric_scale] =
                    ValuePool.getLong(type.scale);
            }row[numeric_precision_radix] =
                ValuePool.getLong(type.getPrecisionRadix());

row[numeric_precision] = ValuePool.getLong(
                        ((NumberType) type).getNumericPrecisionInRadix());row[declared_numeric_precision] = ValuePool.getLong(
                        ((NumberType) type).getNumericPrecisionInRadix());if (type.isExactNumberType()) {
                        row[numeric_scale] = row[declared_numeric_scale] =
                            ValuePool.getLong(type.scale);
                    }row[numeric_precision_radix] =
                        ValuePool.getLong(type.getPrecisionRadix());

row[numeric_precision] = ValuePool.getLong(
                    ((NumberType) type).getNumericPrecisionInRadix());row[declared_numeric_precision] = ValuePool.getLong(
                    ((NumberType) type).getNumericPrecisionInRadix());if (type.isExactNumberType()) {
                    row[numeric_scale] = row[declared_numeric_scale] =
                        ValuePool.getLong(type.scale);
                }row[numeric_precision_radix] =
                    ValuePool.getLong(type.getPrecisionRadix());

---------------------------Clone group no  904 for hash feb3a82f6c752e817d177678829b277c--------------------



table       = (Table) tables.next();columnCount = table.getColumnCount();tableName   = table.getName();

table       = (Table) tables.next();columnCount = table.getColumnCount();tableName   = table.getName();

---------------------------Clone group no  905 for hash c32d510b16f57522414c36905a403bfa--------------------



ps.setBlob(1, blob);ps.executeUpdate();data[4] = 50;blob    = new JDBCBlob(data);ps.setBlob(1, blob);ps.executeUpdate();ps.close();

ps.setBlob(1, blob);ps.executeUpdate();data[4] = 50;blob    = new JDBCBlob(data);ps.setBlob(1, blob);ps.executeUpdate();ps.close();

---------------------------Clone group no  906 for hash 595cc081e2572dd414c287c00a4b23b5--------------------



componentStreams = new InputStreamInterface[componentFiles.length];existList        = new boolean[componentFiles.length];ignoreList       = new boolean[componentFiles.length];

componentStreams = new InputStreamInterface[componentFiles.length];existList        = new boolean[componentFiles.length];ignoreList       = new boolean[componentFiles.length];

---------------------------Clone group no  907 for hash 0e204768306a2d14476e52a5c102246f--------------------



if (accessCount > ACCESS_MAX) {
                    resetAccessCount();
                }accessTable[lookup] = accessCount++;return testValue;

if (accessCount > ACCESS_MAX) {
            resetAccessCount();
        }accessTable[lookup] = accessCount++;return testValue;

---------------------------Clone group no  908 for hash 38d5ddd83ad621f423810908143c5714--------------------



Iterator tables;Table    table;Object[] row;// column number mappings
        final int grantor        = 0;final int grantee        = 1;final int table_catalog  = 2;final int table_schema   = 3;final int table_name     = 4;

// intermediate holders
        Iterator tables;Table    table;Object[] row;// column number mappings
        final int grantor        = 0;final int grantee        = 1;final int table_catalog  = 2;final int table_schema   = 3;final int table_name     = 4;

---------------------------Clone group no  909 for hash 6d163ea304b194dcbd1b978230fa0a35--------------------



// small rows
                long nextrandom   = randomgen.nextLong();int  randomlength = (int) nextrandom & 0x7f;if (randomlength > filler.length()) {
                    randomlength = filler.length();
                }String varfiller = filler.substring(0, randomlength);

long nextrandom   = randomgen.nextLong();int  randomlength = (int) nextrandom & 0x7f;if (randomlength > filler.length()) {
                randomlength = filler.length();
            }String varfiller = filler.substring(0, randomlength);

---------------------------Clone group no  910 for hash 4afc55f86a3724d37d05db8861a7e6e1--------------------



case ACTION_INSERT_DELETE :setAsDeleteFinal(timestamp);break;

case ACTION_INSERT_DELETE :setAsDeleteFinal(timestamp);break;

---------------------------Clone group no  911 for hash 22bf0ec4f3778fff4cb38640638bb116--------------------



sw.zero();for (int j = 0; j < count; j++) {
                for (int i = 0; i < sNumeric.length; i++) {
                    int r = randomgen.nextInt(sNumeric.length);

                    doubleIntLookup.findFirstEqualKeyIndex(r);

                    dummy += r;
                }
            }System.out.println(\"DoubleIntTable Lookup \" + sw.elapsedTime());sw.zero();

sw.zero();for (int j = 0; j < count; j++) {
                for (int i = 0; i < sNumeric.length; i++) {
                    int r = randomgen.nextInt(sNumeric.length);

                    doubleIntLookup.findFirstEqualKeyIndex(r);

                    dummy += r;
                }
            }System.out.println(\"DoubleIntTable Lookup \" + sw.elapsedTime());sw.zero();

---------------------------Clone group no  912 for hash 6ce303bde8c7029769cd72c48bb94622--------------------



case Types.TINYINT :case Types.SQL_SMALLINT :case Types.SQL_INTEGER :case Types.SQL_BIGINT :

case Types.TINYINT :case Types.SQL_SMALLINT :case Types.SQL_INTEGER :case Types.SQL_BIGINT :

case Types.TINYINT :case Types.SQL_SMALLINT :case Types.SQL_INTEGER :case Types.SQL_BIGINT :

case Types.TINYINT :case Types.SQL_SMALLINT :case Types.SQL_INTEGER :case Types.SQL_BIGINT :

case Types.TINYINT :case Types.SQL_SMALLINT :case Types.SQL_INTEGER :case Types.SQL_BIGINT :

case Types.TINYINT :case Types.SQL_SMALLINT :case Types.SQL_INTEGER :case Types.SQL_BIGINT :

case Types.TINYINT :case Types.SQL_SMALLINT :case Types.SQL_INTEGER :case Types.SQL_BIGINT :

case Types.TINYINT :case Types.SQL_SMALLINT :case Types.SQL_INTEGER :case Types.SQL_BIGINT :

case Types.TINYINT :case Types.SQL_SMALLINT :case Types.SQL_INTEGER :case Types.SQL_BIGINT :

case Types.TINYINT :case Types.SQL_SMALLINT :case Types.SQL_INTEGER :case Types.SQL_BIGINT :

case Types.TINYINT :case Types.SQL_SMALLINT :case Types.SQL_INTEGER :case Types.SQL_BIGINT :

case Types.TINYINT :case Types.SQL_SMALLINT :case Types.SQL_INTEGER :case Types.SQL_BIGINT :

case Types.TINYINT :case Types.SQL_SMALLINT :case Types.SQL_INTEGER :case Types.SQL_BIGINT :

---------------------------Clone group no  913 for hash db1aeded295ed856ba557f70932f985c--------------------



dataType = Type.SQL_BOOLEAN;break;default :throw Error.runtimeError(ErrorCode.U_S0500,
                                         \"ExpressionLogical\");

dataType = Type.SQL_BOOLEAN;break;default :throw Error.runtimeError(ErrorCode.U_S0500,
                                         \"ExpressionLogical\");

---------------------------Clone group no  914 for hash a6e829c62515bc0c36f306c3907d099c--------------------



addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);    //0addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);

addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);

addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);

addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);     // not null

addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);     // not null

addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);           //0addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);

addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);         // not null

addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);         // not null

addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);                        // not null

addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);        // not null

addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);        // not null

addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);

addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);

addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);         // not null

addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);      // not null

addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);      // not null

addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);

addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);    // not null

addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);               // not null

---------------------------Clone group no  915 for hash 63331211283746ac5f2057bf50bdcd50--------------------



session.actionTimestamp      = getNextGlobalChangeTimestamp();session.transactionTimestamp = session.actionTimestamp;session.isTransaction        = true;

session.actionTimestamp      = getNextGlobalChangeTimestamp();session.transactionTimestamp = session.actionTimestamp;session.isTransaction        = true;

session.actionTimestamp      = getNextGlobalChangeTimestamp();session.transactionTimestamp = session.actionTimestamp;session.isTransaction        = true;

---------------------------Clone group no  916 for hash f736180d1a21d5d39a1fc616d2a34f1f--------------------



Object[] data = getLobHeader(lobID);if (data == null) {
                return Result.newErrorResult(Error.error(ErrorCode.X_0F502));
            }long length = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();if (dataLength == 0) {
                return ResultLob.newLobSetResponse(lobID, length);
            }

Object[] data = getLobHeader(lobID);if (data == null) {
                return Result.newErrorResult(Error.error(ErrorCode.X_0F502));
            }long length = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();if (dataLength == 0) {
                return ResultLob.newLobSetResponse(lobID, length);
            }

---------------------------Clone group no  917 for hash 6ef11e0b1f2e877bb36f2f6f25231088--------------------



if (WTextRead == null) {
            try {
                WTextRead = new BufferedReader(new FileReader(sFileName));
            } catch (IOException e) {
                throw new DataAccessPointException(e.getMessage());
            }
        }String        currentLine  = \"\";String        Token        = \"\";String        name         = \"\";TransferTable relatedTable = null;

if (WTextRead == null) {
            try {
                WTextRead = new BufferedReader(new FileReader(sFileName));
            } catch (IOException e) {
                throw new DataAccessPointException(e.getMessage());
            }
        }String        currentLine  = \"\";String        Token        = \"\";String        name         = \"\";TransferTable relatedTable = null;

---------------------------Clone group no  918 for hash f32b2e8990616ff250d4ea4fdac9a781--------------------



lookup = hashIndex.linkNode(index, lastLookup);// type dependent block
        if (isObjectKey) {
            objectKeyTable[lookup] = objectKey;
        } else if (isIntKey) {
            intKeyTable[lookup] = (int) longKey;

            if (longKey == 0) {
                hasZeroKey   = true;
                zeroKeyIndex = lookup;
            }
        } else if (isLongKey) {
            longKeyTable[lookup] = longKey;

            if (longKey == 0) {
                hasZeroKey   = true;
                zeroKeyIndex = lookup;
            }
        }if (isObjectValue) {
            objectValueTable[lookup] = objectValue;
        } else if (isIntValue) {
            intValueTable[lookup] = (int) longValue;
        } else if (isLongValue) {
            longValueTable[lookup] = longValue;
        }

lookup = hashIndex.linkNode(index, lastLookup);// type dependent block
        if (isObjectKey) {
            objectKeyTable[lookup] = objectKey;
        } else if (isIntKey) {
            intKeyTable[lookup] = (int) longKey;

            if (longKey == 0) {
                hasZeroKey   = true;
                zeroKeyIndex = lookup;
            }
        } else if (isLongKey) {
            longKeyTable[lookup] = longKey;

            if (longKey == 0) {
                hasZeroKey   = true;
                zeroKeyIndex = lookup;
            }
        }if (isObjectValue) {
            objectValueTable[lookup] = objectValue;
        } else if (isIntValue) {
            intValueTable[lookup] = (int) longValue;
        } else if (isLongValue) {
            longValueTable[lookup] = longValue;
        }

---------------------------Clone group no  919 for hash 9a39bfbbf25b7f49e084d3c340da65eb--------------------



session.checkAdmin();session.checkDDLWrite();// no action
                    return Result.updateZeroResult;

session.checkAdmin();session.checkDDLWrite();// command is a no-op from 1.9
                    return Result.updateZeroResult;

---------------------------Clone group no  920 for hash 3c4434e91f55375432f9e755a9740268--------------------



break;case Types.SQL_DATE :case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :case Types.SQL_TIMESTAMP :

break;case Types.SQL_DATE :case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :case Types.SQL_TIMESTAMP :

---------------------------Clone group no  921 for hash e1778d93da65099d5e57cd832a5c63f6--------------------



case FUNC_DEGREES :case FUNC_SIN :case FUNC_TAN :case FUNC_LOG10 :case FUNC_RADIANS :case FUNC_ROUNDMAGIC :

case FUNC_DEGREES :case FUNC_SIN :case FUNC_TAN :case FUNC_LOG10 :case FUNC_RADIANS :case FUNC_ROUNDMAGIC :

---------------------------Clone group no  922 for hash 3ff02f26dfced2e0872a5b10e5918cfa--------------------



row[domain_catalog] = database.getCatalogName().name;row[domain_schema]  = type.getSchemaName().name;row[domain_name]    = type.getName().name;

row[domain_catalog] = database.getCatalogName().name;row[domain_schema]  = type.getSchemaName().name;row[domain_name]    = type.getName().name;

row[domain_catalog] = database.getCatalogName().name;row[domain_schema]  = type.getSchemaName().name;row[domain_name]    = type.getName().name;

---------------------------Clone group no  923 for hash defafc3963abc471f946043cd9f87a80--------------------



NodeAVL        n;NodeAVL        x;boolean        isleft        = true;int            compare       = -1;

NodeAVL n;NodeAVL x;boolean isleft       = true;int     compare      = -1;

---------------------------Clone group no  924 for hash ee90cd421ee3f04afb06c7934e334cfa--------------------



case ResultConstants.DATA :break;case ResultConstants.ERROR :throw new RecoverableOdbcFailure(rOut);default :

case ResultConstants.DATA :break;case ResultConstants.ERROR :throw new RecoverableOdbcFailure(rOut);default :

---------------------------Clone group no  925 for hash 0a30735b90ec93a2830fa153cddd3578--------------------



if (file == null) {
                throw new NullPointerException(\"file\");
            }if (pos < 0) {
                throw new IllegalArgumentException(\"pos: \" + pos);
            }if (length < 0) {
                throw new IllegalArgumentException(\"length: \" + length);
            }

if (file == null) {
                throw new NullPointerException(\"file\");
            }if (pos < 0) {
                throw new IllegalArgumentException(\"pos: \" + pos);
            }if (length < 0) {
                throw new IllegalArgumentException(\"length: \" + length);
            }

---------------------------Clone group no  926 for hash ff33814e5fb088abb47e4ee305322bda--------------------



parameterValues = new Object[paramCount];parameterSet    = new Boolean[paramCount];streamLengths   = new long[paramCount];

parameterValues   = new Object[paramCount];parameterSet      = new Boolean[paramCount];streamLengths     = new long[paramCount];

---------------------------Clone group no  927 for hash ec85df02ca3017cd31fd26cd19eef8ca--------------------



rs.close();st.executeUpdate(\"SHUTDOWN\");conn.close();

rs.close();st.executeUpdate(\"SHUTDOWN\");conn.close();

---------------------------Clone group no  928 for hash 788c63bae3ec001bc88725b5c9564caf--------------------



blockAddress    += currentBlockCount;dataBlockOffset += currentBlockCount;blockCount      -= currentBlockCount;

blockAddress    += currentBlockCount;dataBlockOffset += currentBlockCount;blockCount      -= currentBlockCount;

---------------------------Clone group no  929 for hash c6a656a3be2562248e6a5bed991f24ee--------------------



Expression arg1 = e.getLeftNode();Expression arg2 = e.getRightNode();int        type = e.getType();

Expression arg1 = e.getLeftNode();Expression arg2 = e.getRightNode();int        type = e.getType();

---------------------------Clone group no  930 for hash 87dfae8fe7573423910c1e2680cc39a1--------------------



ResultSet rs =
                conn.createStatement().executeQuery(\"SELECT * FROM t;\");rs.next();assertEquals(\"Wrong table 't' contents\", 34, rs.getInt(\"i\"));

ResultSet rs = conn.createStatement().executeQuery(\"SELECT * FROM t;\");rs.next();assertEquals(\"Wrong table 't' contents\", 34, rs.getInt(\"i\"));

---------------------------Clone group no  931 for hash 37ae604ddbdfdba33a79a7544603f2ac--------------------



row                 = t.getEmptyRowData();row[grantor] = right.getGrantor().getName().name;row[grantee] = right.getGrantee().getName().name;row[table_catalog]  = tableCatalog;row[table_schema]   = tableSchema;row[table_name]     = tableName;

row                 = t.getEmptyRowData();row[grantor] = right.getGrantor().getName().name;row[grantee] = right.getGrantee().getName().name;row[table_catalog]  = tableCatalog;row[table_schema]   = tableSchema;row[table_name]     = tableName;

---------------------------Clone group no  932 for hash 6cea55d5680679aca77f1f93b875db6d--------------------



row[scope_catalog]       = null;row[scope_schema]        = null;row[scope_name]          = null;

row[scope_catalog]    = null;row[scope_schema]     = null;row[scope_name]       = null;

---------------------------Clone group no  933 for hash d6846db274de33b32175caed97a53e34--------------------



currentPosition++;token.isDelimiter = true;return;

currentPosition++;token.isDelimiter = true;return;

currentPosition++;token.isDelimiter = true;return;

currentPosition++;token.isDelimiter = true;return;

currentPosition++;token.isDelimiter = true;return;

currentPosition++;token.isDelimiter = true;return;

currentPosition++;token.isDelimiter = true;return;

currentPosition++;token.isDelimiter = true;return;

currentPosition++;token.isDelimiter = true;return;

currentPosition++;token.isDelimiter = true;return;

currentPosition++;token.isDelimiter = true;return;

currentPosition++;token.isDelimiter = true;return;

currentPosition++;token.isDelimiter = true;return;

currentPosition++;token.isDelimiter = true;return;

currentPosition++;token.isDelimiter = true;return;

---------------------------Clone group no  934 for hash 0fc88ae51551850567f3ee91dd5750c4--------------------



Vector    data   = gResult.getData();String[]  row;int       height = data.size();

Vector   data  = gResult.getData();String[] row;int      height = data.size();

---------------------------Clone group no  935 for hash 9e87ddb567445b72b57acdd4a96d1a5d--------------------



case Types.SQL_NUMERIC :case Types.SQL_DECIMAL :break;case Types.TINYINT :case Types.SQL_SMALLINT :case Types.SQL_INTEGER :case Types.SQL_BIGINT :targetType = Type.SQL_DECIMAL;break;case Types.SQL_DOUBLE :default :targetType = Type.SQL_DECIMAL_DEFAULT;break;

case Types.SQL_NUMERIC :case Types.SQL_DECIMAL :break;case Types.TINYINT :case Types.SQL_SMALLINT :case Types.SQL_INTEGER :case Types.SQL_BIGINT :targetType = Type.SQL_DECIMAL;break;case Types.SQL_DOUBLE :default :targetType = Type.SQL_DECIMAL_DEFAULT;break;

---------------------------Clone group no  936 for hash 586ed0e2b933af37afdcaa4ac0b937a7--------------------



checkGetParameterIndex(parameterIndex);Type   sourceType = parameterMetaData.columnTypes[parameterIndex - 1];Object o          = getColumnInType(parameterIndex, sourceType);if (o == null) {
            return null;
        }

checkGetParameterIndex(parameterIndex);Type   sourceType = parameterMetaData.columnTypes[parameterIndex - 1];Object o          = getColumnInType(parameterIndex, sourceType);if (o == null) {
            return null;
        }

checkGetParameterIndex(parameterIndex);Type   sourceType = parameterMetaData.columnTypes[parameterIndex - 1];Object o          = getColumnInType(parameterIndex, sourceType);if (o == null) {
            return null;
        }

---------------------------Clone group no  937 for hash c2f040a95e32279d6293309415ba7c0a--------------------



initBuffers();fileModified  = false;cacheModified = false;

initBuffers();fileModified  = false;cacheModified = false;

---------------------------Clone group no  938 for hash a16100d48c93d00d9eb120a6b0569446--------------------



rowOut.writeByte(statementReturnType);rowOut.writeString(mainString);rowOut.writeByte(rsProperties);

rowOut.writeByte(statementReturnType);rowOut.writeString(mainString);rowOut.writeByte(rsProperties);

---------------------------Clone group no  939 for hash 6d967474ac1952e52e5276886155a4de--------------------



pstmt1.setInt(1, delta);pstmt1.setInt(2, aid);pstmt1.executeUpdate();pstmt1.clearWarnings();pstmt2.setInt(1, aid);ResultSet RS = pstmt2.executeQuery();pstmt2.clearWarnings();while (RS.next()) {
                    aBalance = RS.getInt(1);
                }pstmt3.setInt(1, delta);pstmt3.setInt(2, tid);pstmt3.executeUpdate();pstmt3.clearWarnings();pstmt4.setInt(1, delta);pstmt4.setInt(2, bid);pstmt4.executeUpdate();pstmt4.clearWarnings();pstmt5.setInt(1, tid);pstmt5.setInt(2, bid);pstmt5.setInt(3, aid);pstmt5.setInt(4, delta);pstmt5.executeUpdate();pstmt5.clearWarnings();

pstmt1.setInt(1, delta);pstmt1.setInt(2, aid);pstmt1.executeUpdate();pstmt1.clearWarnings();pstmt2.setInt(1, aid);ResultSet RS = pstmt2.executeQuery();pstmt2.clearWarnings();while (RS.next()) {
                        aBalance = RS.getInt(1);
                    }pstmt3.setInt(1, delta);pstmt3.setInt(2, tid);pstmt3.executeUpdate();pstmt3.clearWarnings();pstmt4.setInt(1, delta);pstmt4.setInt(2, bid);pstmt4.executeUpdate();pstmt4.clearWarnings();pstmt5.setInt(1, tid);pstmt5.setInt(2, bid);pstmt5.setInt(3, aid);pstmt5.setInt(4, delta);pstmt5.executeUpdate();pstmt5.clearWarnings();

---------------------------Clone group no  940 for hash 2e2ffb4ca69ea15f1faf29c1572232b8--------------------



iImage = createImage(iWidth, iHeight);gImage = iImage.getGraphics();gImage.setFont(fFont);

iImage = createImage(iWidth, iHeight);gImage = iImage.getGraphics();gImage.setFont(fFont);

---------------------------Clone group no  941 for hash f9132a0322e580c44e3b17293a453386--------------------



case OpTypes.VALUE :case OpTypes.DYNAMIC_PARAM :case OpTypes.PARAMETER :case OpTypes.VARIABLE :isSingleColumnCondition = true;if (opType == OpTypes.EQUAL) {
                        isSingleColumnEqual = true;
                    }break;

case OpTypes.VALUE :case OpTypes.DYNAMIC_PARAM :case OpTypes.PARAMETER :case OpTypes.VARIABLE :isSingleColumnCondition = true;if (opType == OpTypes.EQUAL) {
                        isSingleColumnEqual = true;
                    }break;

---------------------------Clone group no  942 for hash 47095725474b80b29d7869771334dd86--------------------



setupConn(\"db1\");conn.createStatement().executeUpdate(\"INSERT INTO t VALUES(2)\");conn.commit();

setupConn(\"db1\");conn.createStatement().executeUpdate(\"INSERT INTO t VALUES(2)\");conn.commit();

---------------------------Clone group no  943 for hash 157f0dee952b43ed3fb3a1f242141735--------------------



Object[]  row           = t.getEmptyRowData();row[icat]          = cat;row[ischem]        = schem;

// initialization
        Object[] row = t.getEmptyRowData();// Do it.
        row[icat]       = cat;row[ischem]     = schem;

---------------------------Clone group no  944 for hash 6a6d457f425e51b7038b283c7d67e7e4--------------------



long mask    = 0xffffffffffffffffl << scale;long newSize = value & mask;if (newSize != value) {
            newSize += 1 << scale;
        }return newSize;

long mask    = 0xffffffffffffffffl << scale;long newSize = value & mask;if (newSize != value) {
            newSize += 1 << scale;
        }return newSize;

---------------------------Clone group no  945 for hash 7e401de0cd3a084a7de2205719b38ca1--------------------



case OpTypes.MATCH_SIMPLE :case OpTypes.MATCH_PARTIAL :case OpTypes.MATCH_FULL :case OpTypes.MATCH_UNIQUE_SIMPLE :case OpTypes.MATCH_UNIQUE_PARTIAL :case OpTypes.MATCH_UNIQUE_FULL :

case OpTypes.MATCH_SIMPLE :case OpTypes.MATCH_PARTIAL :case OpTypes.MATCH_FULL :case OpTypes.MATCH_UNIQUE_SIMPLE :case OpTypes.MATCH_UNIQUE_PARTIAL :case OpTypes.MATCH_UNIQUE_FULL :

case OpTypes.MATCH_SIMPLE :case OpTypes.MATCH_PARTIAL :case OpTypes.MATCH_FULL :case OpTypes.MATCH_UNIQUE_SIMPLE :case OpTypes.MATCH_UNIQUE_PARTIAL :case OpTypes.MATCH_UNIQUE_FULL :

case OpTypes.MATCH_SIMPLE :case OpTypes.MATCH_PARTIAL :case OpTypes.MATCH_FULL :case OpTypes.MATCH_UNIQUE_SIMPLE :case OpTypes.MATCH_UNIQUE_PARTIAL :case OpTypes.MATCH_UNIQUE_FULL :

case OpTypes.MATCH_SIMPLE :case OpTypes.MATCH_PARTIAL :case OpTypes.MATCH_FULL :case OpTypes.MATCH_UNIQUE_SIMPLE :case OpTypes.MATCH_UNIQUE_PARTIAL :case OpTypes.MATCH_UNIQUE_FULL :

case OpTypes.MATCH_SIMPLE :case OpTypes.MATCH_PARTIAL :case OpTypes.MATCH_FULL :case OpTypes.MATCH_UNIQUE_SIMPLE :case OpTypes.MATCH_UNIQUE_PARTIAL :case OpTypes.MATCH_UNIQUE_FULL :

---------------------------Clone group no  946 for hash 82d1b347c27dad93386b074026bac3ed--------------------



case Types.SQL_CHAR :return Tokens.T_CHARACTER;case Types.SQL_VARCHAR :

case Types.SQL_CHAR :return Tokens.T_CHARACTER;case Types.SQL_VARCHAR :

---------------------------Clone group no  947 for hash 474b8d69b7960cae6d885937a2c4470f--------------------



pstmt.setTimestamp(1, new Timestamp(System.currentTimeMillis()));set = pstmt.executeQuery();if (set.next()) {
            System.out.println(\"pstmt res=\" + set.getInt(1));
        }

pstmt.setTimestamp(1, new Timestamp(System.currentTimeMillis()));set = pstmt.executeQuery();if (set.next()) {
            System.out.println(\"pstmt res=\" + set.getInt(1));
        }

---------------------------Clone group no  948 for hash 825f66e69168326a162abb4c9410db54--------------------



addrs = InetAddress.getAllByName(addr.getHostAddress());for (int i = 0; i < addrs.length; i++) {
                set.add(addrs[i].getHostAddress());
                set.add(addrs[i].getHostName());
            }addrs = InetAddress.getAllByName(addr.getHostName());for (int i = 0; i < addrs.length; i++) {
                set.add(addrs[i].getHostAddress());
                set.add(addrs[i].getHostName());
            }

addrs = InetAddress.getAllByName(addr.getHostAddress());for (int i = 0; i < addrs.length; i++) {
                set.add(addrs[i].getHostAddress());
                set.add(addrs[i].getHostName());
            }addrs = InetAddress.getAllByName(addr.getHostName());for (int i = 0; i < addrs.length; i++) {
                set.add(addrs[i].getHostAddress());
                set.add(addrs[i].getHostName());
            }

---------------------------Clone group no  949 for hash c6f5ab96537f828a6f5a1413d910650f--------------------



int    index       = hashIndex.getHashIndex(hash);int    lookup      = hashIndex.hashTable[index];int    lastLookup  = -1;Object returnValue = null;

int     index       = hashIndex.getHashIndex(hash);int     lookup      = hashIndex.hashTable[index];int     lastLookup  = -1;Object  returnValue = null;

int    index       = hashIndex.getHashIndex(hash);int    lookup      = hashIndex.hashTable[index];int    lastLookup  = -1;Object returnValue = null;

int    index       = hashIndex.getHashIndex(hash);int    lookup      = hashIndex.hashTable[index];int    lastLookup  = -1;Object returnValue = null;

---------------------------Clone group no  950 for hash bd9f8921a6e50b5769d0722a1eb420a6--------------------



rs  = stmt.executeQuery(\"select count(*) from t\");rs.next();rowcount = rs.getInt(1);

rs = stmt.executeQuery(\"select count(*) from t\");rs.next();rowcount = rs.getInt(1);

rs = stmt.executeQuery(\"select count(*) from t\");rs.next();rowcount = rs.getInt(1);

rs = stmt.executeQuery(\"select count(*) from t\");rs.next();rowcount = rs.getInt(1);

---------------------------Clone group no  951 for hash 4e0a7a7da352ef7fd76025a6a7122933--------------------



case Tokens.WITH :case Tokens.TABLE :case Tokens.VALUES :case Tokens.SELECT :

case Tokens.WITH :case Tokens.TABLE :case Tokens.VALUES :case Tokens.SELECT :

---------------------------Clone group no  952 for hash 0dbb0b0fd67ddcef487dafca77def386--------------------



if (isSimpleOrder) {
                    return i;
                }boolean nulls = a[colIndex[j]] == null
                                || b[colIndex[j]] == null;if (colDesc[j] && !nulls) {
                    i = -i;
                }if (nullsLast[j] && nulls) {
                    i = -i;
                }return i;

if (isSimpleOrder) {
                    return i;
                }boolean nulls = a[colIndex[j]] == null
                                || b[colIndex[j]] == null;if (colDesc[j] && !nulls) {
                    i = -i;
                }if (nullsLast[j] && nulls) {
                    i = -i;
                }return i;

---------------------------Clone group no  953 for hash f7bfd0cb51edfa6551f4dfc50941e9b0--------------------



adjustLobUsage(session);persistCommit(session);int newLimit = session.rowActionList.size();if (newLimit > limit) {
                Object[] list = session.rowActionList.getArray();

                mergeTransaction(list, limit, newLimit,
                                 session.actionTimestamp);
                finaliseRows(session, list, limit, newLimit);
                session.rowActionList.setSize(limit);
            }

adjustLobUsage(session);persistCommit(session);int newLimit = session.rowActionList.size();if (newLimit > limit) {
                Object[] list = session.rowActionList.getArray();

                mergeTransaction(list, limit, newLimit,
                                 session.actionTimestamp);
                finaliseRows(session, list, limit, newLimit);
                session.rowActionList.setSize(limit);
            }

---------------------------Clone group no  954 for hash 13f16cfc8248528b4d26bd39d389dbd9--------------------



System.out.println(
            \"*********************************************************\");System.out.println();System.out.println(\"Driver: \" + DriverName);System.out.println(\"URL:\" + DBUrl);System.out.println();System.out.println(\"Scale factor value: \" + tps);System.out.println(\"Number of clients: \" + n_clients);System.out.println(\"Number of transactions per client: \"
                           + n_txn_per_client);

System.out.println(
            \"*********************************************************\");System.out.println();System.out.println(\"Driver: \" + DriverName);System.out.println(\"URL:\" + DBUrl);System.out.println();System.out.println(\"Scale factor value: \" + tps);System.out.println(\"Number of clients: \" + n_clients);System.out.println(\"Number of transactions per client: \"
                           + n_txn_per_client);

---------------------------Clone group no  955 for hash f135a7bbae592271641684fe0ea1df3d--------------------



RoutineSchema routine =
                        (RoutineSchema) set.getObject(name.name);object = routine;Routine[] specifics = routine.getSpecificRoutines();for (int i = 0; i < specifics.length; i++) {
                        removeSchemaObject(specifics[i].getSpecificName());
                    }break;

RoutineSchema routine =
                        (RoutineSchema) set.getObject(name.name);object = routine;Routine[] specifics = routine.getSpecificRoutines();for (int i = 0; i < specifics.length; i++) {
                        removeSchemaObject(specifics[i].getSpecificName());
                    }break;

---------------------------Clone group no  956 for hash ddf2dbfc1d61c40a5c42a3dad67f937e--------------------



ClobData clob = session.createClob(result.length());clob.setString(session, 0, result);return clob;

ClobData clob = session.createClob(result.length());clob.setString(session, 0, result);return clob;

---------------------------Clone group no  957 for hash 7da3a9f71085114b5e9bbc1bc106c690--------------------



case Types.SQL_BOOLEAN :return SQL_BOOLEAN;case Types.SQL_BINARY :

case Types.SQL_BOOLEAN :return SQL_BOOLEAN;case Types.SQL_BINARY :

---------------------------Clone group no  958 for hash c63e0254e995a1bd38aebd4e1662fb82--------------------



Constraint constraint  = fkMainConstraints[i];Table      ref         = constraint.getRef();int[]      mainColumns = constraint.getMainColumns();if (ref == this) {
                continue;
            }

Constraint constraint  = fkMainConstraints[i];Table      ref         = constraint.getRef();int[]      mainColumns = constraint.getMainColumns();if (ref == this) {
                continue;
            }

---------------------------Clone group no  959 for hash 08f7bef1ee1823a6445d8f6fa507d300--------------------



rs  = stmt.executeQuery(sql);rs.next();expectedCount = rs.getInt(1);sql           = \"select count(*) from test where name like '%'\";pstmt         = conn.prepareStatement(sql);rs            = pstmt.executeQuery();rs.next();actualCount = rs.getInt(1);assertEquals(\"\\\"\" + sql + \"\\\"\", expectedCount, actualCount);

rs  = stmt.executeQuery(sql);rs.next();expectedCount = rs.getInt(1);sql           = \"select count(*) from test where name like '%'\";pstmt         = conn.prepareStatement(sql);rs            = pstmt.executeQuery();rs.next();actualCount = rs.getInt(1);assertEquals(\"\\\"\" + sql + \"\\\"\", expectedCount, actualCount);

---------------------------Clone group no  960 for hash 1d2a639a950540147cee022d71e87c94--------------------



if (level < atLevel) {
            return;
        }if (writer == null) {
            return;
        }sb.append(HsqlDateTime.getSystemTimeString()).append(' ');if (!isSQL) {
            sb.append(logTypeNames[atLevel]).append(' ');
        }

if (level < atLevel) {
            return;
        }if (writer == null) {
            return;
        }sb.append(HsqlDateTime.getSystemTimeString()).append(' ');if (!isSQL) {
            sb.append(logTypeNames[atLevel]).append(' ');
        }

---------------------------Clone group no  961 for hash e1d6243f8937e672a6a45698d70d3506--------------------



TableWorks tw = new TableWorks(session, table);tw.retypeColumn(column, newCol);break;

TableWorks tw = new TableWorks(session, table);tw.retypeColumn(column, newCol);break;

---------------------------Clone group no  962 for hash bb7ef15fff4c2fe9d3dda73ed25631a7--------------------



currentPosition   += 2;token.isDelimiter = true;return;

currentPosition   += 2;token.isDelimiter = true;return;

currentPosition   += 2;token.isDelimiter = true;return;

currentPosition   += 2;token.isDelimiter = true;return;

currentPosition   += 2;token.isDelimiter = true;return;

---------------------------Clone group no  963 for hash 0ed54ac733c52f570f8d73f556b30629--------------------



case SchemaObject.ASSERTION :case SchemaObject.INDEX :case SchemaObject.TRIGGER :

case SchemaObject.ASSERTION :case SchemaObject.INDEX :case SchemaObject.TRIGGER :

---------------------------Clone group no  964 for hash cd36f8e3662ce7aa19f93a1d553e5506--------------------



if (!session.getGrantee().isFullyAccessibleByRole(refName)) {
                    continue;
                }row                   = t.getEmptyRowData();row[view_catalog]     = database.getCatalogName().name;row[view_schema]      = table.getSchemaName().name;row[view_name]        = table.getName().name;

if (!session.getGrantee().isFullyAccessibleByRole(refName)) {
                    continue;
                }row                = t.getEmptyRowData();row[view_catalog]  = database.getCatalogName().name;row[view_schema]   = table.getSchemaName().name;row[view_name]     = table.getName().name;

---------------------------Clone group no  965 for hash 93b728ea831995ff6b9c34c68721cc47--------------------



int account = TestBench.getRandomID(ACCOUNT);int branch  = TestBench.getRandomID(BRANCH);int teller  = TestBench.getRandomID(TELLER);int delta   = TestBench.getRandomInt(-1000, 1000);doOne(branch, teller, account, delta);incrementTransactionCount();

int account = TestBench.getRandomID(ACCOUNT);int branch  = TestBench.getRandomID(BRANCH);int teller  = TestBench.getRandomID(TELLER);int delta   = TestBench.getRandomInt(-1000, 1000);doOne(branch, teller, account, delta);incrementTransactionCount();

---------------------------Clone group no  966 for hash eaf3391befa8e73c2b211503bf793558--------------------



int    diff    = collation.compare(aString, bString);if (diff != 0) {
                    return diff;
                }aOffset++;

int diff = collation.compare(aString, bString);if (diff != 0) {
                return diff;
            }aOffset++;

---------------------------Clone group no  967 for hash d409baf824595f3c55c1a0421ea829da--------------------



if (!other.isRowType()) {
            throw Error.error(ErrorCode.X_42562);
        }Type[] newTypes   = new Type[dataTypes.length];Type[] otherTypes = ((RowType) other).getTypesArray();if (dataTypes.length != otherTypes.length) {
            throw Error.error(ErrorCode.X_42564);
        }for (int i = 0; i < dataTypes.length; i++) {
            newTypes[i] = dataTypes[i].getAggregateType(otherTypes[i]);
        }return new RowType(newTypes);

if (!other.isRowType()) {
            throw Error.error(ErrorCode.X_42562);
        }Type[] newTypes   = new Type[dataTypes.length];Type[] otherTypes = ((RowType) other).getTypesArray();if (dataTypes.length != otherTypes.length) {
            throw Error.error(ErrorCode.X_42564);
        }for (int i = 0; i < dataTypes.length; i++) {
            newTypes[i] = dataTypes[i].getAggregateType(otherTypes[i]);
        }return new RowType(newTypes);

---------------------------Clone group no  968 for hash 6f7f21dcb9d48312e2551d0686b7e43f--------------------



if (seconds < 0) {
            throw JDBCUtil.outOfRangeArgument();
        }if (seconds > Short.MAX_VALUE) {
            seconds = Short.MAX_VALUE;
        }queryTimeout = seconds;

if (seconds < 0) {
            throw JDBCUtil.outOfRangeArgument();
        }if (seconds > Short.MAX_VALUE) {
            seconds = Short.MAX_VALUE;
        }queryTimeout = seconds;

---------------------------Clone group no  969 for hash a11a2b7a398f5e330123bbbb10b119af--------------------



iDeletedCount = deleteStatement.executeUpdate();Assert.assertEquals(
            \"Exactly one record with time data shoud have been deleted.\",
            iDeletedCount, 1);// And now test the date
        Assert.assertNotNull(
            \"The inserted time shouldn't be retrieved as null from the database\",
            retrievedTime);// Ignore milliseconds when comparing dates
        String selectString = selectTime.toString();String retrievedString = retrievedTime.toString();boolean result =
            retrievedString.equals(selectString);Assert.assertTrue(
            \"The time retrieved from database \"
            + DateFormat.getDateTimeInstance().format(retrievedTime)
            + \" is not the same as the inserted one \"
            + DateFormat.getDateTimeInstance().format(insertTime), result);

iDeletedCount = deleteStatement.executeUpdate();Assert.assertEquals(
            \"Exactly one record with time data shoud have been deleted.\",
            iDeletedCount, 1);// And now test the date
        Assert.assertNotNull(
            \"The inserted time shouldn't be retrieved as null from the database\",
            retrievedTime);// Ignore milliseconds when comparing dates
        String selectString = selectTime.toString();String retrievedString = retrievedTime.toString();boolean result =
            retrievedString.equals(selectString);Assert.assertTrue(
            \"The time retrieved from database \"
            + DateFormat.getDateTimeInstance().format(retrievedTime)
            + \" is not the same as the inserted one \"
            + DateFormat.getDateTimeInstance().format(insertTime), result);

---------------------------Clone group no  970 for hash bbc8d2d73899caf2ce0f95237df30ec5--------------------



case Tokens.TRUE :read();return Expression.EXPR_TRUE;case Tokens.FALSE :read();return Expression.EXPR_FALSE;

case Tokens.TRUE :read();return Expression.EXPR_TRUE;case Tokens.FALSE :read();return Expression.EXPR_FALSE;

---------------------------Clone group no  971 for hash c2922dd9433dfc77b53ab4b894b2a051--------------------



complete = true;currentPosition++;break;

complete = true;currentPosition++;break;

---------------------------Clone group no  972 for hash 7f98dcb128b4b4813d521a0360631346--------------------



sb.append(Tokens.T_SQLSTATE);sb.append(' ').append('\\'').append(sqlState).append('\\'');break;

sb.append(Tokens.T_SQLSTATE);sb.append(' ').append('\\'').append(sqlState).append('\\'');break;

---------------------------Clone group no  973 for hash b41c488479325974fc2fded2c4472d6e--------------------



isWritable = true;resultSet  = result;colIndex   = index;

isWritable = true;resultSet  = result;colIndex   = index;

---------------------------Clone group no  974 for hash 5636d4047591eadc9814640231a5acfb--------------------



String   folder = s[2];int      ci     = currentindent;for (; ci > 0; ci--) {
                if (key.startsWith(root[ci])) {
                    break;
                }
            }if (root[ci].length() < key.length()) {
                ci++;
            }if (closed && ci > currentindent) {
                continue;
            }

String   folder = s[2];int      ci     = currentindent;for (; ci > 0; ci--) {
                if (key.startsWith(root[ci])) {
                    break;
                }
            }if (root[ci].length() < key.length()) {
                ci++;
            }if (closed && ci > currentindent) {
                continue;
            }

---------------------------Clone group no  975 for hash b9781f4c85637f265d86c46dbffc408a--------------------



if (subQueries == null || subQueries.size() == 0) {
            return TableDerived.emptyArray;
        }TableDerived[] subQueryArray = new TableDerived[subQueries.size()];subQueries.toArray(subQueryArray);for (int i = 0; i < subqueries.length; i++) {
            subQueryArray[i].prepareTable();
        }return subQueryArray;

if (subQueries == null || subQueries.size() == 0) {
            return TableDerived.emptyArray;
        }TableDerived[] subQueryArray = new TableDerived[subQueries.size()];subQueries.toArray(subQueryArray);for (int i = 0; i < subqueries.length; i++) {
            subQueryArray[i].prepareTable();
        }return subQueryArray;

if (subQueries == null || subQueries.size() == 0) {
            return TableDerived.emptyArray;
        }TableDerived[] subQueryArray = new TableDerived[subQueries.size()];subQueries.toArray(subQueryArray);for (int i = 0; i < subqueries.length; i++) {
            subQueryArray[i].prepareTable();
        }return subQueryArray;

---------------------------Clone group no  976 for hash f1320c657bbc033d2f1bf533f242af51--------------------



break;case Types.SQL_DECIMAL :case Types.SQL_NUMERIC :

break;case Types.SQL_DECIMAL :case Types.SQL_NUMERIC :

---------------------------Clone group no  977 for hash 0889c1ef10ab63185cccb4a9bfe5332e--------------------



cal.add(Calendar.MONTH, 1);millis = cal.getTimeInMillis();cal.add(Calendar.DAY_OF_MONTH, -1);millis   = cal.getTimeInMillis();

cal.add(Calendar.MONTH, 1);millis = cal.getTimeInMillis();cal.add(Calendar.DAY_OF_MONTH, -1);millis   = cal.getTimeInMillis();

---------------------------Clone group no  978 for hash 1885cd4d644172f457c02b0243eff63d--------------------



working = true;v.insertElementAt(\"/*\", ++i);switchoff = true;

working = true;v.insertElementAt(\"/*\", ++i);switchoff = true;

---------------------------Clone group no  979 for hash 4027777a918bb53fe67bf1a8412bdc53--------------------



int               rowcount = 0;sql = \"drop table t if exists\";stmt.executeUpdate(sql);sql = \"create table t(id int, fn varchar(40), ln varchar(40), zip int)\";stmt.executeUpdate(sql);

int               rowcount = 0;sql = \"drop table t if exists\";stmt.executeUpdate(sql);sql = \"create table t(id int, fn varchar(40), ln varchar(40), zip int)\";stmt.executeUpdate(sql);

---------------------------Clone group no  980 for hash 011917c3f89f9cd7dc3a562a2dcad7bb--------------------



metaData.write(rowOut);writeSimple(rowOut, metaData, (Object[]) valueData);break;

metaData.write(rowOut);writeSimple(rowOut, metaData, (Object[]) valueData);break;

---------------------------Clone group no  981 for hash 9954b3709a9e92d26b75439323719365--------------------



int value = ((Integer) parameters[0]).intValue();session.checkAdmin();session.checkDDLWrite();

int value = ((Integer) parameters[0]).intValue();session.checkAdmin();session.checkDDLWrite();

int value = ((Integer) parameters[0]).intValue();session.checkAdmin();session.checkDDLWrite();

int value = ((Integer) parameters[0]).intValue();session.checkAdmin();session.checkDDLWrite();

int value = ((Integer) parameters[0]).intValue();session.checkAdmin();session.checkDDLWrite();

int value = ((Integer) parameters[0]).intValue();session.checkAdmin();session.checkDDLWrite();

int value = ((Integer) parameters[0]).intValue();session.checkAdmin();session.checkDDLWrite();

---------------------------Clone group no  982 for hash 24fd72e9ede050254638633166262ae4--------------------



read();isIdentity   = true;isPKIdentity = true;typeObject   = Type.SQL_BIGINT;sequence = new NumberSequence(null, 1, 1,
                                                          typeObject);break;

read();isIdentity   = true;isPKIdentity = true;typeObject   = Type.SQL_BIGINT;sequence = new NumberSequence(null, 1, 1,
                                                          typeObject);break;

---------------------------Clone group no  983 for hash a8272264dc51c2f56a00bff02ef8eac1--------------------



st   = conn.createStatement();rs = st.executeQuery(\"select count(*) from tmsingle\");assertTrue(rs.next());assertEquals(20, rs.getInt(1));rs = st.executeQuery(\"select count(*) from tident\");assertTrue(rs.next());assertEquals(20, rs.getInt(1));

st   = conn.createStatement();rs = st.executeQuery(\"select count(*) from tmsingle\");assertTrue(rs.next());assertEquals(20, rs.getInt(1));rs = st.executeQuery(\"select count(*) from tident\");assertTrue(rs.next());assertEquals(20, rs.getInt(1));

---------------------------Clone group no  984 for hash 4652f6431a4d3e6e47313c0ea30c2630--------------------



addColumn(t, \"TRIGGER_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"TRIGGER_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"TRIGGER_NAME\", SQL_IDENTIFIER);    // not nulladdColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);      // not null

addColumn(t, \"TRIGGER_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"TRIGGER_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"TRIGGER_NAME\", SQL_IDENTIFIER);    // not nulladdColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);      // not null

---------------------------Clone group no  985 for hash 3f5f466775f4624401585fb9c627eae1--------------------



list.add(sb.toString());sb.setLength(0);sb.append(\"SET FILES \").append(Tokens.T_CACHE);

list.add(sb.toString());sb.setLength(0);sb.append(\"SET FILES \").append(Tokens.T_CACHE);

---------------------------Clone group no  986 for hash 99449d2b8e21cba63cfd76e80a15fef2--------------------



case RowAction.ACTION_DELETE :remove(row);break;case RowAction.ACTION_INSERT :break;case RowAction.ACTION_INSERT_DELETE :// INSERT + DELEETE
                remove(row);break;case RowAction.ACTION_DELETE_FINAL :delete(session, row);remove(row);break;

case RowAction.ACTION_DELETE :remove(row);break;case RowAction.ACTION_INSERT :break;case RowAction.ACTION_INSERT_DELETE :// INSERT + DELEETE
                remove(row);break;case RowAction.ACTION_DELETE_FINAL :delete(session, row);remove(row);break;

---------------------------Clone group no  987 for hash 944735eee5172cf6400ced5f5516c7d0--------------------



command = c;prepare = p;update  = u;args    = a;

command = c;prepare = p;update  = u;args    = a;

---------------------------Clone group no  988 for hash 4cc730602da87a62df8db1f9f3a21467--------------------



table     = e.getTable();isLateral = true;break;

table     = e.getTable();isLateral = true;break;

table     = e.getTable();isLateral = true;break;

---------------------------Clone group no  989 for hash 02ce462d9aa34bd0454abb177ec04565--------------------



case SchemaObject.VIEW :case SchemaObject.TABLE :case SchemaObject.SEQUENCE :case SchemaObject.CHARSET :case SchemaObject.DOMAIN :case SchemaObject.TYPE :case SchemaObject.COLLATION :case SchemaObject.PROCEDURE :case SchemaObject.SPECIFIC_ROUTINE :case SchemaObject.FUNCTION :case SchemaObject.ASSERTION :case SchemaObject.TRIGGER :

case SchemaObject.VIEW :case SchemaObject.TABLE :case SchemaObject.SEQUENCE :case SchemaObject.CHARSET :case SchemaObject.DOMAIN :case SchemaObject.TYPE :case SchemaObject.COLLATION :case SchemaObject.PROCEDURE :case SchemaObject.SPECIFIC_ROUTINE :case SchemaObject.FUNCTION :case SchemaObject.ASSERTION :case SchemaObject.TRIGGER :

---------------------------Clone group no  990 for hash d917c835768151471b7d9fa62faf9c2a--------------------



super(type);nodes       = new Expression[UNARY];nodes[LEFT] = e;

super(type);nodes       = new Expression[UNARY];nodes[LEFT] = e;

---------------------------Clone group no  991 for hash 81c2820821d3e32121fd44634bd3e5a0--------------------



bStart.invalidate();bStart.setEnabled(true);for (Enumeration e =
                        result.elements(); e.hasMoreElements(); ) {
                    lTable.add(e.nextElement().toString());
                }lTable.repaint();

bStart.invalidate();bStart.setEnabled(true);for (Enumeration e =
                        result.elements(); e.hasMoreElements(); ) {
                    lTable.add(e.nextElement().toString());
                }lTable.repaint();

---------------------------Clone group no  992 for hash 210870bca4c5dff540ed7d5d8467b630--------------------



st.execute(\"SHUTDOWN SCRIPT\");conn = newConnection();st   = conn.createStatement();

st.execute(\"SHUTDOWN SCRIPT\");conn = newConnection();st = conn.createStatement();

st.execute(\"SHUTDOWN SCRIPT\");conn = newConnection();st   = conn.createStatement();

---------------------------Clone group no  993 for hash 19c11fdd08cb01506a6900b207dfb5b6--------------------



if (m_closed) {
            return;
        }m_closed = true;final List streams = new ArrayList();streams.addAll(m_streams);m_streams = null;for (Iterator itr = streams.iterator(); itr.hasNext(); ) {
            final Object stream = itr.next();

            if (stream instanceof InputStream) {
                try {
                    ((InputStream) stream).close();
                } catch (Exception ex) {

                    //
                }
            } else if (stream instanceof OutputStream) {
                try {
                    ((OutputStream) stream).close();
                } catch (Exception ex) {

                    //
                }
            }
        }if (m_deleteOnFree) {
            try {
                m_file.delete();
            } catch (Exception e) {}
        }

if (m_closed) {
            return;
        }m_closed = true;final List streams = new ArrayList();streams.addAll(m_streams);m_streams = null;for (Iterator itr = streams.iterator(); itr.hasNext(); ) {
            final Object stream = itr.next();

            if (stream instanceof InputStream) {
                try {
                    ((InputStream) stream).close();
                } catch (Exception ex) {

                    //
                }
            } else if (stream instanceof OutputStream) {
                try {
                    ((OutputStream) stream).close();
                } catch (Exception ex) {

                    //
                }
            }
        }if (m_deleteOnFree) {
            try {
                m_file.delete();
            } catch (Exception e) {}
        }

---------------------------Clone group no  994 for hash af4f66ecfdc0149511a743374db63fe2--------------------



case FUNC_ISAUTOCOMMIT :case FUNC_ISREADONLYSESSION :case FUNC_ISREADONLYDATABASE :case FUNC_ISREADONLYDATABASEFILES :

case FUNC_ISAUTOCOMMIT :case FUNC_ISREADONLYSESSION :case FUNC_ISREADONLYDATABASE :case FUNC_ISREADONLYDATABASEFILES :

---------------------------Clone group no  995 for hash bd3016069b84e572af7e8a169f26562a--------------------



historize();Statement statement = processSQL();ResultSet rs = null;if (statement != null) {
                                try {
                                    rs = statement.getResultSet();
                                } catch (SQLException se) {
                                    try {
                                        if (statement != null)
                                            statement.close();
                                    } catch (SQLException nse) {
                                        // Purposefully doing nothing
                                    } finally {
                                        statement = null;
                                    }
                                    throw se;  // rethrow
                                }
                                displaySqlResults(
                                        statement, rs, null, null, true);
                            }

historize();Statement statement = processSQL();ResultSet rs = null;if (statement != null) {
                            try {
                                rs = statement.getResultSet();
                            } catch (SQLException se) {
                                try {
                                    if (statement != null) statement.close();
                                } catch (SQLException nse) {
                                    // Purposefully doing nothing
                                } finally {
                                    statement = null;
                                }
                                throw se;  // rethrow
                            }
                            displaySqlResults(
                                    statement, rs, null, null, true);
                        }

---------------------------Clone group no  996 for hash 78249c50a4967bc1feacdf955022246e--------------------



result.navigator = new RowSetNavigatorClient();result.metaData  = md;return result;

result.navigator = new RowSetNavigatorClient();result.metaData  = md;return result;

---------------------------Clone group no  997 for hash f95b311b67c68e336fc12581f31f93c9--------------------



DefaultMutableTreeNode childNode =
                        (DefaultMutableTreeNode) treePath
                            .getLastPathComponent();String  childName = null;boolean isChar;if (childNode.getChildCount() > 0) {
                        childName = childNode.getFirstChild().toString();
                        isChar    = childName.indexOf(\"CHAR\") >= 0;
                        result    += \" WHERE \" + quoteObjectName(column);

                        if (isChar) {
                            result += \" LIKE \\'%%\\'\";
                        } else {
                            result += \" = \";
                        }
                    }

DefaultMutableTreeNode childNode =
                        (DefaultMutableTreeNode) treePath
                            .getLastPathComponent();String  childName = null;boolean isChar;if (childNode.getChildCount() > 0) {
                        childName = childNode.getFirstChild().toString();
                        isChar    = childName.indexOf(\"CHAR\") >= 0;
                        result    += \" WHERE \" + quoteObjectName(column);

                        if (isChar) {
                            result += \" LIKE \\'%%\\'\";
                        } else {
                            result += \" = \";
                        }
                    }

---------------------------Clone group no  998 for hash 8411bfff27d19d057e08ad45eb4dc7ba--------------------



case OpTypes.EQUAL :case OpTypes.GREATER_EQUAL :case OpTypes.GREATER_EQUAL_PRE :case OpTypes.GREATER :case OpTypes.SMALLER :case OpTypes.SMALLER_EQUAL :

case OpTypes.EQUAL :case OpTypes.GREATER_EQUAL :case OpTypes.GREATER_EQUAL_PRE :case OpTypes.GREATER :case OpTypes.SMALLER :case OpTypes.SMALLER_EQUAL :

---------------------------Clone group no  999 for hash 38b778c767ee488732bca09cd6740078--------------------



StringBuffer b     = new StringBuffer();long         total = 0;for (int i = 0; i < all.length(); i++) {
            char c = all.charAt(i);

            if (c != '\\n') {
                b.append(c);
            }
        }all = b.toString();String[] g = new String[4];g[0] = \"ms\";g[1] = \"count\";g[2] = \"sql\";g[3] = \"error\";

StringBuffer b     = new StringBuffer();long         total = 0;for (int i = 0; i < all.length(); i++) {
            char c = all.charAt(i);

            if (c != '\\n') {
                b.append(c);
            }
        }all = b.toString();String[] g = new String[4];g[0] = \"ms\";g[1] = \"count\";g[2] = \"sql\";g[3] = \"error\";

---------------------------Clone group no  1000 for hash b10e5c38b31cd30a09a34ce9579e3a9a--------------------



emptyData        = rangeTable.getEmptyRowData();columnsInGroupBy = rangeTable.getNewColumnCheckList();usedColumns      = rangeTable.getNewColumnCheckList();

emptyData                     = rangeTable.getEmptyRowData();columnsInGroupBy              = rangeTable.getNewColumnCheckList();usedColumns                   = rangeTable.getNewColumnCheckList();

---------------------------Clone group no  1001 for hash 83d65eb61da3a3ca91905186ca60df2e--------------------



count = 0;RowSetNavigator nav = cmd.initialiseNavigator();updateCounts = new int[nav.getSize()];

count = 0;RowSetNavigator nav = cmd.initialiseNavigator();updateCounts = new int[nav.getSize()];

---------------------------Clone group no  1002 for hash c9d4e06165b58592085d2018e689ff71--------------------



token.tokenString = sqlString.substring(tokenStart,
                                currentPosition + 1);token.tokenType   = Tokens.X_MALFORMED_NUMERIC;token.isMalformed = true;return;

token.tokenString = sqlString.substring(tokenStart,
                                currentPosition + 1);token.tokenType   = Tokens.X_MALFORMED_NUMERIC;token.isMalformed = true;return;

---------------------------Clone group no  1003 for hash 2a07a02f5b309f2b767029cd22bd4e8a--------------------



StringBuffer sb = new StringBuffer(64);sb.append(Tokens.T_SET).append(' ').append(Tokens.T_TABLE).append(
                ' ');sb.append(getName().getSchemaQualifiedStatementName());

StringBuffer sb = new StringBuffer(64);sb.append(Tokens.T_SET).append(' ').append(Tokens.T_TABLE).append(' ');sb.append(getName().getSchemaQualifiedStatementName());

StringBuffer sb = new StringBuffer(64);sb.append(Tokens.T_SET).append(' ').append(Tokens.T_TABLE).append(' ');sb.append(getName().getSchemaQualifiedStatementName());

---------------------------Clone group no  1004 for hash 5c3940419e55b95bcb1c863c6c4ccf45--------------------



// fall through
            case OpTypes.GREATER :case OpTypes.GREATER_EQUAL :case OpTypes.GREATER_EQUAL_PRE :case OpTypes.SMALLER :case OpTypes.SMALLER_EQUAL :

case OpTypes.GREATER :case OpTypes.GREATER_EQUAL :case OpTypes.GREATER_EQUAL_PRE :case OpTypes.SMALLER :case OpTypes.SMALLER_EQUAL :

---------------------------Clone group no  1005 for hash 76b60fd3d8707ee2799919d1bfe36f69--------------------



opTypeEnd     = OpTypes.MAX;opTypesEnd[0] = OpTypes.MAX;break;

opTypeEnd     = OpTypes.MAX;opTypesEnd[0] = OpTypes.MAX;break;

---------------------------Clone group no  1006 for hash 0165ffe916aa445300652f4ab9986e33--------------------



table = (Table) tables.next();if (table.isView()
                    || !session.getGrantee().hasNonSelectTableRight(table)) {
                continue;
            }constraints = table.getConstraints();

table = (Table) tables.next();/** requires any INSERT or UPDATE or DELETE or REFERENCES or TRIGGER, (not SELECT) right */
            if (table.isView()
                    || !session.getGrantee().hasNonSelectTableRight(table)) {
                continue;
            }constraints     = table.getConstraints();

---------------------------Clone group no  1007 for hash bd97a76b752b28df45be2f94f66b075c--------------------



token.tokenString =
                            sqlString.substring(currentPosition,
                                                currentPosition + 2);token.tokenType   = Tokens.X_UNKNOWN_TOKEN;token.isDelimiter = true;return;

token.tokenString = sqlString.substring(currentPosition,
                        currentPosition + 2);token.tokenType   = Tokens.X_UNKNOWN_TOKEN;token.isDelimiter = true;return;

token.tokenString = sqlString.substring(currentPosition,
                        currentPosition + 2);token.tokenType   = Tokens.X_UNKNOWN_TOKEN;token.isDelimiter = true;return;

---------------------------Clone group no  1008 for hash 8c26672ebc1089260825407fb57ca0d4--------------------



ResultLob resultLob =
                        ResultLob.newLobCreateClobRequest(session.getId(), id,
                            reader, length);session.allocateResultLob(resultLob, null);resultOut.addLobResult(resultLob);

ResultLob resultLob =
                        ResultLob.newLobCreateClobRequest(session.getId(), id,
                            reader, length);session.allocateResultLob(resultLob, null);resultOut.addLobResult(resultLob);

---------------------------Clone group no  1009 for hash e371a3874d7450a47fbeaa7fa695263e--------------------



int               i;PreparedStatement ps;ResultSet         rs;Savepoint         sp1;

int               i;PreparedStatement ps;ResultSet         rs;Savepoint         sp1;

---------------------------Clone group no  1010 for hash 44e12da0eb38fd73d648e4c4d036eff3--------------------



long avail = availableLength - currentPosition;if (avail > Integer.MAX_VALUE) {
            return Integer.MAX_VALUE;
        }return (int) avail;

long avail = availableLength - currentPosition;if (avail > Integer.MAX_VALUE) {
            return Integer.MAX_VALUE;
        }return (int) avail;

---------------------------Clone group no  1011 for hash 2ccc8ffd73935634ddbf57a8f47a58b1--------------------



isr = new InputStreamReader(is);while ((i = isr.read(readBfr)) > -1)
                sWriter.write(readBfr, 0, i);readBfr = null;str = sWriter.toString();sWriter.close();

isr = new InputStreamReader(is);while ((i = isr.read(readBfr)) > -1) sWriter.write(readBfr, 0, i);readBfr = null;str = sWriter.toString();sWriter.close();

---------------------------Clone group no  1012 for hash 0a3750eded6a7b9b4791bc86dbe6808f--------------------



break;default :throw Error.error(ErrorCode.X_42563);

break;default :throw Error.error(ErrorCode.X_42563);

break;default :throw Error.error(ErrorCode.X_42563);

break;default :throw Error.error(ErrorCode.X_42563);

break;default :throw Error.error(ErrorCode.X_42563);

---------------------------Clone group no  1013 for hash 38f2813993c2259e72b5e478f83721ab--------------------



if (store.getTable().tableType == TableBase.TEMP_TABLE) {
            return true;
        }RowAction action = (RowAction) rowActionMap.get(id);if (action == null) {
            return true;
        }return action.canRead(session, mode);

if (store.getTable().tableType == TableBase.TEMP_TABLE) {
            return true;
        }RowAction action = (RowAction) rowActionMap.get(id);if (action == null) {
            return true;
        }return action.canRead(session, mode);

---------------------------Clone group no  1014 for hash e37921d0f377ac1674dc0937d8387aab--------------------



case OpTypes.SMALLER :case OpTypes.SMALLER_EQUAL :case OpTypes.GREATER :case OpTypes.GREATER_EQUAL :case OpTypes.GREATER_EQUAL_PRE :

case OpTypes.SMALLER :case OpTypes.SMALLER_EQUAL :case OpTypes.GREATER :case OpTypes.GREATER_EQUAL :case OpTypes.GREATER_EQUAL_PRE :

---------------------------Clone group no  1015 for hash f599ad7991a5a5562997c74982df92d8--------------------



int b = r.nextInt();if (b == Integer.MIN_VALUE) {
            b = Integer.MAX_VALUE;
        }b = Math.abs(b);return b % range;

int b = r.nextInt();if (b == Integer.MIN_VALUE) {
            b = Integer.MAX_VALUE;
        }b = Math.abs(b);return b % range;

int b = r.nextInt();if (b == Integer.MIN_VALUE) {
            b = Integer.MAX_VALUE;
        }b = Math.abs(b);return b % range;

---------------------------Clone group no  1016 for hash cffaee64b43a99f86480dabe2f4f50b9--------------------



case FUNC_LOAD_FILE :case FUNC_ROUND :case FUNC_TIMESTAMP :case FUNC_TO_DATE :

case FUNC_LOAD_FILE :case FUNC_ROUND :case FUNC_TIMESTAMP :case FUNC_TO_DATE :

---------------------------Clone group no  1017 for hash 010c25cac4f77dac9bb79578ea19bcc9--------------------



if (key == null) {
            throw new NoSuchElementException();
        }int hash   = key.hashCode();int lookup = getLookup(key, hash);if (lookup != -1) {
            return intValueTable[lookup];
        }

if (key == null) {
            throw new NoSuchElementException();
        }int hash   = key.hashCode();int lookup = getLookup(key, hash);if (lookup != -1) {
            return intValueTable[lookup];
        }

---------------------------Clone group no  1018 for hash e8c21547fc19e1b26c4a9c1ddf3a864a--------------------



String dml0 = \"insert into clobtest(clobfield) values ?\";String            value = \"0123456789\";PreparedStatement ps    = connection.prepareStatement(dml0);

String dml0 = \"insert into clobtest(clobfield) values ?\";String            value = \"0123456789\";PreparedStatement ps    = connection.prepareStatement(dml0);

---------------------------Clone group no  1019 for hash 778e723030f135f7f8646a6b4d122d2d--------------------



outPacket.xmit('C', dataOutput);sendReadyForQuery = true;break;

outPacket.xmit('C', dataOutput);sendReadyForQuery = true;break;

outPacket.xmit('C', dataOutput);sendReadyForQuery = true;break;

outPacket.xmit('C', dataOutput);sendReadyForQuery = true;break;

outPacket.xmit('C', dataOutput);sendReadyForQuery = true;break;

---------------------------Clone group no  1020 for hash 552e0d9b1d5884f39c57ebbfa2c22b3c--------------------



result.blockOffset = dataInput.readLong();result.blockLength = dataInput.readLong();result.byteBlock   = new byte[(int) result.blockLength];dataInput.readFully(result.byteBlock);break;

result.blockOffset = dataInput.readLong();result.blockLength = dataInput.readLong();result.byteBlock   = new byte[(int) result.blockLength];dataInput.readFully(result.byteBlock);break;

---------------------------Clone group no  1021 for hash c462e87262ca8e4e045a842d308c5525--------------------



case TELLER :max = ntellers * tps - 1;break;case BRANCH :max = nbranches * tps - 1;break;case ACCOUNT :max = naccounts * tps - 1;break;

case TELLER :max = ntellers * tps - 1;break;case BRANCH :max = nbranches * tps - 1;break;case ACCOUNT :max = naccounts * tps - 1;break;

---------------------------Clone group no  1022 for hash e8a2fa080669937b1b238bd4ddd47a12--------------------



String   sql  = getLastPart();Object[] args = new Object[] {
            StatementTypes.ADD_CONSTRAINT, table, c
        };HsqlName[] writeLockNames =
            database.schemaManager.getCatalogAndBaseTableNames(
                table.getName());

String   sql  = getLastPart();Object[] args = new Object[] {
            StatementTypes.ADD_CONSTRAINT, table, c
        };HsqlName[] writeLockNames =
            database.schemaManager.getCatalogAndBaseTableNames(
                table.getName());

---------------------------Clone group no  1023 for hash 73b0c563cb0fc9159a66e6a63b726ff2--------------------



// Column number mappings
        final int view_catalog  = 0;final int view_schema   = 1;final int view_name     = 2;final int table_catalog = 3;final int table_schema  = 4;final int table_name    = 5;

// Column number mappings
        final int view_catalog  = 0;final int view_schema   = 1;final int view_name     = 2;final int table_catalog = 3;final int table_schema  = 4;final int table_name    = 5;

---------------------------Clone group no  1024 for hash 078a9be7a7233424accfaa0ed110d247--------------------



parameterValues[i - 1] = o;parameterSet[i - 1]    = Boolean.TRUE;break;

parameterValues[i - 1] = o;parameterSet[i - 1]    = Boolean.TRUE;break;

parameterValues[i - 1] = o;parameterSet[i - 1]    = Boolean.TRUE;break;

---------------------------Clone group no  1025 for hash 3cf1b2d511bb04503257a0389a32b5c5--------------------



if (bufferDirty || seekPosition < bufferOffset
                || seekPosition >= bufferOffset + buffer.length) {
            readIntoBuffer();
        }ba.reset();ba.skip(seekPosition - bufferOffset);

if (bufferDirty || seekPosition < bufferOffset
                || seekPosition >= bufferOffset + buffer.length) {
            readIntoBuffer();
        }ba.reset();ba.skip(seekPosition - bufferOffset);

if (bufferDirty || seekPosition < bufferOffset
                || seekPosition >= bufferOffset + buffer.length) {
            readIntoBuffer();
        }ba.reset();ba.skip(seekPosition - bufferOffset);

---------------------------Clone group no  1026 for hash 306d238e3640f95e253897869f77b288--------------------



case OpTypes.EQUAL :case OpTypes.GREATER :case OpTypes.GREATER_EQUAL :case OpTypes.SMALLER_EQUAL :

case OpTypes.EQUAL :case OpTypes.GREATER :case OpTypes.GREATER_EQUAL :case OpTypes.SMALLER_EQUAL :

---------------------------Clone group no  1027 for hash 57ab081205fc862cc3b4488da0e88b34--------------------



if (a == null) {
            return 0;
        }int      hash  = 0;Object[] array = (Object[]) a;

if (a == null) {
            return 0;
        }int      hash  = 0;Object[] array = (Object[]) a;

---------------------------Clone group no  1028 for hash 3942fc8c792df246053e5692988aa689--------------------



case SchemaObject.DOMAIN :case SchemaObject.TYPE :set = schema.typeLookup;

case SchemaObject.DOMAIN :case SchemaObject.TYPE :set    = schema.typeLookup;

---------------------------Clone group no  1029 for hash 9ef96c54711d86fddc6aeaffa70f9583--------------------



actionType = ACTION_INSERT;session.tempSet.clear();session.tempSet.add(action);

actionType = ACTION_INSERT;session.tempSet.clear();session.tempSet.add(action);

---------------------------Clone group no  1030 for hash 9201adb2b3bea7853fccc5787a7a5ffd--------------------



if (a == b) {
            return 0;
        }if (a == null) {
            return -1;
        }if (b == null) {
            return 1;
        }Object[] arra   = (Object[]) a;Object[] arrb   = (Object[]) b;

if (a == b) {
            return 0;
        }if (a == null) {
            return -1;
        }if (b == null) {
            return 1;
        }Object[] arra   = (Object[]) a;Object[] arrb   = (Object[]) b;

if (a == b) {
            return 0;
        }// not related to sort
        if (a == null) {
            return -1;
        }if (b == null) {
            return 1;
        }Object[] arra   = (Object[]) a;Object[] arrb   = (Object[]) b;

---------------------------Clone group no  1031 for hash f9db87985e42443d65f99daf8c058ed4--------------------



addColumn(t, \"BUFFER_LENGTH\", Type.SQL_INTEGER);addColumn(t, \"DECIMAL_DIGITS\", Type.SQL_SMALLINT);addColumn(t, \"PSEUDO_COLUMN\", Type.SQL_SMALLINT);    // not nulladdColumn(t, \"TABLE_CAT\", SQL_IDENTIFIER);addColumn(t, \"TABLE_SCHEM\", SQL_IDENTIFIER);addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);          // not null

addColumn(t, \"BUFFER_LENGTH\", Type.SQL_INTEGER);addColumn(t, \"DECIMAL_DIGITS\", Type.SQL_SMALLINT);addColumn(t, \"PSEUDO_COLUMN\", Type.SQL_SMALLINT);    // not null// -----------------------------------------------------------------
            // required by DatabaseMetaData.getVersionColumns filter parameters
            // -----------------------------------------------------------------
            addColumn(t, \"TABLE_CAT\", SQL_IDENTIFIER);addColumn(t, \"TABLE_SCHEM\", SQL_IDENTIFIER);addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);          // not null

---------------------------Clone group no  1032 for hash cbdb80b136875e3ff3181340c16aa40f--------------------



c = new ExpressionOp(OpTypes.CASEWHEN, condition, alternative);c.setSubType(OpTypes.CAST);readThis(Tokens.CLOSEBRACKET);return c;

c = new ExpressionOp(OpTypes.CASEWHEN, condition, alternative);c.setSubType(OpTypes.CAST);readThis(Tokens.CLOSEBRACKET);return c;

---------------------------Clone group no  1033 for hash 813e237f8660cdaf48404819d9efcd23--------------------



actionSession.waitingSessions.add(session);session.waitedSessions.add(actionSession);session.latch.countUp();

actionSession.waitingSessions.add(session);session.waitedSessions.add(actionSession);session.latch.countUp();

---------------------------Clone group no  1034 for hash ef6bf060518d364498a10bd5893a6b1e--------------------



int ret = 0;ret = (int) (Math.random() * (hi - lo + 1));ret += lo;return ret;

int ret = 0;ret = (int) (Math.random() * (hi - lo + 1));ret += lo;return ret;

---------------------------Clone group no  1035 for hash a09ce1dff76b996b05e758bb5ef5b853--------------------



if (a == b) {
            return 0;
        }if (a == null) {
            return -1;
        }if (b == null) {
            return 1;
        }

if (a == b) {
            return 0;
        }if (a == null) {
            return -1;
        }if (b == null) {
            return 1;
        }

if (a == b) {
            return 0;
        }// not related to sort
        if (a == null) {
            return -1;
        }if (b == null) {
            return 1;
        }

if (a == b) {
            return 0;
        }if (a == null) {
            return -1;
        }if (b == null) {
            return 1;
        }

if (a == b) {
            return 0;
        }if (a == null) {
            return -1;
        }if (b == null) {
            return 1;
        }

if (a == b) {
            return 0;
        }if (a == null) {
            return -1;
        }if (b == null) {
            return 1;
        }

if (a == b) {
            return 0;
        }if (a == null) {
            return -1;
        }if (b == null) {
            return 1;
        }

if (a == b) {
            return 0;
        }if (a == null) {
            return -1;
        }if (b == null) {
            return 1;
        }

if (a == b) {
            return 0;
        }if (a == null) {
            return -1;
        }if (b == null) {
            return 1;
        }

if (a == b) {
            return 0;
        }if (a == null) {
            return -1;
        }if (b == null) {
            return 1;
        }

// handle nulls
        if (a == b) {
            return 0;
        }if (a == null) {
            return -1;
        }if (b == null) {
            return 1;
        }

if (a == b) {
            return 0;
        }if (a == null) {
            return -1;
        }if (b == null) {
            return 1;
        }

---------------------------Clone group no  1036 for hash 453d5722a89e8d7e1a2de4b527300f5e--------------------



canCascade    = false;useIfExists   = true;break;

canCascade    = false;useIfExists   = true;break;

canCascade    = false;useIfExists   = true;break;

---------------------------Clone group no  1037 for hash f65ab3957d060f9da97bc60a79518f5b--------------------



case Types.SQL_REAL :case Types.SQL_FLOAT :case Types.SQL_DOUBLE :return false;

case Types.SQL_REAL :case Types.SQL_FLOAT :case Types.SQL_DOUBLE :return false;

---------------------------Clone group no  1038 for hash 32b9c9529fdee752f16df14f1763ec33--------------------



ps.setInt(1, random);ps.execute();if (reportProgress && (i + 1) % 10000 == 0
                        || (slow && (i + 1) % 100 == 0)) {
                    System.out.println(\"Update \" + (i + 1) + \" : \"
                                       + sw.elapsedTime() + \" rps: \"
                                       + (i * 1000 / (sw.elapsedTime() + 1)));
                }

ps.setInt(1, random);ps.execute();if (reportProgress && (i + 1) % 10000 == 0
                        || (slow && (i + 1) % 100 == 0)) {
                    System.out.println(\"Update \" + (i + 1) + \" : \"
                                       + sw.elapsedTime() + \" rps: \"
                                       + (i * 1000 / (sw.elapsedTime() + 1)));
                }

---------------------------Clone group no  1039 for hash baaa442156be0263b33a4f15377b4b9c--------------------



// column number mappings
        final int itable_cat         = 0;final int itable_schem       = 1;final int itable_name        = 2;final int icolumn_name       = 3;

// column number mappings
        final int itable_cat   = 0;final int itable_schem = 1;final int itable_name  = 2;final int icolumn_name = 3;

---------------------------Clone group no  1040 for hash ff1d8bc015d217e134f1ae1a92456b09--------------------



break;default :throw Error.runtimeError(ErrorCode.U_S0500, \"\");

break;default :throw Error.runtimeError(ErrorCode.U_S0500, \"\");

---------------------------Clone group no  1041 for hash d84a441dc92ca0764334d0c9da664d49--------------------



final int specific_catalog   = 3;final int specific_schema    = 4;final int specific_name      = 5;

final int specific_catalog = 3;final int specific_schema  = 4;final int specific_name    = 5;

final int specific_catalog = 3;final int specific_schema  = 4;final int specific_name    = 5;

final int specific_catalog = 3;final int specific_schema  = 4;final int specific_name    = 5;

---------------------------Clone group no  1042 for hash f590bfdd82534d7417dbcfd52f52f8d7--------------------



ps.setInt(1, i);ps.setInt(4, i);ps.executeUpdate();

ps.setInt(1, i);ps.setInt(4, i);ps.executeUpdate();

ps.setInt(1, i);ps.setInt(4, i);ps.executeUpdate();

ps.setInt(1, i);ps.setInt(4, i);ps.executeUpdate();

ps.setInt(1, i);ps.setInt(4, i);ps.executeUpdate();

ps.setInt(1, i);ps.setInt(4, i);ps.executeUpdate();

ps.setInt(1, i);ps.setInt(4, i);ps.executeUpdate();

---------------------------Clone group no  1043 for hash 2adabb2724c3fd5d1c37c75e638b8fec--------------------



int data1 = clob1.getSubString(1, data.length()).indexOf(\"insert\");int data2 = clob2.getSubString(1, data.length()).indexOf(\"INSERT\");assertTrue(data1 == data2 && data1 > 0);

int data1 = clob1.getSubString(1, data.length()).indexOf(\"insert\");int data2 = clob2.getSubString(1, data.length()).indexOf(\"INSERT\");assertTrue(data1 == data2 && data1 > 0);

---------------------------Clone group no  1044 for hash e74d828949faf5057100fe762622c366--------------------



case FUNC_TO_TIMESTAMP :case FUNC_TO_TIMESTAMP_TZ :case FUNC_TRUNC :case FUNC_TRUNCATE :

case FUNC_TO_TIMESTAMP :case FUNC_TO_TIMESTAMP_TZ :case FUNC_TRUNC :case FUNC_TRUNCATE :

---------------------------Clone group no  1045 for hash ed151a56d37cd1d5e1bd78d1a6c138f2--------------------



//
            addColumn(t, \"TO_SQL_SPECIFIC_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"TO_SQL_SPECIFIC_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"TO_SQL_SPECIFIC_NAME\", SQL_IDENTIFIER);

addColumn(t, \"TO_SQL_SPECIFIC_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"TO_SQL_SPECIFIC_SCHEMA\", SQL_IDENTIFIER);    //addColumn(t, \"TO_SQL_SPECIFIC_NAME\", SQL_IDENTIFIER);

---------------------------Clone group no  1046 for hash f67e60a34f6e8dda19888a1dd8a25335--------------------



list.add(sb.toString());sb.setLength(0);sb.append(\"SET DATABASE \").append(Tokens.T_SQL).append(' ');sb.append(Tokens.T_TDC).append(' ');

list.add(sb.toString());sb.setLength(0);sb.append(\"SET DATABASE \").append(Tokens.T_SQL).append(' ');sb.append(Tokens.T_TDC).append(' ');

---------------------------Clone group no  1047 for hash 058ea7b7d222998381bf488aa7ded813--------------------



System.out.println();System.out.println(\"-v          verbose error messages\");System.out.println(\"-init       initialize the tables\");System.out.println(\"-tpc        transactions per client\");System.out.println(\"-clients    number of simultaneous clients\");System.exit(-1);

System.out.println();System.out.println(\"-v          verbose error messages\");System.out.println(\"-init       initialize the tables\");System.out.println(\"-tpc        transactions per client\");System.out.println(\"-clients    number of simultaneous clients\");System.exit(-1);

---------------------------Clone group no  1048 for hash 3801d379a473c831de3f7e5b94dc7f6b--------------------



Connection c  = newConnection();Statement  st = c.createStatement();String     s  = \"DROP TABLE T IF EXISTS\";st.execute(s);s = \"CREATE TABLE T (I INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 33), C CHARACTER(10))\";st.execute(s);s = \"INSERT INTO T (C) VALUES('TEST')\";

Connection c  = newConnection();Statement  st = c.createStatement();String     s  = \"DROP TABLE T IF EXISTS\";st.execute(s);s = \"CREATE TABLE T (I INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 33), C CHARACTER(10))\";st.execute(s);s = \"INSERT INTO T (C) VALUES('TEST')\";

---------------------------Clone group no  1049 for hash fa2427689914942134fe89ccf6e0d87c--------------------



result.lobID       = id;result.blockOffset = offset;return result;

result.lobID       = id;result.blockOffset = offset;return result;

---------------------------Clone group no  1050 for hash a7502be5a0e76a6ccbfb53fa0c883f81--------------------



f.show();String sFileName = f.getFile();String Path      = f.getDirectory();

f.show();String sFileName = f.getFile();String Path      = f.getDirectory();

---------------------------Clone group no  1051 for hash 5494ef4fc99c6494b4652ebfe78862bc--------------------



read();long value = readBigint();sequence.setMinValueNoCheck(value);break;

read();long value = readBigint();sequence.setMinValueNoCheck(value);break;

---------------------------Clone group no  1052 for hash 06f562437cc0dbeaccee8ccba6875f6a--------------------



sw.stop();System.out.println(sw.elapsedTimeToMessage(\"Time for inserts\"));ps = connection.prepareStatement(dml1);sw.zero();sw.start();

sw.stop();System.out.println(sw.elapsedTimeToMessage(\"Time for inserts\"));ps = connection.prepareStatement(dml1);sw.zero();sw.start();

---------------------------Clone group no  1053 for hash 22e8f16d4608e9de96be7ec2b638fbff--------------------



break;default :throw new IllegalArgumentException(
                    RB.compression_unknown.getString(compressionType));

break;default :throw new IllegalArgumentException(
                    RB.compression_unknown.getString(compressionType));

---------------------------Clone group no  1054 for hash 6d7a0ad20fe5c51207b111a08ef2432b--------------------



break;default :throw Error.runtimeError(ErrorCode.U_S0500, \"NumberType\");

break;default :throw Error.runtimeError(ErrorCode.U_S0500, \"NumberType\");

---------------------------Clone group no  1055 for hash cd9fe59e1ab8766885aaed102a35f2e9--------------------



int count = colIndexSetOther.get(colIndex, 0);colIndexSetOther.put(colIndex, count + 1);break;

int count    = colIndexSetOther.get(colIndex, 0);colIndexSetOther.put(colIndex, count + 1);break;

---------------------------Clone group no  1056 for hash 325b4c6e85f3940689a8ac16039c8356--------------------



case '\\u000B':case '\\u000C':case '\\u0085':case '\\u2028':case '\\u2029':

case '\\u000B':case '\\u000C':case '\\u0085':case '\\u2028':case '\\u2029':

---------------------------Clone group no  1057 for hash 36d66097652af74c8b62aa06d8b3443d--------------------



readThis(Tokens.CLOSEBRACKET);break;default :

readThis(Tokens.CLOSEBRACKET);break;default :

readThis(Tokens.CLOSEBRACKET);break;default :

---------------------------Clone group no  1058 for hash e87317844b3ac324a459b36064ce9cf8--------------------



statements = new Statement[list.size()];list.toArray(statements);StatementCompound result = new StatementCompound(StatementTypes.IF,
            null);result.setStatements(statements);return result;

statements = new Statement[list.size()];list.toArray(statements);StatementCompound result = new StatementCompound(StatementTypes.IF,
            null);result.setStatements(statements);return result;

---------------------------Clone group no  1059 for hash cd0467f370ebd1b37ac83b9da07e9f0c--------------------



read();readThis(Tokens.NULLS);flag     = processTrueOrFalseObject();

read();readThis(Tokens.NULLS);flag     = processTrueOrFalseObject();

---------------------------Clone group no  1060 for hash 2b7128d5677f05e7939441154e7aaa48--------------------



NodeAVL node  = ((RowAVL) row).getNode(0);int     count = 0;while (node != null) {
            count++;

            node = node.nNext;
        }

NodeAVL node  = ((RowAVL) row).getNode(0);int     count = 0;while (node != null) {
            count++;

            node = node.nNext;
        }

---------------------------Clone group no  1061 for hash 5ee2cc8e8fd091495a57d96058137694--------------------



cs = session.statementManager.getStatement(session, cs);session.sessionContext.currentStatement = cs;if (cs == null) {
                    return;
                }

cs = session.statementManager.getStatement(session, cs);session.sessionContext.currentStatement = cs;if (cs == null) {
                    return;
                }

cs = session.statementManager.getStatement(session, cs);session.sessionContext.currentStatement = cs;if (cs == null) {
                    return;
                }

---------------------------Clone group no  1062 for hash 72de337a5d3fb3e910419ec7d76e1a68--------------------



int oldSize = size();super.addOrRemove(0, 0, key, null, true);return oldSize != size();

int oldSize = size();super.addOrRemove(0, 0, key, null, true);return oldSize != size();

---------------------------Clone group no  1063 for hash a719d92d0cc21c5eab3dd779f92753a8--------------------



continue;default :break;

continue;default :break;

---------------------------Clone group no  1064 for hash 064d8de88f4b77fb09241d1ca9167eb7--------------------



char[] b = new char[(int) precision];((String) a).getChars(0, slen, b, 0);for (int i = slen; i < precision; i++) {
                    b[i] = ' ';
                }return new String(b);

char[] b = new char[(int) precision];((String) a).getChars(0, slen, b, 0);for (int i = slen; i < precision; i++) {
                    b[i] = ' ';
                }return new String(b);

---------------------------Clone group no  1065 for hash 8474a1645378f12ab72147709fd5424e--------------------



synchronized (committedTransactionTimestamps) {
                if (committedTransactionTimestamps.isEmpty()) {
                    break;
                }

                commitTimestamp = committedTransactionTimestamps.getFirst();

                if (commitTimestamp < timestamp) {
                    committedTransactionTimestamps.removeFirst();

                    actions = (Object[]) committedTransactions.removeFirst();
                } else {
                    break;
                }
            }mergeTransaction(actions, 0, actions.length, commitTimestamp);finaliseRows(session, actions, 0, actions.length);

synchronized (committedTransactionTimestamps) {
                if (committedTransactionTimestamps.isEmpty()) {
                    break;
                }

                commitTimestamp = committedTransactionTimestamps.getFirst();

                if (commitTimestamp < timestamp) {
                    committedTransactionTimestamps.removeFirst();

                    actions = (Object[]) committedTransactions.removeFirst();
                } else {
                    break;
                }
            }mergeTransaction(actions, 0, actions.length, commitTimestamp);finaliseRows(session, actions, 0, actions.length);

---------------------------Clone group no  1066 for hash 4321aa7c6a99dcb3237666a01e4721f9--------------------



rs.close();rs = st1.executeQuery(\"select sum(delta) from history\");rs.next();deltasum = rs.getInt(1);rs.close();rs = null;st1.close();st1 = null;

rs.close();rs = st1.executeQuery(\"select sum(delta) from history\");rs.next();deltasum = rs.getInt(1);rs.close();rs = null;st1.close();st1 = null;

---------------------------Clone group no  1067 for hash c577ee515ce98e922fa29b0829ad1415--------------------



updateUserSettings();sqlExpandMode = null;fetchingVar = null;

updateUserSettings();sqlExpandMode = null;fetchingVar = null;

updateUserSettings();sqlExpandMode = null;fetchingVar = null;

updateUserSettings();sqlExpandMode = null;fetchingVar = null;

---------------------------Clone group no  1068 for hash e8118ddca67308f873f3ed21d49c8b09--------------------



outPacket.writeShort(4);outPacket.writeInt(-1);outPacket.writeShort(0);outPacket.xmit('T', dataOutput);      // Xmit Row Definition// This query returns no rows.  typenam \"lo\"??
                        outPacket.write(\"SELECT\");outPacket.xmit('C', dataOutput);sendReadyForQuery = true;break;

outPacket.writeShort(4);              // Datatype size  [adtsize]outPacket.writeInt(-1);               // Var size [atttypmod]outPacket.writeShort(0);              // text \"format code\"outPacket.xmit('T', dataOutput);      // sending a Tuple (row)// This query returns no rows.  typenam \"lo\"??
                        outPacket.write(\"SELECT\");outPacket.xmit('C', dataOutput);sendReadyForQuery = true;break;

---------------------------Clone group no  1069 for hash fd267a2cad082a2fbeec019186ae8031--------------------



sb.append(' ').append(propEventLogLevel);list.add(sb.toString());sb.setLength(0);

sb.append(' ').append(propEventLogLevel);list.add(sb.toString());sb.setLength(0);

---------------------------Clone group no  1070 for hash ee8ffdb30034bf65efdaa83687fe9c96--------------------



case SchemaObject.SEQUENCE :case SchemaObject.CHARSET :case SchemaObject.DOMAIN :case SchemaObject.TYPE :case SchemaObject.COLLATION :case SchemaObject.PROCEDURE :case SchemaObject.FUNCTION :case SchemaObject.SPECIFIC_ROUTINE :

case SchemaObject.SEQUENCE :case SchemaObject.CHARSET :case SchemaObject.DOMAIN :case SchemaObject.TYPE :case SchemaObject.COLLATION :case SchemaObject.PROCEDURE :case SchemaObject.FUNCTION :case SchemaObject.SPECIFIC_ROUTINE :

---------------------------Clone group no  1071 for hash ba8dd224563e714dd62b7928d87c7564--------------------



pstmt.setInt(1, i);pstmt.executeUpdate();pstmt.clearWarnings();

pstmt.setInt(1, i);pstmt.executeUpdate();pstmt.clearWarnings();

---------------------------Clone group no  1072 for hash 1e4a15efab6fd8dd92c63cf9fc016d80--------------------



columnMap = new int[colIndexList.size()];colIndexList.toArray(columnMap);Expression[] targets = new Expression[targetSet.size()];targetSet.toArray(targets);

columnMap = new int[colIndexList.size()];colIndexList.toArray(columnMap);Expression[] targets = new Expression[targetSet.size()];targetSet.toArray(targets);

---------------------------Clone group no  1073 for hash 2b8a981721bbe16406535b00be866605--------------------



read();readThis(Tokens.BY);long value = readBigint();sequence.setIncrement(value);break;

read();readThis(Tokens.BY);long value = readBigint();sequence.setIncrement(value);break;

---------------------------Clone group no  1074 for hash e7eca7a3759e1ff3df02f21330f265ee--------------------



token.tokenType   = Tokens.X_MALFORMED_BINARY_STRING;token.isMalformed = true;return;

// bad character
                token.tokenType   = Tokens.X_MALFORMED_BINARY_STRING;token.isMalformed = true;return;

// odd nibbles
            token.tokenType   = Tokens.X_MALFORMED_BINARY_STRING;token.isMalformed = true;return;

// no end quote
            token.tokenType   = Tokens.X_MALFORMED_BINARY_STRING;token.isMalformed = true;return;

---------------------------Clone group no  1075 for hash 96cc5ecbff476d66a6a372fb5904cb40--------------------



case StatementTypes.FETCH :case StatementTypes.FREE_LOCATOR :case StatementTypes.GET_DESCRIPTOR :case StatementTypes.HOLD_LOCATOR :

//
            case StatementTypes.FETCH :case StatementTypes.FREE_LOCATOR :case StatementTypes.GET_DESCRIPTOR :case StatementTypes.HOLD_LOCATOR :

---------------------------Clone group no  1076 for hash e0a0e1e579b67be007b7b7e64d7f1194--------------------



Result    resultIn  = session.execute(resultOut);if (resultIn.isError()) {
            throw resultIn.getException();
        }long lobID = ((ResultLob) resultIn).getLobID();return new ClobDataID(lobID);

Result    resultIn  = session.execute(resultOut);if (resultIn.isError()) {
            throw resultIn.getException();
        }long lobID = ((ResultLob) resultIn).getLobID();return new ClobDataID(lobID);

---------------------------Clone group no  1077 for hash f5b3c0e2ab4c24c538f706aad7290758--------------------



case OpTypes.CAST :sb.append(' ').append(Tokens.T_CAST).append('(');sb.append(left).append(' ').append(Tokens.T_AS).append(' ');sb.append(dataType.getTypeDefinition());sb.append(')');

case OpTypes.CAST :sb.append(' ').append(Tokens.T_CAST).append('(');sb.append(left).append(' ').append(Tokens.T_AS).append(' ');sb.append(dataType.getTypeDefinition());sb.append(')');

---------------------------Clone group no  1078 for hash 4cc719ee11dffa6bd28a6cd3b8c4ebb5--------------------



case SchemaObject.VIEW :case SchemaObject.TABLE :case SchemaObject.SEQUENCE :case SchemaObject.CHARSET :

case SchemaObject.VIEW :case SchemaObject.TABLE :case SchemaObject.SEQUENCE :case SchemaObject.CHARSET :

case SchemaObject.VIEW :case SchemaObject.TABLE :case SchemaObject.SEQUENCE :case SchemaObject.CHARSET :

case SchemaObject.VIEW :case SchemaObject.TABLE :case SchemaObject.SEQUENCE :case SchemaObject.CHARSET :

---------------------------Clone group no  1079 for hash eccc6a2cc1e658ba015bd41b5b9a8744--------------------



addColumn(t, \"CHARACTER_SET_CATALOG\", CHARACTER_DATA);addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);        //20addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);

addColumn(t, \"CHARACTER_SET_CATALOG\", CHARACTER_DATA);addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);

---------------------------Clone group no  1080 for hash 4d5604216db3d3089f9c76670b22e374--------------------



case FUNC_POSITION_REGEX :break;case FUNC_EXTRACT :

case FUNC_POSITION_REGEX :break;case FUNC_EXTRACT :

---------------------------Clone group no  1081 for hash d92d10d5cff8dc1becf5da88d453da8e--------------------



//
            case StatementTypes.PREPARABLE_DYNAMIC_DELETE_CURSOR :case StatementTypes.PREPARABLE_DYNAMIC_UPDATE_CURSOR :case StatementTypes.PREPARE :

case StatementTypes.PREPARABLE_DYNAMIC_DELETE_CURSOR :case StatementTypes.PREPARABLE_DYNAMIC_UPDATE_CURSOR :case StatementTypes.PREPARE :

---------------------------Clone group no  1082 for hash 6be1933bc6989dfa8bd61f2754081504--------------------



//
            case OpTypes.COUNT :case OpTypes.SUM :case OpTypes.MIN :case OpTypes.MAX :case OpTypes.AVG :case OpTypes.EVERY :case OpTypes.SOME :case OpTypes.STDDEV_POP :case OpTypes.STDDEV_SAMP :case OpTypes.VAR_POP :case OpTypes.VAR_SAMP :return false;

case OpTypes.COUNT :case OpTypes.SUM :case OpTypes.MIN :case OpTypes.MAX :case OpTypes.AVG :case OpTypes.EVERY :case OpTypes.SOME :case OpTypes.STDDEV_POP :case OpTypes.STDDEV_SAMP :case OpTypes.VAR_POP :case OpTypes.VAR_SAMP :return false;

---------------------------Clone group no  1083 for hash 94e4c2e64a72b34fd3ae5fe4870047d8--------------------



indexList    = keys;accessorList = new CachedObject[indexList.length];return;

indexList    = keys;accessorList = new CachedObject[indexList.length];return;

indexList    = keys;accessorList = new CachedObject[indexList.length];return;

---------------------------Clone group no  1084 for hash e6b790d9c0a7ee15f4ac605b5ab0077d--------------------



if (data[1] == null || data[2] == null) {
                    return null;
                }boolean leading  = false;boolean trailing = false;

if (data[1] == null || data[2] == null) {
                    return null;
                }boolean leading  = false;boolean trailing = false;

---------------------------Clone group no  1085 for hash 40bf9e631dfdbbf1c9874bd9e75c4423--------------------



ResultLob resultOut = ResultLob.newLobDuplicateRequest(id);Result    resultIn  = session.execute(resultOut);if (resultIn.isError()) {
            throw resultIn.getException();
        }long lobID = ((ResultLob) resultIn).getLobID();

ResultLob resultOut = ResultLob.newLobDuplicateRequest(id);Result    resultIn  = session.execute(resultOut);if (resultIn.isError()) {
            throw resultIn.getException();
        }long lobID = ((ResultLob) resultIn).getLobID();

---------------------------Clone group no  1086 for hash 5fa9c2b76a0fc27670bac3c15ab2f8fd--------------------



if (data[0] == null || data[1] == null || data[2] == null) {
                    return null;
                }Object value;value = Type.SQL_BIGINT.convertToType(session, data[2],
                                                      nodes[2].dataType);long offset = ((Number) value).longValue() - 1;long length = 0;if (nodes[3] != null) {
                    if (data[3] == null) {
                        return null;
                    }

                    value = Type.SQL_BIGINT.convertToType(session, data[3],
                                                          nodes[3].dataType);
                    length = ((Number) value).longValue();
                }

if (data[0] == null || data[1] == null || data[2] == null) {
                    return null;
                }Object value;value = Type.SQL_BIGINT.convertToType(session, data[2],
                                                      nodes[2].dataType);long offset = ((Number) value).longValue() - 1;long length = 0;if (nodes[3] != null) {
                    if (data[3] == null) {
                        return null;
                    }

                    value = Type.SQL_BIGINT.convertToType(session, data[3],
                                                          nodes[3].dataType);
                    length = ((Number) value).longValue();
                }

---------------------------Clone group no  1087 for hash fa2e40ee4b0d092f137593d4f6c0bb5c--------------------



boolean mode = ((Boolean) parameters[0]).booleanValue();session.checkAdmin();session.checkDDLWrite();

boolean mode = ((Boolean) parameters[0]).booleanValue();session.checkAdmin();session.checkDDLWrite();

boolean mode = ((Boolean) parameters[0]).booleanValue();session.checkAdmin();session.checkDDLWrite();

---------------------------Clone group no  1088 for hash 7d1bd9caf8410b2d2e2f495b3ba15304--------------------



row = t.getEmptyRowData();//
                row[trigger_catalog] = database.getCatalogName().name;row[trigger_schema]  = trigger.getSchemaName().name;row[trigger_name]    = trigger.getName().name;row[table_catalog]   = database.getCatalogName().name;

row                  = t.getEmptyRowData();row[trigger_catalog] = database.getCatalogName().name;row[trigger_schema]  = trigger.getSchemaName().name;row[trigger_name]    = trigger.getName().name;row[table_catalog]   = database.getCatalogName().name;

---------------------------Clone group no  1089 for hash 8c8d7ef28fc11913c550450e2d95dfc7--------------------



StringBuffer sb;String       temp;StringBuffer b = new StringBuffer(blanks);for (int i = 0; i < blanks; i++) {
            b.append(' ');
        }sb = new StringBuffer();

StringBuffer sb;String       temp;StringBuffer b = new StringBuffer(blanks);for (int i = 0; i < blanks; i++) {
            b.append(' ');
        }sb = new StringBuffer();

---------------------------Clone group no  1090 for hash 52e752601ec434b7a336c8f8105de8dd--------------------



Table table = (Table) object;if (isFullyAccessibleByRole(table.getName())) {
                return;
            }Right right = (Right) fullRightsMap.get(table.getName());if (right != null && right.canReference(table, checkList)) {
                return;
            }

Table table = (Table) object;if (isFullyAccessibleByRole(table.getName())) {
                return;
            }Right right = (Right) fullRightsMap.get(table.getName());if (right != null && right.canReference(table, checkList)) {
                return;
            }

---------------------------Clone group no  1091 for hash 994fb999893ee7b3ead7b15ec7631199--------------------



double  value    = 0;boolean wasEqual = false;String  message  = \"DB operation completed\";String ddl1 =
            \"DROP TABLE t1 IF EXISTS;\"
            + \"CREATE TABLE t1 ( d DECIMAL, f DOUBLE, l BIGINT, i INTEGER, s SMALLINT, t TINYINT, \"
            + \"dt DATE DEFAULT CURRENT_DATE, ti TIME DEFAULT CURRENT_TIME, ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP );\";

double  value    = 0;boolean wasEqual = false;String  message  = \"DB operation completed\";String ddl1 =
            \"DROP TABLE t1 IF EXISTS;\"
            + \"CREATE TABLE t1 ( d DECIMAL, f DOUBLE, l BIGINT, i INTEGER, s SMALLINT, t TINYINT, \"
            + \"dt DATE DEFAULT CURRENT_DATE, ti TIME DEFAULT CURRENT_TIME, ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP );\";

---------------------------Clone group no  1092 for hash b3ffea39abe9534cbc1d11c69dde1e57--------------------



table = (Table) tables.next();/** @todo - requires access to the actual columns */
            if (!isAccessibleTable(session, table)) {
                continue;
            }ti.setTable(table);

table = (Table) tables.next();if (!isAccessibleTable(session, table)) {
                continue;
            }ti.setTable(table);

---------------------------Clone group no  1093 for hash 5452d18aa601d163f3ee55da4e663b35--------------------



Object[] row;// column number mappings
        final int constraint_catalog            = 0;final int constraint_schema             = 1;final int constraint_name               = 2;

Object[]     row;// column number mappings
        final int constraint_catalog = 0;final int constraint_schema  = 1;final int constraint_name    = 2;

---------------------------Clone group no  1094 for hash c055dd553e92c0ad13910e7fce19a065--------------------



resultOut.setUpdateCount(count);if (count == 0) {
                session.addWarning(HsqlException.noDataCondition);
            }return resultOut;

resultOut.setUpdateCount(count);if (count == 0) {
                session.addWarning(HsqlException.noDataCondition);
            }return resultOut;

---------------------------Clone group no  1095 for hash 6ae5e1a7fc6953da3a94f805abf7f538--------------------



pstmt.setInt(1, i);pstmt.setInt(2, i / naccounts);pstmt.executeUpdate();pstmt.clearWarnings();

pstmt.setInt(1, i);pstmt.setInt(2, i / naccounts);pstmt.executeUpdate();pstmt.clearWarnings();

---------------------------Clone group no  1096 for hash 691100b567b403ca8e4151414bbe1d9f--------------------



currentLine = currentLine.trim() + \";\";Tokenizer   = new StringTokenizer(currentLine);try {
                    Token = Tokenizer.nextToken();
                } catch (NoSuchElementException NSE) {
                    continue;
                }if (Token == null) {
                    continue;
                }

currentLine = currentLine.trim() + \";\";Tokenizer   = new StringTokenizer(currentLine);try {
                    Token = Tokenizer.nextToken();
                } catch (NoSuchElementException NSE) {
                    continue;
                }if (Token == null) {
                    continue;
                }

currentLine = currentLine.trim() + \";\";Tokenizer   = new StringTokenizer(currentLine);try {
                    Token = Tokenizer.nextToken();
                } catch (NoSuchElementException NSE) {
                    continue;
                }if (Token == null) {
                    continue;
                }

---------------------------Clone group no  1097 for hash 603b55329dd7b5d21b4a4568e370c0df--------------------



read();readThis(Tokens.JOIN);break;

read();readThis(Tokens.JOIN);break;

---------------------------Clone group no  1098 for hash 8bac26359badafa241e7ddcc7b4bee57--------------------



if (writer == null) {
            return;
        }sb.append(HsqlDateTime.getSystemTimeString()).append(' ');if (!isSQL) {
            sb.append(logTypeNames[atLevel]).append(' ');
        }sb.append(message);

if (writer == null) {
            return;
        }sb.append(HsqlDateTime.getSystemTimeString()).append(' ');if (!isSQL) {
            sb.append(logTypeNames[atLevel]).append(' ');
        }sb.append(message);

---------------------------Clone group no  1099 for hash d4253e20c0e3557a750dc9b661e1e844--------------------



table[i] = 0;i++;j = 0;

table[i] = 0;i++;j = 0;

table[i] = 0;i++;j = 0;

---------------------------Clone group no  1100 for hash a30d577c9c22a8427ed055921b97504b--------------------



rollback(false);sessionContext.currentStatement = null;return Result.newErrorResult(Error.error(ErrorCode.X_40001));

rollback(false);sessionContext.currentStatement = null;return Result.newErrorResult(Error.error(ErrorCode.X_40001));

---------------------------Clone group no  1101 for hash 7dc7ac2c6a95b22a42944a53e5db763f--------------------



break;case SchemaObject.COLLATION :set = schema.collationLookup;

break;case SchemaObject.COLLATION :set    = schema.collationLookup;

---------------------------Clone group no  1102 for hash 86b468909ac2d0b91f5c1706c7a7af63--------------------



ColumnSchema column = table.getColumn(i);String columnName = columnAliases == null ? column.getName().name
                                                      : (String) columnAliases
                                                          .get(i);if (exclude != null && exclude.contains(columnName)) {
                continue;
            }Expression e = new ExpressionColumn(this, i);

ColumnSchema column = table.getColumn(i);String columnName = columnAliases == null ? column.getName().name
                                                      : (String) columnAliases
                                                          .get(i);if (exclude != null && exclude.contains(columnName)) {
                continue;
            }Expression e = new ExpressionColumn(this, i);

---------------------------Clone group no  1103 for hash 124517c80f3affb542a569ae13d9f48d--------------------



read();if (token.tokenType == Tokens.NO) {
                read();
            } else {
                chain = true;
            }readThis(Tokens.CHAIN);

read();if (token.tokenType == Tokens.NO) {
                    read();
                } else {
                    chain = true;
                }readThis(Tokens.CHAIN);

---------------------------Clone group no  1104 for hash 5beb3d15d077980e146ca4afeeae00e8--------------------



break;default :throw Error.runtimeError(ErrorCode.U_S0500, \"QueryExpression\");

break;default :throw Error.runtimeError(ErrorCode.U_S0500,
                                             \"QueryExpression\");

break;default :throw Error.runtimeError(ErrorCode.U_S0500, \"QueryExpression\");

---------------------------Clone group no  1105 for hash ad3d5c65d97e9843c32327544eed3e05--------------------



if (!session.getGrantee().isAccessible(type)) {
                continue;
            }row                             = t.getEmptyRowData();row[object_catalog]             = database.getCatalogName().name;row[object_schema]              = type.getSchemaName().name;row[object_name]                = type.getName().name;

if (!session.getGrantee().isAccessible(type)) {
                continue;
            }row                             = t.getEmptyRowData();row[object_catalog]             = database.getCatalogName().name;row[object_schema]              = type.getSchemaName().name;row[object_name]                = type.getName().name;

---------------------------Clone group no  1106 for hash 5d5a9bc5ff58f8e3b7c34b942e64bc49--------------------



sb.append(left).append(')');break;default :throw Error.runtimeError(ErrorCode.U_S0500,
                                         \"ExpressionAggregate\");

sb.append(left).append(')');break;default :throw Error.runtimeError(ErrorCode.U_S0500,
                                         \"ExpressionAggregate\");

---------------------------Clone group no  1107 for hash 7f1c91c3067fc084df14b2f9d3cce2b5--------------------



final int jar_catalog      = 3;final int jar_schema       = 4;final int jar_name         = 5;//
        Iterator it;Object[] row;

final int jar_catalog      = 3;final int jar_schema       = 4;final int jar_name         = 5;//
        Iterator it;Object[] row;

---------------------------Clone group no  1108 for hash 57dc78b5e8fcf6990ce67fc0cfc38a5b--------------------



boolean exists = false;boolean isFile = false;try {
            exists = m_file.exists();
        } catch (Exception ex) {
            throw JDBCUtil.sqlException(ex);
        }if (exists) {
            try {
                isFile = m_file.isFile();
            } catch (Exception ex) {
                throw JDBCUtil.sqlException(ex);
            }
        }if (exists) {
            if (!isFile) {
                throw JDBCUtil.invalidArgument(\"Is not a file: \" + m_file);
            }
        } else if (checkExists) {
            throw JDBCUtil.invalidArgument(\"Does not exist: \" + m_file);
        }

boolean exists = false;boolean isFile = false;try {
            exists = m_file.exists();
        } catch (Exception ex) {
            throw JDBCUtil.sqlException(ex);
        }if (exists) {
            try {
                isFile = m_file.isFile();
            } catch (Exception ex) {
                throw JDBCUtil.sqlException(ex);
            }
        }if (exists) {
            if (!isFile) {
                throw JDBCUtil.invalidArgument(\"Is not a file: \" + m_file);
            }
        } else if (checkExists) {
            throw JDBCUtil.invalidArgument(\"Does not exist: \" + m_file);
        }

---------------------------Clone group no  1109 for hash 509cc6c214541b30913dba37b0e168dc--------------------



txtCommand.setText(sqlScriptBuffer);sqlScriptBuffer = null;txtCommand.setEnabled(true);

txtCommand.setText(sqlScriptBuffer);sqlScriptBuffer = null;txtCommand.setEnabled(true);

---------------------------Clone group no  1110 for hash 16a8e5a9f9212ac7276d8bde447f7f9b--------------------



// intermediate holders
        int           columnCount;Iterator      routines;RoutineSchema routineSchema;Routine       routine;Object[]      row;Type          type;

// intermediate holders
        int           columnCount;Iterator      routines;RoutineSchema routineSchema;Routine       routine;Object[]      row;Type          type;

---------------------------Clone group no  1111 for hash f4be2c791e641227ce1c8cfd2a945231--------------------



Grantee granteeObject = (Grantee) grantees.get(i);OrderedHashSet rights =
                    granteeObject.getAllDirectPrivileges(object);OrderedHashSet grants =
                    granteeObject.getAllGrantedPrivileges(object);if (!grants.isEmpty()) {
                    grants.addAll(rights);

                    rights = grants;
                }

Grantee granteeObject = (Grantee) grantees.get(i);OrderedHashSet rights =
                    granteeObject.getAllDirectPrivileges(object);OrderedHashSet grants =
                    granteeObject.getAllGrantedPrivileges(object);if (!grants.isEmpty()) {
                    grants.addAll(rights);

                    rights = grants;
                }

---------------------------Clone group no  1112 for hash 07d1a74f6345c63ff8c0e4b3f3fe210d--------------------



if (accessCount > ACCESS_MAX) {
                    resetAccessCount();
                }accessTable[lookup] = accessCount++;return testValue;

if (accessCount > ACCESS_MAX) {
            resetAccessCount();
        }accessTable[lookup] = accessCount++;return testValue;

---------------------------Clone group no  1113 for hash be5f7cbcbf36f85f0a60f04b6e14a0c3--------------------



metaData.write(rowOut);navigator.write(rowOut, metaData);break;

metaData.write(rowOut);navigator.write(rowOut, metaData);break;

metaData.write(rowOut);navigator.write(rowOut, metaData);break;

---------------------------Clone group no  1114 for hash 0e88f43c20192e88d25cc1d34a74c1ac--------------------



updateCounts = ArrayUtil.arraySlice(updateCounts, 0, count);error        = in;break;

updateCounts = ArrayUtil.arraySlice(updateCounts, 0, count);error        = in;break;

---------------------------Clone group no  1115 for hash eca0cfab0244e06e17fc8cf86c45ad12--------------------



if (iMaxRows != 0 && i == iMaxRows) {
                    break;
                }i++;if (iMaxRows != 0 || i % 100 == 0) {
                    tracer.trace(\"Transfered \" + i + \" rows\");
                }

if (iMaxRows != 0 && i == iMaxRows) {
                    break;
                }i++;if (iMaxRows != 0 || i % 100 == 0) {
                    tracer.trace(\"Transfered \" + i + \" rows\");
                }

---------------------------Clone group no  1116 for hash bfc1227046509b9be74d8c2c9a84e3a6--------------------



break;case Types.SQL_REAL :case Types.SQL_FLOAT :case Types.SQL_DOUBLE :

break;case Types.SQL_REAL :case Types.SQL_FLOAT :case Types.SQL_DOUBLE :

break;case Types.SQL_REAL :case Types.SQL_FLOAT :case Types.SQL_DOUBLE :

break;case Types.SQL_REAL :case Types.SQL_FLOAT :case Types.SQL_DOUBLE :

---------------------------Clone group no  1117 for hash cf64bd5d45e9e122fd4a1c2238e716c6--------------------



{
                return true;
            }default :{
                return false;
            }

{
                return true;
            }default :{
                return false;
            }

{
                return true;
            }default :{
                return false;
            }

{
                return true;
            }default :{
                return false;
            }

---------------------------Clone group no  1118 for hash 35ded776245df11077d2eed1e6e5a752--------------------



result.lobID       = id;result.blockLength = length;return result;

result.lobID       = id;result.blockLength = length;return result;

---------------------------Clone group no  1119 for hash d0c05b3f34eabf7cfe92df48da447fa0--------------------



System.out.println(\"Already initialized\");connectClose(Conn);return;

System.out.println(\"Already initialized\");connectClose(Conn);return;

---------------------------Clone group no  1120 for hash 8b74390649b6cc389d252c573503f680--------------------



ensureCapacity();table[size] = data;size++;

ensureCapacity();table[size] = data;size++;

---------------------------Clone group no  1121 for hash bbcdf4bb90bdb0ff912cd8cb995cfc24--------------------



if (!m.matches())
            throw new BadSpecial(SqltoolRB.pl_malformat.getString());// I think it's impossible to get here, since the pattern is
            // so liberal.
        if (m.groupCount() < 1 || m.group(1) == null) {
            stdprintln(SqltoolRB.deprecated_noop.getString(\"*\"));
            return;
        }String[] tokens = m.group(1).split(\"\\\\s+\", -1);

if (!m.matches())
            throw new BadSpecial(SqltoolRB.pl_malformat.getString());// I think it's impossible to get here, since the pattern is
            // so liberal.
        if (m.groupCount() < 1 || m.group(1) == null) {
            stdprintln(SqltoolRB.deprecated_noop.getString(\"*\"));
            return;
        }String[] tokens = m.group(1).split(\"\\\\s+\", -1);

---------------------------Clone group no  1122 for hash 404e8393251b52dcf0031d2732186437--------------------



if (!m_createdByConnection) {

            /** @todo - Better error message */
            throw JDBCUtil.notSupported();
        }checkClosed();if (pos < MIN_POS || pos > MAX_POS) {
            throw JDBCUtil.outOfRangeArgument(\"pos: \" + pos);
        }

if (!m_createdByConnection) {

            /** @todo - better error message */
            throw JDBCUtil.notSupported();
        }checkClosed();if (pos < MIN_POS || pos > MAX_POS) {
            throw JDBCUtil.outOfRangeArgument(\"pos: \" + pos);
        }

---------------------------Clone group no  1123 for hash 5efa6528ed068935113641b60904bcaf--------------------



NodeAVLDisk node = this;RowAVLDisk  row  = this.row;if (!row.keepInMemory(true)) {
            row  = (RowAVLDisk) store.get(this.row, true);
            node = (NodeAVLDisk) row.getNode(iId);
        }if (!row.isInMemory()) {
            throw Error.runtimeError(ErrorCode.U_S0500, \"NodeAVLDisk\");
        }row.setNodesChanged();

NodeAVLDisk node = this;RowAVLDisk  row  = this.row;if (!row.keepInMemory(true)) {
            row  = (RowAVLDisk) store.get(this.row, true);
            node = (NodeAVLDisk) row.getNode(iId);
        }if (!row.isInMemory()) {
            throw Error.runtimeError(ErrorCode.U_S0500, \"NodeAVLDisk\");
        }row.setNodesChanged();

NodeAVLDisk node = this;RowAVLDisk  row  = this.row;if (!row.keepInMemory(true)) {
            row  = (RowAVLDisk) store.get(this.row, true);
            node = (NodeAVLDisk) row.getNode(iId);
        }if (!row.isInMemory()) {
            throw Error.runtimeError(ErrorCode.U_S0500, \"NodeAVLDisk\");
        }row.setNodesChanged();

---------------------------Clone group no  1124 for hash c3cb82dcdc6a281c7c86b70ffe25b47c--------------------



td.setSQL(getLastPart(position));compileContext.decrementDepth();return e;

td.setSQL(getLastPart(position));compileContext.decrementDepth();return e;

---------------------------Clone group no  1125 for hash 4feeb23565aea45d560f26a9f47dbb9a--------------------



case Types.SQL_DATE :case Types.SQL_TIME_WITH_TIME_ZONE :case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :case Types.SQL_TIME :case Types.SQL_TIMESTAMP :

/*
            case Types.OTHER :
                try {
                    if (o instanceof Serializable) {
                        o = new JavaObjectData((Serializable) o);

                        break;
                    }
                } catch (HsqlException e) {
                    PgType.throwError(e);
                }
                PgType.throwError(Error.error(ErrorCode.X_42565));

                break;
            case Types.SQL_BLOB :
                //setBlobParameter(i, o);

                //break;
            case Types.SQL_CLOB :
                //setClobParameter(i, o);

                //break;
            */
            case Types.SQL_DATE :case Types.SQL_TIME_WITH_TIME_ZONE :case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :case Types.SQL_TIME :case Types.SQL_TIMESTAMP :

---------------------------Clone group no  1126 for hash adfdaa1878b7a3093b0b160801aee800--------------------



byte[] largeBlock = (byte[]) byteStoreList.get(largeBlockIndex);int    blockOffset       = blockAddress % blocksInLargeBlock;int    currentBlockCount = blockCount;if ((blockOffset + currentBlockCount) > blocksInLargeBlock) {
                currentBlockCount = blocksInLargeBlock - blockOffset;
            }

byte[] largeBlock = (byte[]) byteStoreList.get(largeBlockIndex);int    blockOffset       = blockAddress % blocksInLargeBlock;int    currentBlockCount = blockCount;if ((blockOffset + currentBlockCount) > blocksInLargeBlock) {
                currentBlockCount = blocksInLargeBlock - blockOffset;
            }

---------------------------Clone group no  1127 for hash 50669976ab89b54f8bc9a142475c6ec3--------------------



//                random = i;
                ps.setInt(1, random);count += ps.executeUpdate();/*
                if ((i + 1) % 10000 == 0) {
                    Statement st = cConnection.createStatement();

                    st.execute(\"CHECKPOINT DEFRAG\");
                    st.close();
                }
*/
                if (reportProgress && (i + 1) % 10000 == 0
                        || (slow && (i + 1) % 100 == 0)) {
                    System.out.println(\"delete \" + (i + 1) + \" : \"
                                       + sw.elapsedTime() + \" rps: \"
                                       + (i * 1000 / (sw.elapsedTime() + 1)));
                }

ps.setInt(1, random);count += ps.executeUpdate();if (reportProgress && (i + 1) % 10000 == 0
                        || (slow && (i + 1) % 100 == 0)) {
                    System.out.println(\"delete \" + (i + 1) + \" : \"
                                       + sw.elapsedTime() + \" rps: \"
                                       + (i * 1000 / (sw.elapsedTime() + 1)));
                }

---------------------------Clone group no  1128 for hash 7d1bea06866a0ff575d3711c0f92956c--------------------



read();readThis(Tokens.OPENBRACKET);int position = getPosition();

read();readThis(Tokens.OPENBRACKET);int position = getPosition();

read();readThis(Tokens.OPENBRACKET);int position = getPosition();

---------------------------Clone group no  1129 for hash 95d3bbf174005805927572c022c93f51--------------------



a = convertToDefaultType(null, a);b = convertToDefaultType(null, b);BigDecimal abd = (BigDecimal) a;BigDecimal bbd = (BigDecimal) b;

a = convertToDefaultType(null, a);b = convertToDefaultType(null, b);BigDecimal abd = (BigDecimal) a;BigDecimal bbd = (BigDecimal) b;

---------------------------Clone group no  1130 for hash 65fb8e948bd8f807e83716a6c4f085ea--------------------



if (end) {
                break;
            }read();Expression a = e;

if (end) {
                break;
            }read();Expression a = e;

---------------------------Clone group no  1131 for hash 440e3e15b5d63c7c0545c89c7e1cbc9f--------------------



int oldSize = size();super.addOrRemove(key, value, null, null, false);return oldSize != size();

int oldSize = size();super.addOrRemove(key, value, null, null, false);return oldSize != size();

---------------------------Clone group no  1132 for hash b8d53f2f66aed63cfacb37b4e3173516--------------------



break;default :throw Error.runtimeError(ErrorCode.U_S0500, \"ExpressionOp\");

break;default :throw Error.runtimeError(ErrorCode.U_S0500, \"ExpressionOp\");

break;default :throw Error.runtimeError(ErrorCode.U_S0500, \"ExpressionOp\");

---------------------------Clone group no  1133 for hash 3eb6a98cf6e264dbdd5f53982f49d901--------------------



read();break;case Tokens.NOT :read();

read();break;case Tokens.NOT :read();

---------------------------Clone group no  1134 for hash 6962fd425596c269c10f6abc23bde62c--------------------



result.blockOffset = dataInput.readLong();result.blockLength = dataInput.readLong();result.charBlock   = new char[(int) result.blockLength];for (int i = 0; i < result.charBlock.length; i++) {
                    result.charBlock[i] = dataInput.readChar();
                }break;

result.blockOffset = dataInput.readLong();result.blockLength = dataInput.readLong();result.charBlock   = new char[(int) result.blockLength];for (int i = 0; i < result.charBlock.length; i++) {
                    result.charBlock[i] = dataInput.readChar();
                }break;

---------------------------Clone group no  1135 for hash a0beaa254a04a909a8b20c123d835fcc--------------------



case Types.SQL_INTERVAL_YEAR :case Types.SQL_INTERVAL_YEAR_TO_MONTH :case Types.SQL_INTERVAL_MONTH :

case Types.SQL_INTERVAL_YEAR :case Types.SQL_INTERVAL_YEAR_TO_MONTH :case Types.SQL_INTERVAL_MONTH :

case Types.SQL_INTERVAL_YEAR :case Types.SQL_INTERVAL_YEAR_TO_MONTH :case Types.SQL_INTERVAL_MONTH :

case Types.SQL_INTERVAL_YEAR :case Types.SQL_INTERVAL_YEAR_TO_MONTH :case Types.SQL_INTERVAL_MONTH :

case Types.SQL_INTERVAL_YEAR :case Types.SQL_INTERVAL_YEAR_TO_MONTH :case Types.SQL_INTERVAL_MONTH :

case Types.SQL_INTERVAL_YEAR :case Types.SQL_INTERVAL_YEAR_TO_MONTH :case Types.SQL_INTERVAL_MONTH :

case Types.SQL_INTERVAL_YEAR :case Types.SQL_INTERVAL_YEAR_TO_MONTH :case Types.SQL_INTERVAL_MONTH :

case Types.SQL_INTERVAL_YEAR :case Types.SQL_INTERVAL_YEAR_TO_MONTH :case Types.SQL_INTERVAL_MONTH :

case Types.SQL_INTERVAL_YEAR :case Types.SQL_INTERVAL_YEAR_TO_MONTH :case Types.SQL_INTERVAL_MONTH :

case Types.SQL_INTERVAL_YEAR :case Types.SQL_INTERVAL_YEAR_TO_MONTH :case Types.SQL_INTERVAL_MONTH :

// Postgresql is returning type DATETIME for this case.
            // It should return TYPE_TIMESTAMP, no?
            /* *********************************************************
             * For INTERVALs, we get the more specific type here, not just
             * SQL_INTERVAL.
            case Types.SQL_INTERVAL:
             *
             * The reason no precisions are passed to the ODBC client is that I
             * have so far been unsuccessful at figuring out exactly how the
             * driver wants the atttypmod formatted.  See doc/odbc.txt for
             * notes about this.
             */
            case Types.SQL_INTERVAL_YEAR:case Types.SQL_INTERVAL_YEAR_TO_MONTH:case Types.SQL_INTERVAL_MONTH:

case Types.SQL_INTERVAL_YEAR :case Types.SQL_INTERVAL_YEAR_TO_MONTH :case Types.SQL_INTERVAL_MONTH :

---------------------------Clone group no  1136 for hash d820fb3f8f9c452878ea435591b738b3--------------------



Object[] list = session.rowActionList.getArray();mergeTransaction(list, 0, limit, session.actionTimestamp);finaliseRows(session, list, 0, limit);

Object[] list = session.rowActionList.getArray();mergeTransaction(list, 0, limit, session.actionTimestamp);finaliseRows(session, list, 0, limit);

---------------------------Clone group no  1137 for hash 8fc405a4da25ca81f1aaa0abce18227d--------------------



case SchemaObject.VIEW :case SchemaObject.CONSTRAINT :case SchemaObject.ASSERTION :case SchemaObject.ROUTINE :case SchemaObject.PROCEDURE :case SchemaObject.FUNCTION :case SchemaObject.SPECIFIC_ROUTINE :SchemaObject object = getSchemaObject(name);object.compile(session, null);break;

case SchemaObject.VIEW :case SchemaObject.CONSTRAINT :case SchemaObject.ASSERTION :case SchemaObject.ROUTINE :case SchemaObject.PROCEDURE :case SchemaObject.FUNCTION :case SchemaObject.SPECIFIC_ROUTINE :SchemaObject object = getSchemaObject(name);object.compile(session, null);break;

---------------------------Clone group no  1138 for hash a5a1c5bc72800d31280504e3bba4d304--------------------



checkClosed();if (savepoint == null) {
            throw JDBCUtil.nullArgument();
        }if (!(savepoint instanceof JDBCSavepoint)) {
            String msg = Error.getMessage(ErrorCode.X_3B001);

            throw JDBCUtil.invalidArgument(msg);
        }sp = (JDBCSavepoint) savepoint;if (JDBCDatabaseMetaData.JDBC_MAJOR >= 4 && sp.name == null) {
            String msg = Error.getMessage(ErrorCode.X_3B001);

            throw JDBCUtil.invalidArgument(msg);
        }if (this != sp.connection) {
            String msg = Error.getMessage(ErrorCode.X_3B001);

            throw JDBCUtil.invalidArgument(msg);
        }if (JDBCDatabaseMetaData.JDBC_MAJOR >= 4 && getAutoCommit()) {
            sp.name       = null;
            sp.connection = null;

            throw JDBCUtil.sqlException(ErrorCode.X_3B001);
        }

checkClosed();if (savepoint == null) {
            throw JDBCUtil.nullArgument();
        }if (!(savepoint instanceof JDBCSavepoint)) {
            String msg = Error.getMessage(ErrorCode.X_3B001);

            throw JDBCUtil.invalidArgument(msg);
        }sp = (JDBCSavepoint) savepoint;if (JDBCDatabaseMetaData.JDBC_MAJOR >= 4 && sp.name == null) {
            String msg = Error.getMessage(ErrorCode.X_3B001);

            throw JDBCUtil.invalidArgument(msg);
        }if (this != sp.connection) {
            String msg = Error.getMessage(ErrorCode.X_3B001);

            throw JDBCUtil.invalidArgument(msg);
        }if (JDBCDatabaseMetaData.JDBC_MAJOR >= 4 && getAutoCommit()) {
            sp.name       = null;
            sp.connection = null;

            throw JDBCUtil.sqlException(ErrorCode.X_3B001);
        }

---------------------------Clone group no  1139 for hash b66acb27068ca0eff0f1894be55d7373--------------------



File        file       = getFile(filename);long        fileLength = file.length();InputStream is         = null;

File        file       = getFile(filename);long        fileLength = file.length();InputStream is         = null;

---------------------------Clone group no  1140 for hash be06816e1f8fdb2036c9520b4f12195a--------------------



Connection conn = newConnection();TestUtil.testScript(conn, \"testrun/hsqldb/TestText01.txt\");Statement st = conn.createStatement();

Connection conn = newConnection();TestUtil.testScript(conn, \"testrun/hsqldb/TestText01.txt\");Statement st = conn.createStatement();

---------------------------Clone group no  1141 for hash d4f62420979c08694afd95f2125f4b92--------------------



int     value = ((Integer) parameters[0]).intValue();boolean check = parameters[1] == null;session.checkAdmin();session.checkDDLWrite();

int     value = ((Integer) parameters[0]).intValue();boolean check = parameters[1] == null;session.checkAdmin();session.checkDDLWrite();

---------------------------Clone group no  1142 for hash 8680d2ebe94adc268f16bd010fe47765--------------------



boolean isResult = cs.execute();assertFalse(isResult);cs.getMoreResults();ResultSet rs = cs.getResultSet();rs.next();

boolean isResult = cs.execute();assertFalse(isResult);cs.getMoreResults();ResultSet rs = cs.getResultSet();rs.next();

boolean isResult = cs.execute();assertFalse(isResult);cs.getMoreResults();ResultSet rs = cs.getResultSet();rs.next();

boolean isResult = cs.execute();assertFalse(isResult);cs.getMoreResults();ResultSet rs = cs.getResultSet();rs.next();

---------------------------Clone group no  1143 for hash bd38a83c9cd99cecb31a197211ebe361--------------------



long time = sw.elapsedTime();long rate = (i * 1000) / (time + 1);storeResult(\"update with random id\", i, time, rate);System.out.println(\"update time with random id \" + i + \" rows  -- \"
                           + time + \" ms -- \" + rate + \" tps\");

long time = sw.elapsedTime();long rate = (i * 1000) / (time + 1);storeResult(\"update with random id\", i, time, rate);System.out.println(\"update time with random id \" + i + \" rows  -- \"
                           + time + \" ms -- \" + rate + \" tps\");

---------------------------Clone group no  1144 for hash 280ab6f976c516370d09dc697eb2317c--------------------



if (!database.isReferentialIntegrity()) {
            return;
        }TriggerDef[] trigVec = triggerLists[trigVecIndex];for (int i = 0, size = trigVec.length; i < size; i++) {
            TriggerDef td         = trigVec[i];
            boolean    sqlTrigger = td instanceof TriggerDefSQL;

            if (td.hasOldTable()) {

                //
            }

            td.pushPair(session, null, null);
        }

if (!database.isReferentialIntegrity()) {
            return;
        }TriggerDef[] trigVec = triggerLists[trigVecIndex];for (int i = 0, size = trigVec.length; i < size; i++) {
            TriggerDef td         = trigVec[i];
            boolean    sqlTrigger = td instanceof TriggerDefSQL;

            if (td.hasOldTable()) {

                //
            }

            td.pushPair(session, null, null);
        }

---------------------------Clone group no  1145 for hash 17ec5a668511ce18244338ef0c2fe5e0--------------------



mask           = ((source & 0xff) << 8) >>> shift;innermask      = 0xff00 >>> shift;innermask      = ~innermask;b              = map[index + 1];

mask           = ((source & 0xff) << 8) >>> shift;innermask      = 0xff00 >>> shift;innermask      = ~innermask;b              = map[index + 1];

---------------------------Clone group no  1146 for hash f82b5f59d5bcbf57a92190f909d58030--------------------



hasChanged    = true;keys[count]   = key;values[count] = value;count++;return true;

hasChanged    = true;keys[count]   = key;values[count] = value;count++;return true;

---------------------------Clone group no  1147 for hash 2f6914178398d1294cf234708ed8b06c--------------------



case Types.SQL_BIT :case Types.SQL_BIT_VARYING :case Types.SQL_BINARY :case Types.SQL_VARBINARY :

case Types.SQL_BIT :case Types.SQL_BIT_VARYING :case Types.SQL_BINARY :case Types.SQL_VARBINARY :

---------------------------Clone group no  1148 for hash d8602b884644c2e5d1e9fcf88026b798--------------------



returnValue              = objectValueTable[lookup];objectValueTable[lookup] = null;hashIndex.unlinkNode(index, lastLookup, lookup);

returnValue = objectValueTable[lookup];objectValueTable[lookup] = null;hashIndex.unlinkNode(index, lastLookup, lookup);

returnValue              = objectValueTable[lookup];objectValueTable[lookup] = null;hashIndex.unlinkNode(index, lastLookup, lookup);

---------------------------Clone group no  1149 for hash 010ecd53e768d5c4edb66284bc6e20fa--------------------



String Statement = new String(\"\");if (destDb.helper.needTransferTransaction()) {
            try {
                destDb.setAutoCommit(false);
            } catch (Exception e) {}
        }if (Stmts.bTransfer == false) {
            tracer.trace(\"Table \" + Stmts.sSourceTable + \" not transfered\");

            return;
        }

String Statement = new String(\"\");if (destDb.helper.needTransferTransaction()) {
            try {
                destDb.setAutoCommit(false);
            } catch (Exception e) {}
        }if (Stmts.bTransfer == false) {
            tracer.trace(\"Table \" + Stmts.sSourceTable + \" not transfered\");

            return;
        }

---------------------------Clone group no  1150 for hash 281f43f0cc0793f414a570007bbec793--------------------



read();Expression[]   updateExpressions;int[]          columnMap;

read();Expression[]    updateExpressions;int[]           columnMap;

---------------------------Clone group no  1151 for hash 60875243be0ff7da043c99332971037b--------------------



case FUNC_REGEXP_MATCHES :case FUNC_REGEXP_SUBSTRING :case FUNC_REGEXP_SUBSTRING_ARRAY :

case FUNC_REGEXP_MATCHES :case FUNC_REGEXP_SUBSTRING :case FUNC_REGEXP_SUBSTRING_ARRAY :

case FUNC_REGEXP_MATCHES :case FUNC_REGEXP_SUBSTRING :case FUNC_REGEXP_SUBSTRING_ARRAY :

case FUNC_REGEXP_MATCHES :case FUNC_REGEXP_SUBSTRING :case FUNC_REGEXP_SUBSTRING_ARRAY :

---------------------------Clone group no  1152 for hash 54f490c1cd38b16cc9fddb2b6773b394--------------------



result.metaData  = new ResultMetaData(in);result.valueData = readSimple(in, result.metaData);break;

result.metaData            = new ResultMetaData(in);result.valueData           = readSimple(in, result.metaData);break;

---------------------------Clone group no  1153 for hash a314d553d725c6f8a4b7fa579061d371--------------------



//            case TableBase.MEMORY_TABLE :
            case TableBase.FUNCTION_TABLE :case TableBase.SYSTEM_SUBQUERY :case TableBase.INFO_SCHEMA_TABLE :case TableBase.VIEW_TABLE :case TableBase.TEMP_TABLE :

//            case TableBase.MEMORY_TABLE :
            case TableBase.FUNCTION_TABLE :case TableBase.SYSTEM_SUBQUERY :case TableBase.INFO_SCHEMA_TABLE :case TableBase.VIEW_TABLE :case TableBase.TEMP_TABLE :

//            case TableBase.MEMORY_TABLE :
            case TableBase.FUNCTION_TABLE :case TableBase.SYSTEM_SUBQUERY :case TableBase.INFO_SCHEMA_TABLE :case TableBase.VIEW_TABLE :case TableBase.TEMP_TABLE :

case TableBase.FUNCTION_TABLE :case TableBase.SYSTEM_SUBQUERY :case TableBase.INFO_SCHEMA_TABLE :case TableBase.VIEW_TABLE :case TableBase.TEMP_TABLE :

---------------------------Clone group no  1154 for hash 52002062ad60090414c42bb0e90dae33--------------------



addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);           //0addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);addColumn(t, \"ORDINAL_POSITION\", CARDINAL_NUMBER);

addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);                        // not nulladdColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);                       // not nulladdColumn(t, \"ORDINAL_POSITION\", CARDINAL_NUMBER);                 // not null